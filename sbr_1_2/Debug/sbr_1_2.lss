
sbr_1_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  000057f6  0000588a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000057f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025b  00800170  00800170  000058fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000058fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000592c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000fc8  00000000  00000000  0000596c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e1d2  00000000  00000000  00006934  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003040  00000000  00000000  00024b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004088  00000000  00000000  00027b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000383c  00000000  00000000  0002bbd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007d2f  00000000  00000000  0002f40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000122f1  00000000  00000000  0003713b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001030  00000000  00000000  0004942c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__ctors_end>
       4:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__vector_1>
       8:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <__vector_2>
       c:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__vector_3>
      10:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__vector_3>
      14:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__vector_3>
      18:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      1c:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__vector_7>
      20:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      24:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      28:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      2c:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      30:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      34:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      38:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      3c:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      40:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__vector_16>
      44:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      48:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_18>
      4c:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__vector_19>
      50:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      54:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      58:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      5c:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      60:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__vector_24>
      64:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__bad_interrupt>
      68:	00 1c       	adc	r0, r0
      6a:	04 1c       	adc	r0, r4
      6c:	04 1c       	adc	r0, r4
      6e:	04 1c       	adc	r0, r4
      70:	04 1c       	adc	r0, r4
      72:	04 1c       	adc	r0, r4
      74:	04 1c       	adc	r0, r4
      76:	04 1c       	adc	r0, r4
      78:	14 1b       	sub	r17, r20
      7a:	04 1c       	adc	r0, r4
      7c:	04 1c       	adc	r0, r4
      7e:	04 1c       	adc	r0, r4
      80:	04 1c       	adc	r0, r4
      82:	04 1c       	adc	r0, r4
      84:	04 1c       	adc	r0, r4
      86:	04 1c       	adc	r0, r4
      88:	14 1b       	sub	r17, r20
      8a:	04 1c       	adc	r0, r4
      8c:	04 1c       	adc	r0, r4
      8e:	04 1c       	adc	r0, r4
      90:	04 1c       	adc	r0, r4
      92:	04 1c       	adc	r0, r4
      94:	04 1c       	adc	r0, r4
      96:	04 1c       	adc	r0, r4
      98:	1c 1b       	sub	r17, r28
      9a:	04 1c       	adc	r0, r4
      9c:	04 1c       	adc	r0, r4
      9e:	04 1c       	adc	r0, r4
      a0:	04 1c       	adc	r0, r4
      a2:	04 1c       	adc	r0, r4
      a4:	04 1c       	adc	r0, r4
      a6:	04 1c       	adc	r0, r4
      a8:	42 1b       	sub	r20, r18
      aa:	04 1c       	adc	r0, r4
      ac:	04 1c       	adc	r0, r4
      ae:	04 1c       	adc	r0, r4
      b0:	04 1c       	adc	r0, r4
      b2:	04 1c       	adc	r0, r4
      b4:	04 1c       	adc	r0, r4
      b6:	04 1c       	adc	r0, r4
      b8:	1c 1b       	sub	r17, r28
      ba:	04 1c       	adc	r0, r4
      bc:	04 1c       	adc	r0, r4
      be:	04 1c       	adc	r0, r4
      c0:	04 1c       	adc	r0, r4
      c2:	04 1c       	adc	r0, r4
      c4:	04 1c       	adc	r0, r4
      c6:	04 1c       	adc	r0, r4
      c8:	48 1b       	sub	r20, r24
      ca:	04 1c       	adc	r0, r4
      cc:	04 1c       	adc	r0, r4
      ce:	04 1c       	adc	r0, r4
      d0:	04 1c       	adc	r0, r4
      d2:	04 1c       	adc	r0, r4
      d4:	04 1c       	adc	r0, r4
      d6:	04 1c       	adc	r0, r4
      d8:	4e 1b       	sub	r20, r30
      da:	04 1c       	adc	r0, r4
      dc:	04 1c       	adc	r0, r4
      de:	04 1c       	adc	r0, r4
      e0:	04 1c       	adc	r0, r4
      e2:	04 1c       	adc	r0, r4
      e4:	04 1c       	adc	r0, r4
      e6:	04 1c       	adc	r0, r4
      e8:	60 1b       	sub	r22, r16
      ea:	04 1c       	adc	r0, r4
      ec:	04 1c       	adc	r0, r4
      ee:	04 1c       	adc	r0, r4
      f0:	04 1c       	adc	r0, r4
      f2:	04 1c       	adc	r0, r4
      f4:	04 1c       	adc	r0, r4
      f6:	04 1c       	adc	r0, r4
      f8:	8a 1b       	sub	r24, r26
      fa:	04 1c       	adc	r0, r4
      fc:	04 1c       	adc	r0, r4
      fe:	04 1c       	adc	r0, r4
     100:	04 1c       	adc	r0, r4
     102:	04 1c       	adc	r0, r4
     104:	04 1c       	adc	r0, r4
     106:	04 1c       	adc	r0, r4
     108:	54 1b       	sub	r21, r20
     10a:	04 1c       	adc	r0, r4
     10c:	04 1c       	adc	r0, r4
     10e:	04 1c       	adc	r0, r4
     110:	04 1c       	adc	r0, r4
     112:	04 1c       	adc	r0, r4
     114:	04 1c       	adc	r0, r4
     116:	04 1c       	adc	r0, r4
     118:	6e 1b       	sub	r22, r30
     11a:	04 1c       	adc	r0, r4
     11c:	04 1c       	adc	r0, r4
     11e:	04 1c       	adc	r0, r4
     120:	04 1c       	adc	r0, r4
     122:	04 1c       	adc	r0, r4
     124:	04 1c       	adc	r0, r4
     126:	04 1c       	adc	r0, r4
     128:	8d 1b       	sub	r24, r29
     12a:	04 1c       	adc	r0, r4
     12c:	04 1c       	adc	r0, r4
     12e:	04 1c       	adc	r0, r4
     130:	04 1c       	adc	r0, r4
     132:	04 1c       	adc	r0, r4
     134:	04 1c       	adc	r0, r4
     136:	04 1c       	adc	r0, r4
     138:	8d 1b       	sub	r24, r29
     13a:	04 1c       	adc	r0, r4
     13c:	04 1c       	adc	r0, r4
     13e:	04 1c       	adc	r0, r4
     140:	04 1c       	adc	r0, r4
     142:	04 1c       	adc	r0, r4
     144:	04 1c       	adc	r0, r4
     146:	04 1c       	adc	r0, r4
     148:	8d 1b       	sub	r24, r29
     14a:	04 1c       	adc	r0, r4
     14c:	04 1c       	adc	r0, r4
     14e:	04 1c       	adc	r0, r4
     150:	04 1c       	adc	r0, r4
     152:	04 1c       	adc	r0, r4
     154:	04 1c       	adc	r0, r4
     156:	04 1c       	adc	r0, r4
     158:	8d 1b       	sub	r24, r29
     15a:	04 1c       	adc	r0, r4
     15c:	04 1c       	adc	r0, r4
     15e:	04 1c       	adc	r0, r4
     160:	04 1c       	adc	r0, r4
     162:	04 1c       	adc	r0, r4
     164:	04 1c       	adc	r0, r4
     166:	04 1c       	adc	r0, r4
     168:	96 1b       	sub	r25, r22
     16a:	04 1c       	adc	r0, r4
     16c:	04 1c       	adc	r0, r4
     16e:	04 1c       	adc	r0, r4
     170:	04 1c       	adc	r0, r4
     172:	04 1c       	adc	r0, r4
     174:	04 1c       	adc	r0, r4
     176:	04 1c       	adc	r0, r4
     178:	c7 1b       	sub	r28, r23
     17a:	04 1c       	adc	r0, r4
     17c:	04 1c       	adc	r0, r4
     17e:	04 1c       	adc	r0, r4
     180:	04 1c       	adc	r0, r4
     182:	04 1c       	adc	r0, r4
     184:	04 1c       	adc	r0, r4
     186:	04 1c       	adc	r0, r4
     188:	96 1b       	sub	r25, r22
     18a:	04 1c       	adc	r0, r4
     18c:	04 1c       	adc	r0, r4
     18e:	04 1c       	adc	r0, r4
     190:	04 1c       	adc	r0, r4
     192:	04 1c       	adc	r0, r4
     194:	04 1c       	adc	r0, r4
     196:	04 1c       	adc	r0, r4
     198:	c7 1b       	sub	r28, r23
     19a:	04 1c       	adc	r0, r4
     19c:	04 1c       	adc	r0, r4
     19e:	04 1c       	adc	r0, r4
     1a0:	04 1c       	adc	r0, r4
     1a2:	04 1c       	adc	r0, r4
     1a4:	04 1c       	adc	r0, r4
     1a6:	04 1c       	adc	r0, r4
     1a8:	ae 1b       	sub	r26, r30
     1aa:	04 1c       	adc	r0, r4
     1ac:	04 1c       	adc	r0, r4
     1ae:	04 1c       	adc	r0, r4
     1b0:	04 1c       	adc	r0, r4
     1b2:	04 1c       	adc	r0, r4
     1b4:	04 1c       	adc	r0, r4
     1b6:	04 1c       	adc	r0, r4
     1b8:	cb 1b       	sub	r28, r27
     1ba:	04 1c       	adc	r0, r4
     1bc:	04 1c       	adc	r0, r4
     1be:	04 1c       	adc	r0, r4
     1c0:	04 1c       	adc	r0, r4
     1c2:	04 1c       	adc	r0, r4
     1c4:	04 1c       	adc	r0, r4
     1c6:	04 1c       	adc	r0, r4
     1c8:	cb 1b       	sub	r28, r27
     1ca:	04 1c       	adc	r0, r4
     1cc:	04 1c       	adc	r0, r4
     1ce:	04 1c       	adc	r0, r4
     1d0:	04 1c       	adc	r0, r4
     1d2:	04 1c       	adc	r0, r4
     1d4:	04 1c       	adc	r0, r4
     1d6:	04 1c       	adc	r0, r4
     1d8:	e0 1b       	sub	r30, r16
     1da:	04 1c       	adc	r0, r4
     1dc:	04 1c       	adc	r0, r4
     1de:	04 1c       	adc	r0, r4
     1e0:	04 1c       	adc	r0, r4
     1e2:	04 1c       	adc	r0, r4
     1e4:	04 1c       	adc	r0, r4
     1e6:	04 1c       	adc	r0, r4
     1e8:	fa 1b       	sub	r31, r26
     1ea:	04 1c       	adc	r0, r4
     1ec:	04 1c       	adc	r0, r4
     1ee:	04 1c       	adc	r0, r4
     1f0:	04 1c       	adc	r0, r4
     1f2:	04 1c       	adc	r0, r4
     1f4:	04 1c       	adc	r0, r4
     1f6:	04 1c       	adc	r0, r4
     1f8:	fa 1b       	sub	r31, r26
     1fa:	08 4a       	sbci	r16, 0xA8	; 168
     1fc:	d7 3b       	cpi	r29, 0xB7	; 183
     1fe:	3b ce       	rjmp	.-906    	; 0xfffffe76 <__eeprom_end+0xff7efe76>
     200:	01 6e       	ori	r16, 0xE1	; 225
     202:	84 bc       	out	0x24, r8	; 36
     204:	bf fd       	.word	0xfdbf	; ????
     206:	c1 2f       	mov	r28, r17
     208:	3d 6c       	ori	r19, 0xCD	; 205
     20a:	74 31       	cpi	r23, 0x14	; 20
     20c:	9a bd       	out	0x2a, r25	; 42
     20e:	56 83       	std	Z+6, r21	; 0x06
     210:	3d da       	rcall	.-2950   	; 0xfffff68c <__eeprom_end+0xff7ef68c>
     212:	3d 00       	.word	0x003d	; ????
     214:	c7 7f       	andi	r28, 0xF7	; 247
     216:	11 be       	out	0x31, r1	; 49
     218:	d9 e4       	ldi	r29, 0x49	; 73
     21a:	bb 4c       	sbci	r27, 0xCB	; 203
     21c:	3e 91       	ld	r19, -X
     21e:	6b aa       	std	Y+51, r6	; 0x33
     220:	aa be       	out	0x3a, r10	; 58
     222:	00 00       	nop
     224:	00 80       	ld	r0, Z
     226:	3f 00       	.word	0x003f	; ????

00000228 <__trampolines_end>:
     228:	02 00       	.word	0x0002	; ????

00000229 <digital_pin_to_timer_PGM>:
     229:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     239:	00 00 00 00                                         ....

0000023d <digital_pin_to_bit_mask_PGM>:
     23d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     24d:	04 08 10 20                                         ... 

00000251 <digital_pin_to_port_PGM>:
     251:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     261:	03 03 03 03                                         ....

00000265 <port_to_output_PGM>:
     265:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000026f <port_to_mode_PGM>:
     26f:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000279 <_ZZ4loopE3__c>:
     279:	46 49 46 4f 20 6f 76 65 72 66 6c 6f 77 21 00        FIFO overflow!.

00000288 <_ZZ5setupE3__c_9>:
     288:	29 00                                               ).

0000028a <_ZZ5setupE3__c_8>:
     28a:	44 4d 50 20 49 6e 69 74 69 61 6c 69 7a 61 74 69     DMP Initializati
     29a:	6f 6e 20 66 61 69 6c 65 64 20 28 63 6f 64 65 20     on failed (code 
	...

000002ab <_ZZ5setupE3__c_7>:
     2ab:	44 4d 50 20 72 65 61 64 79 21 20 57 61 69 74 69     DMP ready! Waiti
     2bb:	6e 67 20 66 6f 72 20 66 69 72 73 74 20 69 6e 74     ng for first int
     2cb:	65 72 72 75 70 74 2e 2e 2e 00                       errupt....

000002d5 <_ZZ5setupE3__c_6>:
     2d5:	45 6e 61 62 6c 69 6e 67 20 69 6e 74 65 72 72 75     Enabling interru
     2e5:	70 74 20 64 65 74 65 63 74 69 6f 6e 20 28 41 72     pt detection (Ar
     2f5:	64 75 69 6e 6f 20 65 78 74 65 72 6e 61 6c 20 69     duino external i
     305:	6e 74 65 72 72 75 70 74 20 30 29 2e 2e 2e 00        nterrupt 0)....

00000314 <_ZZ5setupE3__c_5>:
     314:	45 6e 61 62 6c 69 6e 67 20 44 4d 50 2e 2e 2e 00     Enabling DMP....

00000324 <_ZZ5setupE3__c_4>:
     324:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 44 4d 50     Initializing DMP
     334:	2e 2e 2e 00                                         ....

00000338 <_ZZ5setupE3__c_3>:
     338:	0a 53 65 6e 64 20 61 6e 79 20 63 68 61 72 61 63     .Send any charac
     348:	74 65 72 20 74 6f 20 62 65 67 69 6e 20 44 4d 50     ter to begin DMP
     358:	20 70 72 6f 67 72 61 6d 6d 69 6e 67 20 61 6e 64      programming and
     368:	20 64 65 6d 6f 3a 20 00                              demo: .

00000370 <_ZZ5setupE3__c_2>:
     370:	4d 50 55 36 30 35 30 20 63 6f 6e 6e 65 63 74 69     MPU6050 connecti
     380:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

0000038a <_ZZ5setupE3__c_1>:
     38a:	4d 50 55 36 30 35 30 20 63 6f 6e 6e 65 63 74 69     MPU6050 connecti
     39a:	6f 6e 20 73 75 63 63 65 73 73 66 75 6c 00           on successful.

000003a8 <_ZZ5setupE3__c_0>:
     3a8:	54 65 73 74 69 6e 67 20 64 65 76 69 63 65 20 63     Testing device c
     3b8:	6f 6e 6e 65 63 74 69 6f 6e 73 2e 2e 2e 00           onnections....

000003c6 <_ZZ5setupE3__c>:
     3c6:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
     3d6:	20 64 65 76 69 63 65 73 2e 2e 2e 00                  devices....

000003e2 <_ZZN7MPU605013dmpInitializeEvE3__c_66>:
     3e2:	45 52 52 4f 52 21 20 44 4d 50 20 63 6f 64 65 20     ERROR! DMP code 
     3f2:	76 65 72 69 66 69 63 61 74 69 6f 6e 20 66 61 69     verification fai
     402:	6c 65 64 2e 00                                      led..

00000407 <_ZZN7MPU605013dmpInitializeEvE3__c_65>:
     407:	45 52 52 4f 52 21 20 44 4d 50 20 63 6f 6e 66 69     ERROR! DMP confi
     417:	67 75 72 61 74 69 6f 6e 20 76 65 72 69 66 69 63     guration verific
     427:	61 74 69 6f 6e 20 66 61 69 6c 65 64 2e 00           ation failed..

00000435 <_ZZN7MPU605013dmpInitializeEvE3__c_64>:
     435:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 20 61     Resetting FIFO a
     445:	6e 64 20 63 6c 65 61 72 69 6e 67 20 49 4e 54 20     nd clearing INT 
     455:	73 74 61 74 75 73 20 6f 6e 65 20 6c 61 73 74 20     status one last 
     465:	74 69 6d 65 2e 2e 2e 00                             time....

0000046d <_ZZN7MPU605013dmpInitializeEvE3__c_63>:
     46d:	53 65 74 74 69 6e 67 20 75 70 20 69 6e 74 65 72     Setting up inter
     47d:	6e 61 6c 20 34 32 2d 62 79 74 65 20 28 64 65 66     nal 42-byte (def
     48d:	61 75 6c 74 29 20 44 4d 50 20 70 61 63 6b 65 74     ault) DMP packet
     49d:	20 62 75 66 66 65 72 2e 2e 2e 00                     buffer....

000004a8 <_ZZN7MPU605013dmpInitializeEvE3__c_62>:
     4a8:	44 69 73 61 62 6c 69 6e 67 20 44 4d 50 20 28 79     Disabling DMP (y
     4b8:	6f 75 20 74 75 72 6e 20 69 74 20 6f 6e 20 6c 61     ou turn it on la
     4c8:	74 65 72 29 2e 2e 2e 00                             ter)....

000004d0 <_ZZN7MPU605013dmpInitializeEvE3__c_61>:
     4d0:	44 4d 50 20 69 73 20 67 6f 6f 64 20 74 6f 20 67     DMP is good to g
     4e0:	6f 21 20 46 69 6e 61 6c 6c 79 2e 00                 o! Finally..

000004ec <_ZZN7MPU605013dmpInitializeEvE3__c_60>:
     4ec:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     4fc:	6d 6f 72 79 20 75 70 64 61 74 65 20 37 2f 37 20     mory update 7/7 
     50c:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     51c:	6e 29 2e 2e 2e 00                                   n)....

00000522 <_ZZN7MPU605013dmpInitializeEvE3__c_59>:
     522:	43 75 72 72 65 6e 74 20 69 6e 74 65 72 72 75 70     Current interrup
     532:	74 20 73 74 61 74 75 73 3d 00                       t status=.

0000053c <_ZZN7MPU605013dmpInitializeEvE3__c_58>:
     53c:	52 65 61 64 69 6e 67 20 69 6e 74 65 72 72 75 70     Reading interrup
     54c:	74 20 73 74 61 74 75 73 2e 2e 2e 00                 t status....

00000558 <_ZZN7MPU605013dmpInitializeEvE3__c_57>:
     558:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 64 61 74     Reading FIFO dat
     568:	61 2e 2e 2e 00                                      a....

0000056d <_ZZN7MPU605013dmpInitializeEvE3__c_56>:
     56d:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     57d:	6e 74 3d 00                                         nt=.

00000581 <_ZZN7MPU605013dmpInitializeEvE3__c_55>:
     581:	57 61 69 74 69 6e 67 20 66 6f 72 20 46 49 46 4f     Waiting for FIFO
     591:	20 63 6f 75 6e 74 20 3e 20 32 2e 2e 2e 00            count > 2....

0000059f <_ZZN7MPU605013dmpInitializeEvE3__c_54>:
     59f:	52 65 61 64 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Reading final me
     5af:	6d 6f 72 79 20 75 70 64 61 74 65 20 36 2f 37 20     mory update 6/7 
     5bf:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     5cf:	6e 29 2e 2e 2e 00                                   n)....

000005d5 <_ZZN7MPU605013dmpInitializeEvE3__c_53>:
     5d5:	43 75 72 72 65 6e 74 20 69 6e 74 65 72 72 75 70     Current interrup
     5e5:	74 20 73 74 61 74 75 73 3d 00                       t status=.

000005ef <_ZZN7MPU605013dmpInitializeEvE3__c_52>:
     5ef:	52 65 61 64 69 6e 67 20 69 6e 74 65 72 72 75 70     Reading interrup
     5ff:	74 20 73 74 61 74 75 73 2e 2e 2e 00                 t status....

0000060b <_ZZN7MPU605013dmpInitializeEvE3__c_51>:
     60b:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 64 61 74     Reading FIFO dat
     61b:	61 2e 2e 2e 00                                      a....

00000620 <_ZZN7MPU605013dmpInitializeEvE3__c_50>:
     620:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     630:	6e 74 3d 00                                         nt=.

00000634 <_ZZN7MPU605013dmpInitializeEvE3__c_49>:
     634:	57 61 69 74 69 6e 67 20 66 6f 72 20 46 49 46 4f     Waiting for FIFO
     644:	20 63 6f 75 6e 74 20 3e 20 32 2e 2e 2e 00            count > 2....

00000652 <_ZZN7MPU605013dmpInitializeEvE3__c_48>:
     652:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     662:	6d 6f 72 79 20 75 70 64 61 74 65 20 35 2f 37 20     mory update 5/7 
     672:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     682:	6e 29 2e 2e 2e 00                                   n)....

00000688 <_ZZN7MPU605013dmpInitializeEvE3__c_47>:
     688:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     698:	6d 6f 72 79 20 75 70 64 61 74 65 20 34 2f 37 20     mory update 4/7 
     6a8:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     6b8:	6e 29 2e 2e 2e 00                                   n)....

000006be <_ZZN7MPU605013dmpInitializeEvE3__c_46>:
     6be:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     6ce:	6d 6f 72 79 20 75 70 64 61 74 65 20 33 2f 37 20     mory update 3/7 
     6de:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     6ee:	6e 29 2e 2e 2e 00                                   n)....

000006f4 <_ZZN7MPU605013dmpInitializeEvE3__c_45>:
     6f4:	52 65 73 65 74 74 69 6e 67 20 44 4d 50 2e 2e 2e     Resetting DMP...
	...

00000705 <_ZZN7MPU605013dmpInitializeEvE3__c_44>:
     705:	45 6e 61 62 6c 69 6e 67 20 44 4d 50 2e 2e 2e 00     Enabling DMP....

00000715 <_ZZN7MPU605013dmpInitializeEvE3__c_43>:
     715:	45 6e 61 62 6c 69 6e 67 20 46 49 46 4f 2e 2e 2e     Enabling FIFO...
	...

00000726 <_ZZN7MPU605013dmpInitializeEvE3__c_42>:
     726:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 2e 2e     Resetting FIFO..
     736:	2e 00                                               ..

00000738 <_ZZN7MPU605013dmpInitializeEvE3__c_41>:
     738:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     748:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 64 75     ion detection du
     758:	72 61 74 69 6f 6e 20 74 6f 20 30 2e 2e 2e 00        ration to 0....

00000767 <_ZZN7MPU605013dmpInitializeEvE3__c_40>:
     767:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     777:	65 74 65 63 74 69 6f 6e 20 64 75 72 61 74 69 6f     etection duratio
     787:	6e 20 74 6f 20 38 30 2e 2e 2e 00                    n to 80....

00000792 <_ZZN7MPU605013dmpInitializeEvE3__c_39>:
     792:	53 65 74 74 69 6e 67 20 7a 65 72 6f 2d 6d 6f 74     Setting zero-mot
     7a2:	69 6f 6e 20 64 65 74 65 63 74 69 6f 6e 20 74 68     ion detection th
     7b2:	72 65 73 68 6f 6c 64 20 74 6f 20 31 35 36 2e 2e     reshold to 156..
     7c2:	2e 00                                               ..

000007c4 <_ZZN7MPU605013dmpInitializeEvE3__c_38>:
     7c4:	53 65 74 74 69 6e 67 20 6d 6f 74 69 6f 6e 20 64     Setting motion d
     7d4:	65 74 65 63 74 69 6f 6e 20 74 68 72 65 73 68 6f     etection thresho
     7e4:	6c 64 20 74 6f 20 32 2e 2e 2e 00                    ld to 2....

000007ef <_ZZN7MPU605013dmpInitializeEvE3__c_37>:
     7ef:	43 75 72 72 65 6e 74 20 46 49 46 4f 20 63 6f 75     Current FIFO cou
     7ff:	6e 74 3d 00                                         nt=.

00000803 <_ZZN7MPU605013dmpInitializeEvE3__c_36>:
     803:	52 65 61 64 69 6e 67 20 46 49 46 4f 20 63 6f 75     Reading FIFO cou
     813:	6e 74 2e 2e 2e 00                                   nt....

00000819 <_ZZN7MPU605013dmpInitializeEvE3__c_35>:
     819:	52 65 73 65 74 74 69 6e 67 20 46 49 46 4f 2e 2e     Resetting FIFO..
     829:	2e 00                                               ..

0000082b <_ZZN7MPU605013dmpInitializeEvE3__c_34>:
     82b:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     83b:	6d 6f 72 79 20 75 70 64 61 74 65 20 32 2f 37 20     mory update 2/7 
     84b:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     85b:	6e 29 2e 2e 2e 00                                   n)....

00000861 <_ZZN7MPU605013dmpInitializeEvE3__c_33>:
     861:	57 72 69 74 69 6e 67 20 66 69 6e 61 6c 20 6d 65     Writing final me
     871:	6d 6f 72 79 20 75 70 64 61 74 65 20 31 2f 37 20     mory update 1/7 
     881:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     891:	6e 29 2e 2e 2e 00                                   n)....

00000897 <_ZZN7MPU605013dmpInitializeEvE3__c_32>:
     897:	53 65 74 74 69 6e 67 20 58 2f 59 2f 5a 20 67 79     Setting X/Y/Z gy
     8a7:	72 6f 20 6f 66 66 73 65 74 20 54 43 73 20 74 6f     ro offset TCs to
     8b7:	20 70 72 65 76 69 6f 75 73 20 76 61 6c 75 65 73      previous values
     8c7:	2e 2e 2e 00                                         ....

000008cb <_ZZN7MPU605013dmpInitializeEvE3__c_31>:
     8cb:	43 6c 65 61 72 69 6e 67 20 4f 54 50 20 42 61 6e     Clearing OTP Ban
     8db:	6b 20 66 6c 61 67 2e 2e 2e 00                       k flag....

000008e5 <_ZZN7MPU605013dmpInitializeEvE3__c_30>:
     8e5:	53 65 74 74 69 6e 67 20 44 4d 50 20 63 6f 6e 66     Setting DMP conf
     8f5:	69 67 75 72 61 74 69 6f 6e 20 62 79 74 65 73 20     iguration bytes 
     905:	28 66 75 6e 63 74 69 6f 6e 20 75 6e 6b 6e 6f 77     (function unknow
     915:	6e 29 2e 2e 2e 00                                   n)....

0000091b <_ZZN7MPU605013dmpInitializeEvE3__c_29>:
     91b:	53 65 74 74 69 6e 67 20 67 79 72 6f 20 73 65 6e     Setting gyro sen
     92b:	73 69 74 69 76 69 74 79 20 74 6f 20 2b 2f 2d 20     sitivity to +/- 
     93b:	32 30 30 30 20 64 65 67 2f 73 65 63 2e 2e 2e 00     2000 deg/sec....

0000094b <_ZZN7MPU605013dmpInitializeEvE3__c_28>:
     94b:	53 65 74 74 69 6e 67 20 44 4c 50 46 20 62 61 6e     Setting DLPF ban
     95b:	64 77 69 64 74 68 20 74 6f 20 34 32 48 7a 2e 2e     dwidth to 42Hz..
     96b:	2e 00                                               ..

0000096d <_ZZN7MPU605013dmpInitializeEvE3__c_27>:
     96d:	53 65 74 74 69 6e 67 20 65 78 74 65 72 6e 61 6c     Setting external
     97d:	20 66 72 61 6d 65 20 73 79 6e 63 20 74 6f 20 54      frame sync to T
     98d:	45 4d 50 5f 4f 55 54 5f 4c 5b 30 5d 2e 2e 2e 00     EMP_OUT_L[0]....

0000099d <_ZZN7MPU605013dmpInitializeEvE3__c_26>:
     99d:	53 65 74 74 69 6e 67 20 73 61 6d 70 6c 65 20 72     Setting sample r
     9ad:	61 74 65 20 74 6f 20 32 30 30 48 7a 2e 2e 2e 00     ate to 200Hz....

000009bd <_ZZN7MPU605013dmpInitializeEvE3__c_25>:
     9bd:	53 65 74 74 69 6e 67 20 44 4d 50 20 61 6e 64 20     Setting DMP and 
     9cd:	46 49 46 4f 5f 4f 46 4c 4f 57 20 69 6e 74 65 72     FIFO_OFLOW inter
     9dd:	72 75 70 74 73 20 65 6e 61 62 6c 65 64 2e 2e 2e     rupts enabled...
	...

000009ee <_ZZN7MPU605013dmpInitializeEvE3__c_24>:
     9ee:	53 65 74 74 69 6e 67 20 63 6c 6f 63 6b 20 73 6f     Setting clock so
     9fe:	75 72 63 65 20 74 6f 20 5a 20 47 79 72 6f 2e 2e     urce to Z Gyro..
     a0e:	2e 00                                               ..

00000a10 <_ZZN7MPU605013dmpInitializeEvE3__c_23>:
     a10:	53 75 63 63 65 73 73 21 20 44 4d 50 20 63 6f 6e     Success! DMP con
     a20:	66 69 67 75 72 61 74 69 6f 6e 20 77 72 69 74 74     figuration writt
     a30:	65 6e 20 61 6e 64 20 76 65 72 69 66 69 65 64 2e     en and verified.
	...

00000a41 <_ZZN7MPU605013dmpInitializeEvE3__c_22>:
     a41:	20 62 79 74 65 73 20 69 6e 20 63 6f 6e 66 69 67      bytes in config
     a51:	20 64 65 66 29 00                                    def).

00000a57 <_ZZN7MPU605013dmpInitializeEvE3__c_21>:
     a57:	57 72 69 74 69 6e 67 20 44 4d 50 20 63 6f 6e 66     Writing DMP conf
     a67:	69 67 75 72 61 74 69 6f 6e 20 74 6f 20 4d 50 55     iguration to MPU
     a77:	20 6d 65 6d 6f 72 79 20 62 61 6e 6b 73 20 28 00      memory banks (.

00000a87 <_ZZN7MPU605013dmpInitializeEvE3__c_20>:
     a87:	53 75 63 63 65 73 73 21 20 44 4d 50 20 63 6f 64     Success! DMP cod
     a97:	65 20 77 72 69 74 74 65 6e 20 61 6e 64 20 76 65     e written and ve
     aa7:	72 69 66 69 65 64 2e 00                             rified..

00000aaf <_ZZN7MPU605013dmpInitializeEvE3__c_19>:
     aaf:	20 62 79 74 65 73 29 00                              bytes).

00000ab7 <_ZZN7MPU605013dmpInitializeEvE3__c_18>:
     ab7:	57 72 69 74 69 6e 67 20 44 4d 50 20 63 6f 64 65     Writing DMP code
     ac7:	20 74 6f 20 4d 50 55 20 6d 65 6d 6f 72 79 20 62      to MPU memory b
     ad7:	61 6e 6b 73 20 28 00                                anks (.

00000ade <_ZZN7MPU605013dmpInitializeEvE3__c_17>:
     ade:	52 65 73 65 74 74 69 6e 67 20 49 32 43 20 4d 61     Resetting I2C Ma
     aee:	73 74 65 72 20 63 6f 6e 74 72 6f 6c 2e 2e 2e 00     ster control....

00000afe <_ZZN7MPU605013dmpInitializeEvE3__c_16>:
     afe:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     b0e:	61 64 64 72 65 73 73 20 74 6f 20 30 78 36 38 20     address to 0x68 
     b1e:	28 73 65 6c 66 29 2e 2e 2e 00                       (self)....

00000b28 <_ZZN7MPU605013dmpInitializeEvE3__c_15>:
     b28:	44 69 73 61 62 6c 69 6e 67 20 49 32 43 20 4d 61     Disabling I2C Ma
     b38:	73 74 65 72 20 6d 6f 64 65 2e 2e 2e 00              ster mode....

00000b45 <_ZZN7MPU605013dmpInitializeEvE3__c_14>:
     b45:	53 65 74 74 69 6e 67 20 73 6c 61 76 65 20 30 20     Setting slave 0 
     b55:	61 64 64 72 65 73 73 20 74 6f 20 30 78 37 46 2e     address to 0x7F.
     b65:	2e 2e 00                                            ...

00000b68 <_ZZN7MPU605013dmpInitializeEvE3__c_13>:
     b68:	5a 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     Z gyro offset = 
	...

00000b79 <_ZZN7MPU605013dmpInitializeEvE3__c_12>:
     b79:	59 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     Y gyro offset = 
	...

00000b8a <_ZZN7MPU605013dmpInitializeEvE3__c_11>:
     b8a:	58 20 67 79 72 6f 20 6f 66 66 73 65 74 20 3d 20     X gyro offset = 
	...

00000b9b <_ZZN7MPU605013dmpInitializeEvE3__c_10>:
     b9b:	52 65 61 64 69 6e 67 20 67 79 72 6f 20 6f 66 66     Reading gyro off
     bab:	73 65 74 20 54 43 20 76 61 6c 75 65 73 2e 2e 2e     set TC values...
	...

00000bbc <_ZZN7MPU605013dmpInitializeEvE3__c_9>:
     bbc:	69 6e 76 61 6c 69 64 21 00                          invalid!.

00000bc5 <_ZZN7MPU605013dmpInitializeEvE3__c_8>:
     bc5:	76 61 6c 69 64 21 00                                valid!.

00000bcc <_ZZN7MPU605013dmpInitializeEvE3__c_7>:
     bcc:	4f 54 50 20 62 61 6e 6b 20 69 73 20 00              OTP bank is .

00000bd9 <_ZZN7MPU605013dmpInitializeEvE3__c_6>:
     bd9:	52 65 61 64 69 6e 67 20 4f 54 50 20 62 61 6e 6b     Reading OTP bank
     be9:	20 76 61 6c 69 64 20 66 6c 61 67 2e 2e 2e 00         valid flag....

00000bf8 <_ZZN7MPU605013dmpInitializeEvE3__c_5>:
     bf8:	52 65 73 65 74 74 69 6e 67 20 6d 65 6d 6f 72 79     Resetting memory
     c08:	20 62 61 6e 6b 20 73 65 6c 65 63 74 69 6f 6e 20      bank selection 
     c18:	74 6f 20 30 2e 2e 2e 00                             to 0....

00000c20 <_ZZN7MPU605013dmpInitializeEvE3__c_4>:
     c20:	52 65 76 69 73 69 6f 6e 20 40 20 75 73 65 72 5b     Revision @ user[
     c30:	31 36 5d 5b 36 5d 20 3d 20 00                       16][6] = .

00000c3a <_ZZN7MPU605013dmpInitializeEvE3__c_3>:
     c3a:	43 68 65 63 6b 69 6e 67 20 68 61 72 64 77 61 72     Checking hardwar
     c4a:	65 20 72 65 76 69 73 69 6f 6e 2e 2e 2e 00           e revision....

00000c58 <_ZZN7MPU605013dmpInitializeEvE3__c_2>:
     c58:	53 65 6c 65 63 74 69 6e 67 20 6d 65 6d 6f 72 79     Selecting memory
     c68:	20 62 79 74 65 20 36 2e 2e 2e 00                     byte 6....

00000c73 <_ZZN7MPU605013dmpInitializeEvE3__c_1>:
     c73:	53 65 6c 65 63 74 69 6e 67 20 75 73 65 72 20 62     Selecting user b
     c83:	61 6e 6b 20 31 36 2e 2e 2e 00                       ank 16....

00000c8d <_ZZN7MPU605013dmpInitializeEvE3__c_0>:
     c8d:	44 69 73 61 62 6c 69 6e 67 20 73 6c 65 65 70 20     Disabling sleep 
     c9d:	6d 6f 64 65 2e 2e 2e 00                             mode....

00000ca5 <_ZZN7MPU605013dmpInitializeEvE3__c>:
     ca5:	0a 0a 52 65 73 65 74 74 69 6e 67 20 4d 50 55 36     ..Resetting MPU6
     cb5:	30 35 30 2e 2e 2e 00                                050....

00000cbc <_ZL10dmpUpdates>:
     cbc:	01 b2 02 ff ff 01 90 04 09 23 a1 35 01 6a 02 06     .........#.5.j..
     ccc:	00 01 60 08 00 00 00 00 00 00 00 00 00 60 04 40     ..`..........`.@
     cdc:	00 00 00 01 62 02 00 00 00 60 04 00 40 00 00        ....b....`..@..

00000ceb <_ZL9dmpConfig>:
     ceb:	03 7b 03 4c cd 6c 03 ab 03 36 56 76 00 68 04 02     .{.L.l...6Vv.h..
     cfb:	cb 47 a2 02 18 04 00 05 8b c1 01 0c 04 00 00 00     .G..............
     d0b:	00 03 7f 06 0c c9 2c 97 97 97 03 89 03 26 46 66     ......,......&Ff
     d1b:	00 6c 02 20 00 02 40 04 00 00 00 00 02 44 04 00     .l. ..@......D..
     d2b:	00 00 00 02 48 04 00 00 00 00 02 4c 04 00 00 00     ....H......L....
     d3b:	00 02 50 04 00 00 00 00 02 54 04 00 00 00 00 02     ..P......T......
     d4b:	58 04 00 00 00 00 02 5c 04 00 00 00 00 02 bc 04     X......\........
     d5b:	00 00 00 00 01 ec 04 00 00 40 00 03 7f 06 0c c9     .........@......
     d6b:	2c 97 97 97 04 02 03 0d 35 5d 04 09 04 87 2d 35     ,.......5]....-5
     d7b:	3d 00 a3 01 00 00 00 00 01 07 86 01 fe 07 41 05     =.............A.
     d8b:	f1 20 28 30 38 07 7e 01 30 07 46 01 9a 07 47 04     . (08.~.0.F...G.
     d9b:	f1 28 30 38 07 6c 04 f1 28 30 38 02 16 02 00 01     .(08.l..(08.....

00000dab <_ZL9dmpMemory>:
     dab:	fb 00 00 3e 00 0b 00 36 00 01 00 02 00 03 00 00     ...>...6........
     dbb:	00 65 00 54 ff ef 00 00 fa 80 00 0b 12 82 00 01     .e.T............
     dcb:	00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ddb:	00 28 00 00 ff ff 45 81 ff ff fa 72 00 00 00 00     .(....E....r....
     deb:	00 00 03 e8 00 00 00 01 00 01 7f ff ff fe 80 01     ................
     dfb:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e0b:	00 3e 03 30 40 00 00 00 02 ca e3 09 3e 80 00 00     .>.0@.......>...
     e1b:	20 00 00 00 00 00 00 00 40 00 00 00 60 00 00 00      .......@...`...
     e2b:	41 ff 00 00 00 00 0b 2a 00 00 16 55 00 00 21 82     A......*...U..!.
     e3b:	fd 87 26 50 fd 80 00 00 00 1f 00 00 00 05 80 00     ..&P............
     e4b:	00 00 00 00 00 01 00 00 00 02 00 00 00 03 00 00     ................
     e5b:	40 00 00 00 00 00 04 6f 00 02 65 32 00 00 5e c0     @......o..e2..^.
     e6b:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     e7b:	fb 8c 6f 5d fd 5d 08 d9 00 7c 73 3b 00 6c 12 cc     ..o].]...|s;.l..
     e8b:	32 00 13 9d 32 00 d0 d6 32 00 08 00 40 00 01 f4     2...2...2...@...
     e9b:	ff e6 80 79 02 00 00 00 00 00 d0 d6 00 00 27 10     ...y..........'.
     eab:	fb 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00     ....@...........
     ebb:	00 00 00 01 00 00 00 00 00 00 01 00 01 00 00 00     ................
     ecb:	00 00 fa 36 ff bc 30 8e 00 05 fb f0 ff d9 5b c8     ...6..0.......[.
     edb:	ff d0 9a be 00 00 10 a9 ff f4 1e b2 00 ce bb f7     ................
     eeb:	00 00 00 01 00 00 00 04 00 02 00 02 02 00 00 0c     ................
     efb:	ff c2 80 00 00 01 80 00 00 cf 80 00 40 00 00 00     ............@...
     f0b:	00 00 00 01 00 00 00 00 00 00 06 00 00 00 00 14     ................
	...
     f4f:	03 3f 68 b6 79 35 28 bc c6 7e d1 6c 80 00 00 00     .?h.y5(..~.l....
     f5f:	40 00 00 00 00 00 b2 6a 00 00 00 00 00 00 00 00     @......j........
     f6f:	00 00 00 00 00 00 3f f0 00 00 00 30 00 00 00 00     ......?....0....
	...
     f9b:	00 00 25 4d 00 2f 70 6d 00 00 05 ae 00 0c 02 d0     ..%M./pm........
     fab:	00 00 00 00 00 65 00 54 ff ef 00 00 00 00 00 00     .....e.T........
     fbb:	00 00 01 00 00 44 00 00 00 00 0c 00 00 00 01 00     .....D..........
     fcb:	00 00 00 00 00 65 00 00 00 54 00 00 ff ef 00 00     .....e...T......
	...
     feb:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     ffb:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
    100b:	00 00 00 01 00 00 00 02 00 00 00 00 00 00 00 00     ................
	...
    103b:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1067:	40 00 00 00 00 1b 00 00 00 00 00 00 00 00 00 00     @...............
	...
    10ab:	d8 dc ba a2 f1 de b2 b8 b4 a8 81 91 f7 4a 90 7f     .............J..
    10bb:	91 6a f3 f9 db a8 f9 b0 ba a0 80 f2 ce 81 f3 c2     .j..............
    10cb:	f1 c1 f2 c3 f3 cc a2 b2 80 f1 c6 d8 80 ba a7 df     ................
    10db:	df df f2 a7 c3 cb c5 b6 f0 87 a2 94 24 48 70 3c     ............$Hp<
    10eb:	95 40 68 34 58 9b 78 a2 f1 83 92 2d 55 7d d8 b1     .@h4X.x....-U}..
    10fb:	b4 b8 a1 d0 91 80 f2 70 f3 70 f2 7c 80 a8 f1 01     .......p.p.|....
    110b:	b0 98 87 d9 43 d8 86 c9 88 ba a1 f2 0e b8 97 80     ....C...........
    111b:	f1 a9 df df df aa df df df f2 aa c5 cd c7 a9 0c     ................
    112b:	c9 2c 97 97 97 97 f1 a9 89 26 46 66 b0 b4 ba 80     .,.......&Ff....
    113b:	ac de f2 ca f1 b2 8c 02 a9 b6 98 00 89 0e 16 1e     ................
    114b:	b8 a9 b4 99 2c 54 7c b0 8a a8 96 36 56 76 f1 b9     ....,T|....6Vv..
    115b:	af b4 b0 83 c0 b8 a8 97 11 b1 8f 98 b9 af f0 24     ...............$
    116b:	08 44 10 64 18 f1 a3 29 55 7d af 83 b5 93 af f0     .D.d...)U}......
    117b:	00 28 50 f1 a3 86 9f 61 a6 da de df d9 fa a3 86     .(P....a........
    118b:	96 db 31 a6 d9 f8 df ba a6 8f c2 c5 c7 b2 8c c1     ..1.............
    119b:	b8 a2 df df df a3 df df df d8 d8 f1 b8 a8 b2 86     ................
    11ab:	b4 98 0d 35 5d b8 aa 98 b0 87 2d 35 3d b2 b6 ba     ...5].....-5=...
    11bb:	af 8c 96 19 8f 9f a7 0e 16 1e b4 9a b8 aa 87 2c     ...............,
    11cb:	54 7c b9 a3 de df df a3 b1 80 f2 c4 cd c9 f1 b8     T|..............
    11db:	a9 b4 99 83 0d 35 5d 89 b9 a3 2d 55 7d b5 93 a3     .....5]...-U}...
    11eb:	0e 16 1e a9 2c 54 7c b8 b4 b0 f1 97 83 a8 11 84     ....,T|.........
    11fb:	a5 09 98 a3 83 f0 da 24 08 44 10 64 18 d8 f1 a5     .......$.D.d....
    120b:	29 55 7d a5 85 95 02 1a 2e 3a 56 5a 40 48 f9 f3     )U}......:VZ@H..
    121b:	a3 d9 f8 f0 98 83 24 08 44 10 64 18 97 82 a8 f1     ......$.D.d.....
    122b:	11 f0 98 a2 24 08 44 10 64 18 da f3 de d8 83 a5     ....$.D.d.......
    123b:	94 01 d9 a3 02 f1 a2 c3 c5 c7 d8 f1 84 92 a2 4d     ...............M
    124b:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
    125b:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 93 a3 4d     2.p].:.Xy.:.x..M
    126b:	da 2a d8 48 69 d9 2a d8 68 55 da 32 d8 50 71 d9     .*.Hi.*.hU.2.Pq.
    127b:	32 d8 70 5d da 3a d8 58 79 d9 3a d8 78 a8 8a 9a     2.p].:.Xy.:.x...
    128b:	f0 28 50 78 9e f3 88 18 f1 9f 1d 98 a8 d9 08 d8     .(Px............
    129b:	c8 9f 12 9e f3 15 a8 da 12 10 d8 f1 af c8 97 87     ................
    12ab:	34 b5 b9 94 a4 21 f3 d9 22 d8 f2 2d f3 d9 2a d8     4....!.."..-..*.
    12bb:	f2 35 f3 d9 32 d8 81 a4 60 60 61 d9 61 d8 6c 68     .5..2...``a.a.lh
    12cb:	69 d9 69 d8 74 70 71 d9 71 d8 b1 a3 84 19 3d 5d     i.i.tpq.q.....=]
    12db:	a3 83 1a 3e 5e 93 10 30 81 10 11 b8 b0 af 8f 94     ...>^..0........
    12eb:	f2 da 3e d8 b4 9a a8 87 29 da f8 d8 87 9a 35 da     ..>.....).....5.
    12fb:	f8 d8 87 9a 3d da f8 d8 b1 b9 a4 98 85 02 2e 56     ....=..........V
    130b:	a5 81 00 0c 14 a3 97 b0 8a f1 2d d9 28 d8 4d d9     ..........-.(.M.
    131b:	48 d8 6d d9 68 d8 b1 84 0d da 0e d8 a3 29 83 da     H.m.h........)..
    132b:	2c 0e d8 a3 84 49 83 da 2c 4c 0e d8 b8 b0 a8 8a     ,....I..,L......
    133b:	9a f5 20 aa da df d8 a8 40 aa d0 da de d8 a8 60     .. .....@......`
    134b:	aa da d0 df d8 f1 97 86 a8 31 9b 06 99 07 ab 97     .........1......
    135b:	28 88 9b f0 0c 20 14 40 b8 b0 b4 a8 8c 9c f0 04     (.... .@........
    136b:	28 51 79 1d 30 14 38 b2 82 ab d0 98 2c 50 50 78     (Qy.0.8.....,PPx
    137b:	78 9b f1 1a b0 f0 8a 9c a8 29 51 79 8b 29 51 79     x........)Qy.)Qy
    138b:	8a 24 70 59 8b 20 58 71 8a 44 69 38 8b 39 40 68     .$pY. Xq.Di8.9@h
    139b:	8a 64 48 31 8b 30 49 60 a5 88 20 09 71 58 44 68     .dH1.0I`.. .qXDh
    13ab:	11 39 64 49 30 19 f1 ac 00 2c 54 7c f0 8c a8 04     .9dI0....,T|....
    13bb:	28 50 78 f1 88 97 26 a8 59 98 ac 8c 02 26 46 66     (Px...&.Y....&Ff
    13cb:	f0 89 9c a8 29 51 79 24 70 59 44 69 38 64 48 31     ....)Qy$pYDi8dH1
    13db:	a9 88 09 20 59 70 ab 11 38 40 69 a8 19 31 48 60     ... Yp..8@i..1H`
    13eb:	8c a8 3c 41 5c 20 7c 00 f1 87 98 19 86 a8 6e 76     ..<A\ |.......nv
    13fb:	7e a9 99 88 2d 55 7d 9e b9 a3 8a 22 8a 6e 8a 56     ~...-U}....".n.V
    140b:	8a 5e 9f b1 83 06 26 46 66 0e 2e 4e 6e 9d b8 ad     .^....&Ff..Nn...
    141b:	00 2c 54 7c f2 b1 8c b4 99 b9 a3 2d 55 7d 81 91     .,T|.......-U}..
    142b:	ac 38 ad 3a b5 83 91 ac 2d d9 28 d8 4d d9 48 d8     .8.:....-.(.M.H.
    143b:	6d d9 68 d8 8c 9d ae 29 d9 04 ae d8 51 d9 04 ae     m.h....)....Q...
    144b:	d8 79 d9 04 d8 81 f3 9d ad 00 8d ae 19 81 ad d9     .y..............
    145b:	01 d8 f2 ae da 26 d8 8e 91 29 83 a7 d9 ad ad ad     .....&...)......
    146b:	ad f3 2a d8 d8 f1 b0 ac 89 91 3e 5e 76 f3 ac 2e     ..*.......>^v...
    147b:	2e f1 b1 8c 5a 9c ac 2c 28 28 28 9c ac 30 18 a8     ....Z..,(((..0..
    148b:	98 81 28 34 3c 97 24 a7 28 34 3c 9c 24 f2 b0 89     ..(4<.$.(4<.$...
    149b:	ac 91 2c 4c 6c 8a 9b 2d d9 d8 d8 51 d9 d8 d8 79     ..,Ll..-...Q...y
    14ab:	d9 d8 d8 f1 9e 88 a3 31 da d8 d8 91 2d d9 28 d8     .......1....-.(.
    14bb:	4d d9 48 d8 6d d9 68 d8 b1 83 93 35 3d 80 25 da     M.H.m.h....5=.%.
    14cb:	d8 d8 85 69 da d8 d8 b4 93 81 a3 28 34 3c f3 ab     ...i.......(4<..
    14db:	8b f8 a3 91 b6 09 b4 d9 ab de fa b0 87 9c b9 a3     ................
    14eb:	dd f1 a3 a3 a3 a3 95 f1 a3 a3 a3 9d f1 a3 a3 a3     ................
    14fb:	a3 f2 a3 b4 90 80 f2 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    150b:	a3 b2 a3 a3 a3 a3 a3 a3 b0 87 b5 99 f1 a3 a3 a3     ................
    151b:	98 f1 a3 a3 a3 a3 97 a3 a3 a3 a3 f3 9b a3 a3 dc     ................
    152b:	b9 a7 f1 26 26 26 d8 d8 ff                          ...&&&...

00001534 <__ctors_start>:
    1534:	70 0c       	add	r7, r0
    1536:	e0 0c       	add	r14, r0
    1538:	4b 1d       	adc	r20, r11
    153a:	37 25       	eor	r19, r7

0000153c <__ctors_end>:
    153c:	11 24       	eor	r1, r1
    153e:	1f be       	out	0x3f, r1	; 63
    1540:	cf ef       	ldi	r28, 0xFF	; 255
    1542:	d8 e0       	ldi	r29, 0x08	; 8
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	cd bf       	out	0x3d, r28	; 61

00001548 <__do_copy_data>:
    1548:	11 e0       	ldi	r17, 0x01	; 1
    154a:	a0 e0       	ldi	r26, 0x00	; 0
    154c:	b1 e0       	ldi	r27, 0x01	; 1
    154e:	e6 ef       	ldi	r30, 0xF6	; 246
    1550:	f7 e5       	ldi	r31, 0x57	; 87
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <__do_copy_data+0x10>
    1554:	05 90       	lpm	r0, Z+
    1556:	0d 92       	st	X+, r0
    1558:	a0 37       	cpi	r26, 0x70	; 112
    155a:	b1 07       	cpc	r27, r17
    155c:	d9 f7       	brne	.-10     	; 0x1554 <__do_copy_data+0xc>

0000155e <__do_clear_bss>:
    155e:	23 e0       	ldi	r18, 0x03	; 3
    1560:	a0 e7       	ldi	r26, 0x70	; 112
    1562:	b1 e0       	ldi	r27, 0x01	; 1
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <.do_clear_bss_start>

00001566 <.do_clear_bss_loop>:
    1566:	1d 92       	st	X+, r1

00001568 <.do_clear_bss_start>:
    1568:	ab 3c       	cpi	r26, 0xCB	; 203
    156a:	b2 07       	cpc	r27, r18
    156c:	e1 f7       	brne	.-8      	; 0x1566 <.do_clear_bss_loop>

0000156e <__do_global_ctors>:
    156e:	1a e0       	ldi	r17, 0x0A	; 10
    1570:	ce e9       	ldi	r28, 0x9E	; 158
    1572:	da e0       	ldi	r29, 0x0A	; 10
    1574:	04 c0       	rjmp	.+8      	; 0x157e <__do_global_ctors+0x10>
    1576:	21 97       	sbiw	r28, 0x01	; 1
    1578:	fe 01       	movw	r30, r28
    157a:	0e 94 af 29 	call	0x535e	; 0x535e <__tablejump2__>
    157e:	ca 39       	cpi	r28, 0x9A	; 154
    1580:	d1 07       	cpc	r29, r17
    1582:	c9 f7       	brne	.-14     	; 0x1576 <__do_global_ctors+0x8>
    1584:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <main>
    1588:	0c 94 f9 2b 	jmp	0x57f2	; 0x57f2 <_exit>

0000158c <__bad_interrupt>:
    158c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001590 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1590:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1592:	91 8d       	ldd	r25, Z+25	; 0x19
    1594:	22 8d       	ldd	r18, Z+26	; 0x1a
    1596:	89 2f       	mov	r24, r25
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	80 5c       	subi	r24, 0xC0	; 192
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	82 1b       	sub	r24, r18
    15a0:	91 09       	sbc	r25, r1
}
    15a2:	8f 73       	andi	r24, 0x3F	; 63
    15a4:	99 27       	eor	r25, r25
    15a6:	08 95       	ret

000015a8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    15a8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    15aa:	91 8d       	ldd	r25, Z+25	; 0x19
    15ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    15ae:	98 17       	cp	r25, r24
    15b0:	31 f0       	breq	.+12     	; 0x15be <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    15b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    15b4:	e8 0f       	add	r30, r24
    15b6:	f1 1d       	adc	r31, r1
    15b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    15be:	8f ef       	ldi	r24, 0xFF	; 255
    15c0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    15c2:	08 95       	ret

000015c4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    15c4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    15c6:	91 8d       	ldd	r25, Z+25	; 0x19
    15c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    15ca:	98 17       	cp	r25, r24
    15cc:	61 f0       	breq	.+24     	; 0x15e6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    15ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    15d0:	df 01       	movw	r26, r30
    15d2:	a8 0f       	add	r26, r24
    15d4:	b1 1d       	adc	r27, r1
    15d6:	5d 96       	adiw	r26, 0x1d	; 29
    15d8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    15da:	92 8d       	ldd	r25, Z+26	; 0x1a
    15dc:	9f 5f       	subi	r25, 0xFF	; 255
    15de:	9f 73       	andi	r25, 0x3F	; 63
    15e0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    15ea:	08 95       	ret

000015ec <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    15ec:	86 e6       	ldi	r24, 0x66	; 102
    15ee:	9c e0       	ldi	r25, 0x0C	; 12
    15f0:	89 2b       	or	r24, r25
    15f2:	49 f0       	breq	.+18     	; 0x1606 <_Z14serialEventRunv+0x1a>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	89 2b       	or	r24, r25
    15fa:	29 f0       	breq	.+10     	; 0x1606 <_Z14serialEventRunv+0x1a>
    15fc:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_Z17Serial0_availablev>
    1600:	81 11       	cpse	r24, r1
    1602:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1606:	08 95       	ret

00001608 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1608:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    160a:	84 8d       	ldd	r24, Z+28	; 0x1c
    160c:	df 01       	movw	r26, r30
    160e:	a8 0f       	add	r26, r24
    1610:	b1 1d       	adc	r27, r1
    1612:	a3 5a       	subi	r26, 0xA3	; 163
    1614:	bf 4f       	sbci	r27, 0xFF	; 255
    1616:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1618:	24 8d       	ldd	r18, Z+28	; 0x1c
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	2f 5f       	subi	r18, 0xFF	; 255
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	2f 73       	andi	r18, 0x3F	; 63
    1622:	30 78       	andi	r19, 0x80	; 128
    1624:	33 23       	and	r19, r19
    1626:	34 f4       	brge	.+12     	; 0x1634 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1628:	21 50       	subi	r18, 0x01	; 1
    162a:	31 09       	sbc	r19, r1
    162c:	20 6c       	ori	r18, 0xC0	; 192
    162e:	3f 6f       	ori	r19, 0xFF	; 255
    1630:	2f 5f       	subi	r18, 0xFF	; 255
    1632:	3f 4f       	sbci	r19, 0xFF	; 255
    1634:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    1636:	a6 89       	ldd	r26, Z+22	; 0x16
    1638:	b7 89       	ldd	r27, Z+23	; 0x17
    163a:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    163c:	a0 89       	ldd	r26, Z+16	; 0x10
    163e:	b1 89       	ldd	r27, Z+17	; 0x11
    1640:	8c 91       	ld	r24, X
    1642:	80 64       	ori	r24, 0x40	; 64
    1644:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1646:	93 8d       	ldd	r25, Z+27	; 0x1b
    1648:	84 8d       	ldd	r24, Z+28	; 0x1c
    164a:	98 13       	cpse	r25, r24
    164c:	06 c0       	rjmp	.+12     	; 0x165a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    164e:	02 88       	ldd	r0, Z+18	; 0x12
    1650:	f3 89       	ldd	r31, Z+19	; 0x13
    1652:	e0 2d       	mov	r30, r0
    1654:	80 81       	ld	r24, Z
    1656:	8f 7d       	andi	r24, 0xDF	; 223
    1658:	80 83       	st	Z, r24
    165a:	08 95       	ret

0000165c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1662:	88 8d       	ldd	r24, Y+24	; 0x18
    1664:	81 11       	cpse	r24, r1
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <_ZN14HardwareSerial5flushEv+0x2a>
    1668:	18 c0       	rjmp	.+48     	; 0x169a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	07 fc       	sbrc	r0, 7
    166e:	0d c0       	rjmp	.+26     	; 0x168a <_ZN14HardwareSerial5flushEv+0x2e>
    1670:	90 81       	ld	r25, Z
    1672:	95 ff       	sbrs	r25, 5
    1674:	0a c0       	rjmp	.+20     	; 0x168a <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1676:	a8 89       	ldd	r26, Y+16	; 0x10
    1678:	b9 89       	ldd	r27, Y+17	; 0x11
    167a:	8c 91       	ld	r24, X
    167c:	85 ff       	sbrs	r24, 5
    167e:	05 c0       	rjmp	.+10     	; 0x168a <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
    1680:	ce 01       	movw	r24, r28
    1682:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1686:	ea 89       	ldd	r30, Y+18	; 0x12
    1688:	fb 89       	ldd	r31, Y+19	; 0x13
    168a:	90 81       	ld	r25, Z
    168c:	95 fd       	sbrc	r25, 5
    168e:	ed cf       	rjmp	.-38     	; 0x166a <_ZN14HardwareSerial5flushEv+0xe>
    1690:	a8 89       	ldd	r26, Y+16	; 0x10
    1692:	b9 89       	ldd	r27, Y+17	; 0x11
    1694:	8c 91       	ld	r24, X
    1696:	86 ff       	sbrs	r24, 6
    1698:	e8 cf       	rjmp	.-48     	; 0x166a <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	fc 01       	movw	r30, r24
  _written = true;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    16ae:	93 8d       	ldd	r25, Z+27	; 0x1b
    16b0:	84 8d       	ldd	r24, Z+28	; 0x1c
    16b2:	98 13       	cpse	r25, r24
    16b4:	22 c0       	rjmp	.+68     	; 0x16fa <_ZN14HardwareSerial5writeEh+0x5a>
    16b6:	a0 89       	ldd	r26, Z+16	; 0x10
    16b8:	b1 89       	ldd	r27, Z+17	; 0x11
    16ba:	8c 91       	ld	r24, X
    16bc:	85 fd       	sbrc	r24, 5
    16be:	2f c0       	rjmp	.+94     	; 0x171e <_ZN14HardwareSerial5writeEh+0x7e>
    16c0:	1c c0       	rjmp	.+56     	; 0x16fa <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	07 fc       	sbrc	r0, 7
    16c6:	08 c0       	rjmp	.+16     	; 0x16d8 <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    16c8:	e8 89       	ldd	r30, Y+16	; 0x10
    16ca:	f9 89       	ldd	r31, Y+17	; 0x11
    16cc:	80 81       	ld	r24, Z
    16ce:	85 ff       	sbrs	r24, 5
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
    16d2:	ce 01       	movw	r24, r28
    16d4:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    16d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16da:	09 17       	cp	r16, r25
    16dc:	91 f3       	breq	.-28     	; 0x16c2 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    16de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e0:	fe 01       	movw	r30, r28
    16e2:	e8 0f       	add	r30, r24
    16e4:	f1 1d       	adc	r31, r1
    16e6:	e3 5a       	subi	r30, 0xA3	; 163
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    16ec:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    16ee:	ea 89       	ldd	r30, Y+18	; 0x12
    16f0:	fb 89       	ldd	r31, Y+19	; 0x13
    16f2:	80 81       	ld	r24, Z
    16f4:	80 62       	ori	r24, 0x20	; 32
    16f6:	80 83       	st	Z, r24
  
  return 1;
    16f8:	1b c0       	rjmp	.+54     	; 0x1730 <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    16fa:	23 8d       	ldd	r18, Z+27	; 0x1b
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	2f 5f       	subi	r18, 0xFF	; 255
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
    1702:	2f 73       	andi	r18, 0x3F	; 63
    1704:	30 78       	andi	r19, 0x80	; 128
    1706:	33 23       	and	r19, r19
    1708:	34 f4       	brge	.+12     	; 0x1716 <_ZN14HardwareSerial5writeEh+0x76>
    170a:	21 50       	subi	r18, 0x01	; 1
    170c:	31 09       	sbc	r19, r1
    170e:	20 6c       	ori	r18, 0xC0	; 192
    1710:	3f 6f       	ori	r19, 0xFF	; 255
    1712:	2f 5f       	subi	r18, 0xFF	; 255
    1714:	3f 4f       	sbci	r19, 0xFF	; 255
    1716:	16 2f       	mov	r17, r22
    1718:	ef 01       	movw	r28, r30
    171a:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    171c:	dd cf       	rjmp	.-70     	; 0x16d8 <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    171e:	a6 89       	ldd	r26, Z+22	; 0x16
    1720:	b7 89       	ldd	r27, Z+23	; 0x17
    1722:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    1724:	00 88       	ldd	r0, Z+16	; 0x10
    1726:	f1 89       	ldd	r31, Z+17	; 0x11
    1728:	e0 2d       	mov	r30, r0
    172a:	80 81       	ld	r24, Z
    172c:	80 64       	ori	r24, 0x40	; 64
    172e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	08 95       	ret

0000173e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ec 01       	movw	r28, r24
    1752:	6a 01       	movw	r12, r20
    1754:	7b 01       	movw	r14, r22
    1756:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1758:	e8 89       	ldd	r30, Y+16	; 0x10
    175a:	f9 89       	ldd	r31, Y+17	; 0x11
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1760:	41 15       	cp	r20, r1
    1762:	51 4e       	sbci	r21, 0xE1	; 225
    1764:	61 05       	cpc	r22, r1
    1766:	71 05       	cpc	r23, r1
    1768:	b1 f0       	breq	.+44     	; 0x1796 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	79 e0       	ldi	r23, 0x09	; 9
    176e:	8d e3       	ldi	r24, 0x3D	; 61
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a7 01       	movw	r20, r14
    1774:	96 01       	movw	r18, r12
    1776:	0e 94 8d 29 	call	0x531a	; 0x531a <__udivmodsi4>
    177a:	89 01       	movw	r16, r18
    177c:	9a 01       	movw	r18, r20
    177e:	01 50       	subi	r16, 0x01	; 1
    1780:	11 09       	sbc	r17, r1
    1782:	21 09       	sbc	r18, r1
    1784:	31 09       	sbc	r19, r1
    1786:	36 95       	lsr	r19
    1788:	27 95       	ror	r18
    178a:	17 95       	ror	r17
    178c:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    178e:	01 15       	cp	r16, r1
    1790:	80 e1       	ldi	r24, 0x10	; 16
    1792:	18 07       	cpc	r17, r24
    1794:	a8 f0       	brcs	.+42     	; 0x17c0 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    1796:	e8 89       	ldd	r30, Y+16	; 0x10
    1798:	f9 89       	ldd	r31, Y+17	; 0x11
    179a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    179c:	60 e8       	ldi	r22, 0x80	; 128
    179e:	74 e8       	ldi	r23, 0x84	; 132
    17a0:	8e e1       	ldi	r24, 0x1E	; 30
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	a7 01       	movw	r20, r14
    17a6:	96 01       	movw	r18, r12
    17a8:	0e 94 8d 29 	call	0x531a	; 0x531a <__udivmodsi4>
    17ac:	da 01       	movw	r26, r20
    17ae:	c9 01       	movw	r24, r18
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	a1 09       	sbc	r26, r1
    17b4:	b1 09       	sbc	r27, r1
    17b6:	b6 95       	lsr	r27
    17b8:	a7 95       	ror	r26
    17ba:	97 95       	ror	r25
    17bc:	87 95       	ror	r24
    17be:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    17c0:	ec 85       	ldd	r30, Y+12	; 0x0c
    17c2:	fd 85       	ldd	r31, Y+13	; 0x0d
    17c4:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    17c6:	ee 85       	ldd	r30, Y+14	; 0x0e
    17c8:	ff 85       	ldd	r31, Y+15	; 0x0f
    17ca:	00 83       	st	Z, r16

  _written = false;
    17cc:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    17ce:	ec 89       	ldd	r30, Y+20	; 0x14
    17d0:	fd 89       	ldd	r31, Y+21	; 0x15
    17d2:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    17d4:	ea 89       	ldd	r30, Y+18	; 0x12
    17d6:	fb 89       	ldd	r31, Y+19	; 0x13
    17d8:	80 81       	ld	r24, Z
    17da:	80 61       	ori	r24, 0x10	; 16
    17dc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    17de:	ea 89       	ldd	r30, Y+18	; 0x12
    17e0:	fb 89       	ldd	r31, Y+19	; 0x13
    17e2:	80 81       	ld	r24, Z
    17e4:	88 60       	ori	r24, 0x08	; 8
    17e6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    17e8:	ea 89       	ldd	r30, Y+18	; 0x12
    17ea:	fb 89       	ldd	r31, Y+19	; 0x13
    17ec:	80 81       	ld	r24, Z
    17ee:	80 68       	ori	r24, 0x80	; 128
    17f0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    17f2:	ea 89       	ldd	r30, Y+18	; 0x12
    17f4:	fb 89       	ldd	r31, Y+19	; 0x13
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 7d       	andi	r24, 0xDF	; 223
    17fa:	80 83       	st	Z, r24
}
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	df 90       	pop	r13
    180a:	cf 90       	pop	r12
    180c:	bf 90       	pop	r11
    180e:	08 95       	ret

00001810 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	2f 93       	push	r18
    181c:	8f 93       	push	r24
    181e:	9f 93       	push	r25
    1820:	af 93       	push	r26
    1822:	bf 93       	push	r27
    1824:	ef 93       	push	r30
    1826:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1828:	e0 91 80 01 	lds	r30, 0x0180
    182c:	f0 91 81 01 	lds	r31, 0x0181
    1830:	80 81       	ld	r24, Z
    1832:	82 fd       	sbrc	r24, 2
    1834:	14 c0       	rjmp	.+40     	; 0x185e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1836:	e0 e7       	ldi	r30, 0x70	; 112
    1838:	f1 e0       	ldi	r31, 0x01	; 1
    183a:	a6 89       	ldd	r26, Z+22	; 0x16
    183c:	b7 89       	ldd	r27, Z+23	; 0x17
    183e:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1840:	81 8d       	ldd	r24, Z+25	; 0x19
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1846:	92 8d       	ldd	r25, Z+26	; 0x1a
    1848:	89 17       	cp	r24, r25
    184a:	71 f0       	breq	.+28     	; 0x1868 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    184c:	df 01       	movw	r26, r30
    184e:	e1 8d       	ldd	r30, Z+25	; 0x19
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	e0 59       	subi	r30, 0x90	; 144
    1854:	fe 4f       	sbci	r31, 0xFE	; 254
    1856:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    1858:	59 96       	adiw	r26, 0x19	; 25
    185a:	8c 93       	st	X, r24
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    185e:	e0 91 86 01 	lds	r30, 0x0186
    1862:	f0 91 87 01 	lds	r31, 0x0187
    1866:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	2f 91       	pop	r18
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1880:	1f 92       	push	r1
    1882:	0f 92       	push	r0
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	0f 92       	push	r0
    1888:	11 24       	eor	r1, r1
    188a:	2f 93       	push	r18
    188c:	3f 93       	push	r19
    188e:	4f 93       	push	r20
    1890:	5f 93       	push	r21
    1892:	6f 93       	push	r22
    1894:	7f 93       	push	r23
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	af 93       	push	r26
    189c:	bf 93       	push	r27
    189e:	ef 93       	push	r30
    18a0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    18a2:	80 e7       	ldi	r24, 0x70	; 112
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    18aa:	ff 91       	pop	r31
    18ac:	ef 91       	pop	r30
    18ae:	bf 91       	pop	r27
    18b0:	af 91       	pop	r26
    18b2:	9f 91       	pop	r25
    18b4:	8f 91       	pop	r24
    18b6:	7f 91       	pop	r23
    18b8:	6f 91       	pop	r22
    18ba:	5f 91       	pop	r21
    18bc:	4f 91       	pop	r20
    18be:	3f 91       	pop	r19
    18c0:	2f 91       	pop	r18
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	0f 90       	pop	r0
    18c8:	1f 90       	pop	r1
    18ca:	18 95       	reti

000018cc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    18cc:	80 e7       	ldi	r24, 0x70	; 112
    18ce:	91 e0       	ldi	r25, 0x01	; 1
    18d0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_ZN14HardwareSerial9availableEv>
    18d4:	21 e0       	ldi	r18, 0x01	; 1
    18d6:	89 2b       	or	r24, r25
    18d8:	09 f4       	brne	.+2      	; 0x18dc <_Z17Serial0_availablev+0x10>
    18da:	20 e0       	ldi	r18, 0x00	; 0
}
    18dc:	82 2f       	mov	r24, r18
    18de:	08 95       	ret

000018e0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    18e0:	e0 e7       	ldi	r30, 0x70	; 112
    18e2:	f1 e0       	ldi	r31, 0x01	; 1
    18e4:	13 82       	std	Z+3, r1	; 0x03
    18e6:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    18e8:	88 ee       	ldi	r24, 0xE8	; 232
    18ea:	93 e0       	ldi	r25, 0x03	; 3
    18ec:	a0 e0       	ldi	r26, 0x00	; 0
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	84 83       	std	Z+4, r24	; 0x04
    18f2:	95 83       	std	Z+5, r25	; 0x05
    18f4:	a6 83       	std	Z+6, r26	; 0x06
    18f6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    18f8:	81 e1       	ldi	r24, 0x11	; 17
    18fa:	91 e0       	ldi	r25, 0x01	; 1
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	80 83       	st	Z, r24
    1900:	85 ec       	ldi	r24, 0xC5	; 197
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	95 87       	std	Z+13, r25	; 0x0d
    1906:	84 87       	std	Z+12, r24	; 0x0c
    1908:	84 ec       	ldi	r24, 0xC4	; 196
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	97 87       	std	Z+15, r25	; 0x0f
    190e:	86 87       	std	Z+14, r24	; 0x0e
    1910:	80 ec       	ldi	r24, 0xC0	; 192
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	91 8b       	std	Z+17, r25	; 0x11
    1916:	80 8b       	std	Z+16, r24	; 0x10
    1918:	81 ec       	ldi	r24, 0xC1	; 193
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	93 8b       	std	Z+19, r25	; 0x13
    191e:	82 8b       	std	Z+18, r24	; 0x12
    1920:	82 ec       	ldi	r24, 0xC2	; 194
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	95 8b       	std	Z+21, r25	; 0x15
    1926:	84 8b       	std	Z+20, r24	; 0x14
    1928:	86 ec       	ldi	r24, 0xC6	; 198
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	97 8b       	std	Z+23, r25	; 0x17
    192e:	86 8b       	std	Z+22, r24	; 0x16
    1930:	11 8e       	std	Z+25, r1	; 0x19
    1932:	12 8e       	std	Z+26, r1	; 0x1a
    1934:	13 8e       	std	Z+27, r1	; 0x1b
    1936:	14 8e       	std	Z+28, r1	; 0x1c
    1938:	08 95       	ret

0000193a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    193a:	08 95       	ret

0000193c <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    193c:	8f 92       	push	r8
    193e:	9f 92       	push	r9
    1940:	af 92       	push	r10
    1942:	bf 92       	push	r11
    1944:	cf 92       	push	r12
    1946:	df 92       	push	r13
    1948:	ef 92       	push	r14
    194a:	ff 92       	push	r15
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	5c 01       	movw	r10, r24
    1956:	7b 01       	movw	r14, r22
    1958:	4c 01       	movw	r8, r24
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	88 0e       	add	r8, r24
    195e:	91 1c       	adc	r9, r1
    1960:	65 01       	movw	r12, r10
    1962:	e5 e0       	ldi	r30, 0x05	; 5
    1964:	ce 0e       	add	r12, r30
    1966:	d1 1c       	adc	r13, r1
    size_t n = 0;
    1968:	00 e0       	ldi	r16, 0x00	; 0
    196a:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    196c:	f4 01       	movw	r30, r8
    196e:	61 91       	ld	r22, Z+
    1970:	4f 01       	movw	r8, r30
    1972:	4a e0       	ldi	r20, 0x0A	; 10
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	c7 01       	movw	r24, r14
    1978:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN5Print5printEhi>
    197c:	ec 01       	movw	r28, r24
        n += p.print('.');
    197e:	6e e2       	ldi	r22, 0x2E	; 46
    1980:	c7 01       	movw	r24, r14
    1982:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_ZN5Print5printEc>
    1986:	8c 0f       	add	r24, r28
    1988:	9d 1f       	adc	r25, r29
    198a:	08 0f       	add	r16, r24
    198c:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    198e:	8c 14       	cp	r8, r12
    1990:	9d 04       	cpc	r9, r13
    1992:	61 f7       	brne	.-40     	; 0x196c <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    1994:	4a e0       	ldi	r20, 0x0A	; 10
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	f5 01       	movw	r30, r10
    199a:	65 81       	ldd	r22, Z+5	; 0x05
    199c:	c7 01       	movw	r24, r14
    199e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN5Print5printEhi>
    return n;
}
    19a2:	80 0f       	add	r24, r16
    19a4:	91 1f       	adc	r25, r17
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	bf 90       	pop	r11
    19b8:	af 90       	pop	r10
    19ba:	9f 90       	pop	r9
    19bc:	8f 90       	pop	r8
    19be:	08 95       	ret

000019c0 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    19c0:	ed e0       	ldi	r30, 0x0D	; 13
    19c2:	f2 e0       	ldi	r31, 0x02	; 2
    19c4:	81 e2       	ldi	r24, 0x21	; 33
    19c6:	91 e0       	ldi	r25, 0x01	; 1
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    19cc:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    19ce:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    19d0:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    19d2:	15 82       	std	Z+5, r1	; 0x05
    19d4:	08 95       	ret

000019d6 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    19d6:	08 95       	ret

000019d8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    19d8:	0e 94 80 11 	call	0x2300	; 0x2300 <init>

	initVariant();
    19dc:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    19e0:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    19e4:	c6 ef       	ldi	r28, 0xF6	; 246
    19e6:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    19e8:	0e 94 33 24 	call	0x4866	; 0x4866 <loop>
		if (serialEventRun) serialEventRun();
    19ec:	20 97       	sbiw	r28, 0x00	; 0
    19ee:	e1 f3       	breq	.-8      	; 0x19e8 <main+0x10>
    19f0:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_Z14serialEventRunv>
    19f4:	f9 cf       	rjmp	.-14     	; 0x19e8 <main+0x10>

000019f6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    19f6:	cf 92       	push	r12
    19f8:	df 92       	push	r13
    19fa:	ef 92       	push	r14
    19fc:	ff 92       	push	r15
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
    1a06:	41 15       	cp	r20, r1
    1a08:	51 05       	cpc	r21, r1
    1a0a:	c1 f0       	breq	.+48     	; 0x1a3c <_ZN5Print5writeEPKhj+0x46>
    1a0c:	6a 01       	movw	r12, r20
    1a0e:	8c 01       	movw	r16, r24
    1a10:	e6 2e       	mov	r14, r22
    1a12:	f7 2e       	mov	r15, r23
    1a14:	c0 e0       	ldi	r28, 0x00	; 0
    1a16:	d0 e0       	ldi	r29, 0x00	; 0
    if (write(*buffer++)) n++;
    1a18:	d7 01       	movw	r26, r14
    1a1a:	6d 91       	ld	r22, X+
    1a1c:	7d 01       	movw	r14, r26
    1a1e:	d8 01       	movw	r26, r16
    1a20:	ed 91       	ld	r30, X+
    1a22:	fc 91       	ld	r31, X
    1a24:	01 90       	ld	r0, Z+
    1a26:	f0 81       	ld	r31, Z
    1a28:	e0 2d       	mov	r30, r0
    1a2a:	c8 01       	movw	r24, r16
    1a2c:	09 95       	icall
    1a2e:	89 2b       	or	r24, r25
    1a30:	39 f0       	breq	.+14     	; 0x1a40 <_ZN5Print5writeEPKhj+0x4a>
    1a32:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1a34:	cc 16       	cp	r12, r28
    1a36:	dd 06       	cpc	r13, r29
    1a38:	79 f7       	brne	.-34     	; 0x1a18 <_ZN5Print5writeEPKhj+0x22>
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <_ZN5Print5writeEPKhj+0x4a>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    1a3c:	c0 e0       	ldi	r28, 0x00	; 0
    1a3e:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
    1a40:	ce 01       	movw	r24, r28
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	ef 90       	pop	r14
    1a4e:	df 90       	pop	r13
    1a50:	cf 90       	pop	r12
    1a52:	08 95       	ret

00001a54 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	fb 01       	movw	r30, r22
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    1a62:	64 91       	lpm	r22, Z
    if (c == 0) break;
    1a64:	66 23       	and	r22, r22
    1a66:	b1 f0       	breq	.+44     	; 0x1a94 <_ZN5Print5printEPK19__FlashStringHelper+0x40>
    1a68:	7f 01       	movw	r14, r30
    1a6a:	8c 01       	movw	r16, r24
    1a6c:	c0 e0       	ldi	r28, 0x00	; 0
    1a6e:	d0 e0       	ldi	r29, 0x00	; 0
    if (write(c)) n++;
    1a70:	d8 01       	movw	r26, r16
    1a72:	ed 91       	ld	r30, X+
    1a74:	fc 91       	ld	r31, X
    1a76:	01 90       	ld	r0, Z+
    1a78:	f0 81       	ld	r31, Z
    1a7a:	e0 2d       	mov	r30, r0
    1a7c:	c8 01       	movw	r24, r16
    1a7e:	09 95       	icall
    1a80:	89 2b       	or	r24, r25
    1a82:	51 f0       	breq	.+20     	; 0x1a98 <_ZN5Print5printEPK19__FlashStringHelper+0x44>
    1a84:	21 96       	adiw	r28, 0x01	; 1
    1a86:	f7 01       	movw	r30, r14
    1a88:	ec 0f       	add	r30, r28
    1a8a:	fd 1f       	adc	r31, r29
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    1a8c:	64 91       	lpm	r22, Z
    if (c == 0) break;
    1a8e:	61 11       	cpse	r22, r1
    1a90:	ef cf       	rjmp	.-34     	; 0x1a70 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <_ZN5Print5printEPK19__FlashStringHelper+0x44>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    1a94:	c0 e0       	ldi	r28, 0x00	; 0
    1a96:	d0 e0       	ldi	r29, 0x00	; 0
    if (c == 0) break;
    if (write(c)) n++;
    else break;
  }
  return n;
}
    1a98:	ce 01       	movw	r24, r28
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	ff 90       	pop	r15
    1aa4:	ef 90       	pop	r14
    1aa6:	08 95       	ret

00001aa8 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1aa8:	61 15       	cp	r22, r1
    1aaa:	71 05       	cpc	r23, r1
    1aac:	81 f0       	breq	.+32     	; 0x1ace <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    1aae:	fb 01       	movw	r30, r22
    1ab0:	01 90       	ld	r0, Z+
    1ab2:	00 20       	and	r0, r0
    1ab4:	e9 f7       	brne	.-6      	; 0x1ab0 <_ZN5Print5printEPKc+0x8>
    1ab6:	31 97       	sbiw	r30, 0x01	; 1
    1ab8:	af 01       	movw	r20, r30
    1aba:	46 1b       	sub	r20, r22
    1abc:	57 0b       	sbc	r21, r23
    1abe:	dc 01       	movw	r26, r24
    1ac0:	ed 91       	ld	r30, X+
    1ac2:	fc 91       	ld	r31, X
    1ac4:	02 80       	ldd	r0, Z+2	; 0x02
    1ac6:	f3 81       	ldd	r31, Z+3	; 0x03
    1ac8:	e0 2d       	mov	r30, r0
    1aca:	09 95       	icall
    1acc:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
    1ad2:	08 95       	ret

00001ad4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	ed 91       	ld	r30, X+
    1ad8:	fc 91       	ld	r31, X
    1ada:	01 90       	ld	r0, Z+
    1adc:	f0 81       	ld	r31, Z
    1ade:	e0 2d       	mov	r30, r0
    1ae0:	09 95       	icall
}
    1ae2:	08 95       	ret

00001ae4 <_ZN5Print7printlnEv>:
      return write((const uint8_t *)str, strlen(str));
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	ed 91       	ld	r30, X+
    1ae8:	fc 91       	ld	r31, X
    1aea:	02 80       	ldd	r0, Z+2	; 0x02
    1aec:	f3 81       	ldd	r31, Z+3	; 0x03
    1aee:	e0 2d       	mov	r30, r0
    1af0:	42 e0       	ldi	r20, 0x02	; 2
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	63 e2       	ldi	r22, 0x23	; 35
    1af6:	71 e0       	ldi	r23, 0x01	; 1
    1af8:	09 95       	icall
}

size_t Print::println(void)
{
  return write("\r\n");
}
    1afa:	08 95       	ret

00001afc <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    1b06:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
    1b0a:	8c 01       	movw	r16, r24
  n += println();
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN5Print7printlnEv>
  return n;
}
    1b12:	80 0f       	add	r24, r16
    1b14:	91 1f       	adc	r25, r17
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	ec 01       	movw	r28, r24
  size_t n = print(c);
    1b2a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN5Print5printEPKc>
    1b2e:	8c 01       	movw	r16, r24
  n += println();
    1b30:	ce 01       	movw	r24, r28
    1b32:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN5Print7printlnEv>
  return n;
}
    1b36:	80 0f       	add	r24, r16
    1b38:	91 1f       	adc	r25, r17
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1b44:	4f 92       	push	r4
    1b46:	5f 92       	push	r5
    1b48:	6f 92       	push	r6
    1b4a:	7f 92       	push	r7
    1b4c:	9f 92       	push	r9
    1b4e:	af 92       	push	r10
    1b50:	bf 92       	push	r11
    1b52:	cf 92       	push	r12
    1b54:	df 92       	push	r13
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	a1 97       	sbiw	r28, 0x21	; 33
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	5c 01       	movw	r10, r24
    1b74:	6a 01       	movw	r12, r20
    1b76:	7b 01       	movw	r14, r22
    1b78:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1b7a:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	82 17       	cp	r24, r18
    1b80:	20 f0       	brcs	.+8      	; 0x1b8a <_ZN5Print11printNumberEmh+0x46>
    1b82:	0f 2e       	mov	r0, r31
    1b84:	fa e0       	ldi	r31, 0x0A	; 10
    1b86:	9f 2e       	mov	r9, r31
    1b88:	f0 2d       	mov	r31, r0
    1b8a:	8e 01       	movw	r16, r28
    1b8c:	0f 5d       	subi	r16, 0xDF	; 223
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    1b90:	49 2c       	mov	r4, r9
    1b92:	51 2c       	mov	r5, r1
    1b94:	61 2c       	mov	r6, r1
    1b96:	71 2c       	mov	r7, r1
    1b98:	c7 01       	movw	r24, r14
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	a3 01       	movw	r20, r6
    1b9e:	92 01       	movw	r18, r4
    1ba0:	0e 94 8d 29 	call	0x531a	; 0x531a <__udivmodsi4>
    char c = m - base * n;
    1ba4:	8c 2d       	mov	r24, r12
    1ba6:	92 9e       	mul	r9, r18
    1ba8:	80 19       	sub	r24, r0
    1baa:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1bac:	01 50       	subi	r16, 0x01	; 1
    1bae:	11 09       	sbc	r17, r1
    1bb0:	8a 30       	cpi	r24, 0x0A	; 10
    1bb2:	10 f4       	brcc	.+4      	; 0x1bb8 <_ZN5Print11printNumberEmh+0x74>
    1bb4:	80 5d       	subi	r24, 0xD0	; 208
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <_ZN5Print11printNumberEmh+0x76>
    1bb8:	89 5c       	subi	r24, 0xC9	; 201
    1bba:	d8 01       	movw	r26, r16
    1bbc:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    1bbe:	c2 2e       	mov	r12, r18
    1bc0:	d3 2e       	mov	r13, r19
    1bc2:	e4 2e       	mov	r14, r20
    1bc4:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1bc6:	c1 14       	cp	r12, r1
    1bc8:	d1 04       	cpc	r13, r1
    1bca:	e1 04       	cpc	r14, r1
    1bcc:	f1 04       	cpc	r15, r1
    1bce:	21 f7       	brne	.-56     	; 0x1b98 <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1bd0:	01 15       	cp	r16, r1
    1bd2:	11 05       	cpc	r17, r1
    1bd4:	91 f0       	breq	.+36     	; 0x1bfa <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	01 90       	ld	r0, Z+
    1bda:	00 20       	and	r0, r0
    1bdc:	e9 f7       	brne	.-6      	; 0x1bd8 <_ZN5Print11printNumberEmh+0x94>
    1bde:	31 97       	sbiw	r30, 0x01	; 1
    1be0:	af 01       	movw	r20, r30
    1be2:	40 1b       	sub	r20, r16
    1be4:	51 0b       	sbc	r21, r17
    1be6:	d5 01       	movw	r26, r10
    1be8:	ed 91       	ld	r30, X+
    1bea:	fc 91       	ld	r31, X
    1bec:	02 80       	ldd	r0, Z+2	; 0x02
    1bee:	f3 81       	ldd	r31, Z+3	; 0x03
    1bf0:	e0 2d       	mov	r30, r0
    1bf2:	b8 01       	movw	r22, r16
    1bf4:	c5 01       	movw	r24, r10
    1bf6:	09 95       	icall
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    1bfe:	a1 96       	adiw	r28, 0x21	; 33
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	df 90       	pop	r13
    1c18:	cf 90       	pop	r12
    1c1a:	bf 90       	pop	r11
    1c1c:	af 90       	pop	r10
    1c1e:	9f 90       	pop	r9
    1c20:	7f 90       	pop	r7
    1c22:	6f 90       	pop	r6
    1c24:	5f 90       	pop	r5
    1c26:	4f 90       	pop	r4
    1c28:	08 95       	ret

00001c2a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	ec 01       	movw	r28, r24
    1c3c:	6a 01       	movw	r12, r20
    1c3e:	7b 01       	movw	r14, r22
  if (base == 0) {
    1c40:	21 15       	cp	r18, r1
    1c42:	31 05       	cpc	r19, r1
    1c44:	41 f4       	brne	.+16     	; 0x1c56 <_ZN5Print5printEli+0x2c>
    return write(n);
    1c46:	e8 81       	ld	r30, Y
    1c48:	f9 81       	ldd	r31, Y+1	; 0x01
    1c4a:	01 90       	ld	r0, Z+
    1c4c:	f0 81       	ld	r31, Z
    1c4e:	e0 2d       	mov	r30, r0
    1c50:	64 2f       	mov	r22, r20
    1c52:	09 95       	icall
    1c54:	1d c0       	rjmp	.+58     	; 0x1c90 <_ZN5Print5printEli+0x66>
  } else if (base == 10) {
    1c56:	2a 30       	cpi	r18, 0x0A	; 10
    1c58:	31 05       	cpc	r19, r1
    1c5a:	c1 f4       	brne	.+48     	; 0x1c8c <_ZN5Print5printEli+0x62>
    if (n < 0) {
    1c5c:	77 23       	and	r23, r23
    1c5e:	94 f4       	brge	.+36     	; 0x1c84 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    1c60:	6d e2       	ldi	r22, 0x2D	; 45
    1c62:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_ZN5Print5printEc>
    1c66:	8c 01       	movw	r16, r24
      n = -n;
    1c68:	44 27       	eor	r20, r20
    1c6a:	55 27       	eor	r21, r21
    1c6c:	ba 01       	movw	r22, r20
    1c6e:	4c 19       	sub	r20, r12
    1c70:	5d 09       	sbc	r21, r13
    1c72:	6e 09       	sbc	r22, r14
    1c74:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    1c76:	2a e0       	ldi	r18, 0x0A	; 10
    1c78:	ce 01       	movw	r24, r28
    1c7a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN5Print11printNumberEmh>
    1c7e:	80 0f       	add	r24, r16
    1c80:	91 1f       	adc	r25, r17
    1c82:	06 c0       	rjmp	.+12     	; 0x1c90 <_ZN5Print5printEli+0x66>
    }
    return printNumber(n, 10);
    1c84:	2a e0       	ldi	r18, 0x0A	; 10
    1c86:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN5Print11printNumberEmh>
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <_ZN5Print5printEli+0x66>
  } else {
    return printNumber(n, base);
    1c8c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN5Print11printNumberEmh>
  }
}
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	df 90       	pop	r13
    1c9e:	cf 90       	pop	r12
    1ca0:	08 95       	ret

00001ca2 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1ca2:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1ca4:	ab 01       	movw	r20, r22
    1ca6:	77 0f       	add	r23, r23
    1ca8:	66 0b       	sbc	r22, r22
    1caa:	77 0b       	sbc	r23, r23
    1cac:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN5Print5printEli>
}
    1cb0:	08 95       	ret

00001cb2 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	ec 01       	movw	r28, r24
    1cbc:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1cbe:	ab 01       	movw	r20, r22
    1cc0:	77 0f       	add	r23, r23
    1cc2:	66 0b       	sbc	r22, r22
    1cc4:	77 0b       	sbc	r23, r23
    1cc6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN5Print5printEli>
    1cca:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1ccc:	ce 01       	movw	r24, r28
    1cce:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN5Print7printlnEv>
  return n;
}
    1cd2:	80 0f       	add	r24, r16
    1cd4:	91 1f       	adc	r25, r17
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	08 95       	ret

00001ce0 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1ce0:	21 15       	cp	r18, r1
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	49 f4       	brne	.+18     	; 0x1cf8 <_ZN5Print5printEmi+0x18>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	ed 91       	ld	r30, X+
    1cea:	fc 91       	ld	r31, X
    1cec:	01 90       	ld	r0, Z+
    1cee:	f0 81       	ld	r31, Z
    1cf0:	e0 2d       	mov	r30, r0
    1cf2:	64 2f       	mov	r22, r20
    1cf4:	09 95       	icall
    1cf6:	08 95       	ret
  else return printNumber(n, base);
    1cf8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN5Print11printNumberEmh>
}
    1cfc:	08 95       	ret

00001cfe <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1cfe:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    1d00:	46 2f       	mov	r20, r22
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <_ZN5Print5printEmi>
}
    1d0c:	08 95       	ret

00001d0e <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	ec 01       	movw	r28, r24
    1d18:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1d1a:	ab 01       	movw	r20, r22
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <_ZN5Print5printEmi>
    1d24:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1d26:	ce 01       	movw	r24, r28
    1d28:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN5Print7printlnEv>
  return n;
}
    1d2c:	80 0f       	add	r24, r16
    1d2e:	91 1f       	adc	r25, r17
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	ec 01       	movw	r28, r24
    1d44:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    1d46:	46 2f       	mov	r20, r22
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <_ZN5Print5printEmi>
    1d52:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    1d54:	ce 01       	movw	r24, r28
    1d56:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN5Print7printlnEv>
  return n;
}
    1d5a:	80 0f       	add	r24, r16
    1d5c:	91 1f       	adc	r25, r17
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	08 95       	ret

00001d68 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1d68:	4f 92       	push	r4
    1d6a:	5f 92       	push	r5
    1d6c:	7f 92       	push	r7
    1d6e:	8f 92       	push	r8
    1d70:	9f 92       	push	r9
    1d72:	af 92       	push	r10
    1d74:	bf 92       	push	r11
    1d76:	cf 92       	push	r12
    1d78:	df 92       	push	r13
    1d7a:	ef 92       	push	r14
    1d7c:	ff 92       	push	r15
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <_ZN5Print10printFloatEdh+0x20>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <_ZN5Print10printFloatEdh+0x22>
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	8c 01       	movw	r16, r24
    1d90:	4a 01       	movw	r8, r20
    1d92:	5b 01       	movw	r10, r22
    1d94:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1d96:	9a 01       	movw	r18, r20
    1d98:	ab 01       	movw	r20, r22
    1d9a:	c5 01       	movw	r24, r10
    1d9c:	b4 01       	movw	r22, r8
    1d9e:	0e 94 73 29 	call	0x52e6	; 0x52e6 <__unordsf2>
    1da2:	88 23       	and	r24, r24
    1da4:	31 f0       	breq	.+12     	; 0x1db2 <_ZN5Print10printFloatEdh+0x4a>
    1da6:	66 e2       	ldi	r22, 0x26	; 38
    1da8:	71 e0       	ldi	r23, 0x01	; 1
    1daa:	c8 01       	movw	r24, r16
    1dac:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN5Print5printEPKc>
    1db0:	d2 c0       	rjmp	.+420    	; 0x1f56 <_ZN5Print10printFloatEdh+0x1ee>
  if (isinf(number)) return print("inf");
    1db2:	75 01       	movw	r14, r10
    1db4:	64 01       	movw	r12, r8
    1db6:	e8 94       	clt
    1db8:	f7 f8       	bld	r15, 7
    1dba:	2f ef       	ldi	r18, 0xFF	; 255
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	4f e7       	ldi	r20, 0x7F	; 127
    1dc0:	5f e7       	ldi	r21, 0x7F	; 127
    1dc2:	c7 01       	movw	r24, r14
    1dc4:	b6 01       	movw	r22, r12
    1dc6:	0e 94 73 29 	call	0x52e6	; 0x52e6 <__unordsf2>
    1dca:	81 11       	cpse	r24, r1
    1dcc:	10 c0       	rjmp	.+32     	; 0x1dee <_ZN5Print10printFloatEdh+0x86>
    1dce:	2f ef       	ldi	r18, 0xFF	; 255
    1dd0:	3f ef       	ldi	r19, 0xFF	; 255
    1dd2:	4f e7       	ldi	r20, 0x7F	; 127
    1dd4:	5f e7       	ldi	r21, 0x7F	; 127
    1dd6:	c7 01       	movw	r24, r14
    1dd8:	b6 01       	movw	r22, r12
    1dda:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__cmpsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	34 f4       	brge	.+12     	; 0x1dee <_ZN5Print10printFloatEdh+0x86>
    1de2:	6a e2       	ldi	r22, 0x2A	; 42
    1de4:	71 e0       	ldi	r23, 0x01	; 1
    1de6:	c8 01       	movw	r24, r16
    1de8:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN5Print5printEPKc>
    1dec:	b4 c0       	rjmp	.+360    	; 0x1f56 <_ZN5Print10printFloatEdh+0x1ee>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1dee:	2f ef       	ldi	r18, 0xFF	; 255
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	5f e4       	ldi	r21, 0x4F	; 79
    1df6:	c5 01       	movw	r24, r10
    1df8:	b4 01       	movw	r22, r8
    1dfa:	0e 94 af 28 	call	0x515e	; 0x515e <__gesf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	34 f4       	brge	.+12     	; 0x1e0e <_ZN5Print10printFloatEdh+0xa6>
    1e02:	6e e2       	ldi	r22, 0x2E	; 46
    1e04:	71 e0       	ldi	r23, 0x01	; 1
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN5Print5printEPKc>
    1e0c:	a4 c0       	rjmp	.+328    	; 0x1f56 <_ZN5Print10printFloatEdh+0x1ee>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1e0e:	2f ef       	ldi	r18, 0xFF	; 255
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	4f e7       	ldi	r20, 0x7F	; 127
    1e14:	5f ec       	ldi	r21, 0xCF	; 207
    1e16:	c5 01       	movw	r24, r10
    1e18:	b4 01       	movw	r22, r8
    1e1a:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__cmpsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	34 f4       	brge	.+12     	; 0x1e2e <_ZN5Print10printFloatEdh+0xc6>
    1e22:	6e e2       	ldi	r22, 0x2E	; 46
    1e24:	71 e0       	ldi	r23, 0x01	; 1
    1e26:	c8 01       	movw	r24, r16
    1e28:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN5Print5printEPKc>
    1e2c:	94 c0       	rjmp	.+296    	; 0x1f56 <_ZN5Print10printFloatEdh+0x1ee>
  
  // Handle negative numbers
  if (number < 0.0)
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	a9 01       	movw	r20, r18
    1e34:	c5 01       	movw	r24, r10
    1e36:	b4 01       	movw	r22, r8
    1e38:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__cmpsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	54 f4       	brge	.+20     	; 0x1e54 <_ZN5Print10printFloatEdh+0xec>
  {
     n += print('-');
    1e40:	6d e2       	ldi	r22, 0x2D	; 45
    1e42:	c8 01       	movw	r24, r16
    1e44:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <_ZN5Print5printEc>
    1e48:	7c 01       	movw	r14, r24
     number = -number;
    1e4a:	b7 fa       	bst	r11, 7
    1e4c:	b0 94       	com	r11
    1e4e:	b7 f8       	bld	r11, 7
    1e50:	b0 94       	com	r11
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <_ZN5Print10printFloatEdh+0xf0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1e54:	e1 2c       	mov	r14, r1
    1e56:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1e58:	77 20       	and	r7, r7
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <_ZN5Print10printFloatEdh+0xf6>
    1e5c:	67 c0       	rjmp	.+206    	; 0x1f2c <_ZN5Print10printFloatEdh+0x1c4>
    1e5e:	d1 2c       	mov	r13, r1
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e2       	ldi	r20, 0x20	; 32
    1e6e:	51 e4       	ldi	r21, 0x41	; 65
    1e70:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1e74:	d3 94       	inc	r13
    1e76:	d7 10       	cpse	r13, r7
    1e78:	f7 cf       	rjmp	.-18     	; 0x1e68 <_ZN5Print10printFloatEdh+0x100>
    1e7a:	2b c0       	rjmp	.+86     	; 0x1ed2 <_ZN5Print10printFloatEdh+0x16a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e2       	ldi	r20, 0x20	; 32
    1e82:	51 e4       	ldi	r21, 0x41	; 65
    1e84:	c5 01       	movw	r24, r10
    1e86:	b4 01       	movw	r22, r8
    1e88:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    1e8c:	4b 01       	movw	r8, r22
    1e8e:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    1e90:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1e94:	6b 01       	movw	r12, r22
    1e96:	77 0f       	add	r23, r23
    1e98:	ee 08       	sbc	r14, r14
    1e9a:	ff 08       	sbc	r15, r15
    1e9c:	2a e0       	ldi	r18, 0x0A	; 10
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	b7 01       	movw	r22, r14
    1ea2:	a6 01       	movw	r20, r12
    1ea4:	c8 01       	movw	r24, r16
    1ea6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1eaa:	48 0e       	add	r4, r24
    1eac:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    1eae:	c7 01       	movw	r24, r14
    1eb0:	b6 01       	movw	r22, r12
    1eb2:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <__floatsisf>
    1eb6:	9b 01       	movw	r18, r22
    1eb8:	ac 01       	movw	r20, r24
    1eba:	c5 01       	movw	r24, r10
    1ebc:	b4 01       	movw	r22, r8
    1ebe:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__subsf3>
    1ec2:	4b 01       	movw	r8, r22
    1ec4:	5c 01       	movw	r10, r24
    1ec6:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1ec8:	71 10       	cpse	r7, r1
    1eca:	d8 cf       	rjmp	.-80     	; 0x1e7c <_ZN5Print10printFloatEdh+0x114>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    1ecc:	84 2d       	mov	r24, r4
    1ece:	95 2d       	mov	r25, r5
    1ed0:	42 c0       	rjmp	.+132    	; 0x1f56 <_ZN5Print10printFloatEdh+0x1ee>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    1ed2:	9b 01       	movw	r18, r22
    1ed4:	ac 01       	movw	r20, r24
    1ed6:	c5 01       	movw	r24, r10
    1ed8:	b4 01       	movw	r22, r8
    1eda:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__addsf3>
    1ede:	4b 01       	movw	r8, r22
    1ee0:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1ee2:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__fixunssfsi>
    1ee6:	69 83       	std	Y+1, r22	; 0x01
    1ee8:	7a 83       	std	Y+2, r23	; 0x02
    1eea:	8b 83       	std	Y+3, r24	; 0x03
    1eec:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    1eee:	0e 94 d6 27 	call	0x4fac	; 0x4fac <__floatunsisf>
    1ef2:	9b 01       	movw	r18, r22
    1ef4:	ac 01       	movw	r20, r24
    1ef6:	c5 01       	movw	r24, r10
    1ef8:	b4 01       	movw	r22, r8
    1efa:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__subsf3>
    1efe:	4b 01       	movw	r8, r22
    1f00:	5c 01       	movw	r10, r24
  n += print(int_part);
    1f02:	2a e0       	ldi	r18, 0x0A	; 10
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	49 81       	ldd	r20, Y+1	; 0x01
    1f08:	5a 81       	ldd	r21, Y+2	; 0x02
    1f0a:	6b 81       	ldd	r22, Y+3	; 0x03
    1f0c:	7c 81       	ldd	r23, Y+4	; 0x04
    1f0e:	c8 01       	movw	r24, r16
    1f10:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <_ZN5Print5printEmi>
    1f14:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1f16:	62 e3       	ldi	r22, 0x32	; 50
    1f18:	71 e0       	ldi	r23, 0x01	; 1
    1f1a:	c8 01       	movw	r24, r16
    1f1c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN5Print5printEPKc>
    1f20:	8c 0d       	add	r24, r12
    1f22:	9d 1d       	adc	r25, r13
    1f24:	2c 01       	movw	r4, r24
    1f26:	4e 0c       	add	r4, r14
    1f28:	5f 1c       	adc	r5, r15
    1f2a:	a8 cf       	rjmp	.-176    	; 0x1e7c <_ZN5Print10printFloatEdh+0x114>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	5f e3       	ldi	r21, 0x3F	; 63
    1f34:	c5 01       	movw	r24, r10
    1f36:	b4 01       	movw	r22, r8
    1f38:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1f3c:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__fixunssfsi>
    1f40:	ab 01       	movw	r20, r22
    1f42:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    1f44:	2a e0       	ldi	r18, 0x0A	; 10
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	c8 01       	movw	r24, r16
    1f4a:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <_ZN5Print5printEmi>
    1f4e:	2c 01       	movw	r4, r24
    1f50:	4e 0c       	add	r4, r14
    1f52:	5f 1c       	adc	r5, r15
    1f54:	bb cf       	rjmp	.-138    	; 0x1ecc <_ZN5Print10printFloatEdh+0x164>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	ff 90       	pop	r15
    1f68:	ef 90       	pop	r14
    1f6a:	df 90       	pop	r13
    1f6c:	cf 90       	pop	r12
    1f6e:	bf 90       	pop	r11
    1f70:	af 90       	pop	r10
    1f72:	9f 90       	pop	r9
    1f74:	8f 90       	pop	r8
    1f76:	7f 90       	pop	r7
    1f78:	5f 90       	pop	r5
    1f7a:	4f 90       	pop	r4
    1f7c:	08 95       	ret

00001f7e <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1f7e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <_ZN5Print10printFloatEdh>
}
    1f82:	08 95       	ret

00001f84 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1f8e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <_ZN5Print10printFloatEdh>
    1f92:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1f94:	ce 01       	movw	r24, r28
    1f96:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <_ZN5Print7printlnEv>
  return n;
}
    1f9a:	80 0f       	add	r24, r16
    1f9c:	91 1f       	adc	r25, r17
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	08 95       	ret

00001fa8 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    1fa8:	81 30       	cpi	r24, 0x01	; 1
    1faa:	39 f0       	breq	.+14     	; 0x1fba <_Z12disableTimerh+0x12>
    1fac:	18 f0       	brcs	.+6      	; 0x1fb4 <_Z12disableTimerh+0xc>
    1fae:	82 30       	cpi	r24, 0x02	; 2
    1fb0:	51 f0       	breq	.+20     	; 0x1fc6 <_Z12disableTimerh+0x1e>
    1fb2:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1fb4:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    1fb8:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    1fba:	ef e6       	ldi	r30, 0x6F	; 111
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	8d 7f       	andi	r24, 0xFD	; 253
    1fc2:	80 83       	st	Z, r24
      break;
    1fc4:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1fc6:	e0 e7       	ldi	r30, 0x70	; 112
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8d 7f       	andi	r24, 0xFD	; 253
    1fce:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    1fd6:	e1 eb       	ldi	r30, 0xB1	; 177
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	88 7f       	andi	r24, 0xF8	; 248
    1fde:	84 60       	ori	r24, 0x04	; 4
    1fe0:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    1fe2:	10 92 b3 00 	sts	0x00B3, r1
    1fe6:	08 95       	ret

00001fe8 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    1fe8:	cf 93       	push	r28
    1fea:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1fec:	80 91 06 01 	lds	r24, 0x0106
    1ff0:	8c 13       	cpse	r24, r28
    1ff2:	07 c0       	rjmp	.+14     	; 0x2002 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1ff4:	e8 e2       	ldi	r30, 0x28	; 40
    1ff6:	f2 e0       	ldi	r31, 0x02	; 2
    1ff8:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    1ffa:	9f ef       	ldi	r25, 0xFF	; 255
    1ffc:	90 93 06 01 	sts	0x0106, r25
      break;
    2000:	01 c0       	rjmp	.+2      	; 0x2004 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    2002:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
    2004:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	8c 2f       	mov	r24, r28
    200c:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>
}
    2010:	cf 91       	pop	r28
    2012:	08 95       	ret

00002014 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    2014:	1f 92       	push	r1
    2016:	0f 92       	push	r0
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	0f 92       	push	r0
    201c:	11 24       	eor	r1, r1
    201e:	2f 93       	push	r18
    2020:	3f 93       	push	r19
    2022:	4f 93       	push	r20
    2024:	5f 93       	push	r21
    2026:	6f 93       	push	r22
    2028:	7f 93       	push	r23
    202a:	8f 93       	push	r24
    202c:	9f 93       	push	r25
    202e:	af 93       	push	r26
    2030:	bf 93       	push	r27
    2032:	ef 93       	push	r30
    2034:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    2036:	80 91 16 02 	lds	r24, 0x0216
    203a:	90 91 17 02 	lds	r25, 0x0217
    203e:	a0 91 18 02 	lds	r26, 0x0218
    2042:	b0 91 19 02 	lds	r27, 0x0219
    2046:	89 2b       	or	r24, r25
    2048:	8a 2b       	or	r24, r26
    204a:	8b 2b       	or	r24, r27
    204c:	51 f1       	breq	.+84     	; 0x20a2 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    204e:	80 91 13 02 	lds	r24, 0x0213
    2052:	e0 91 14 02 	lds	r30, 0x0214
    2056:	f0 91 15 02 	lds	r31, 0x0215
    205a:	90 81       	ld	r25, Z
    205c:	89 27       	eor	r24, r25
    205e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    2060:	80 91 16 02 	lds	r24, 0x0216
    2064:	90 91 17 02 	lds	r25, 0x0217
    2068:	a0 91 18 02 	lds	r26, 0x0218
    206c:	b0 91 19 02 	lds	r27, 0x0219
    2070:	18 16       	cp	r1, r24
    2072:	19 06       	cpc	r1, r25
    2074:	1a 06       	cpc	r1, r26
    2076:	1b 06       	cpc	r1, r27
    2078:	c4 f4       	brge	.+48     	; 0x20aa <__vector_7+0x96>
      timer2_toggle_count--;
    207a:	80 91 16 02 	lds	r24, 0x0216
    207e:	90 91 17 02 	lds	r25, 0x0217
    2082:	a0 91 18 02 	lds	r26, 0x0218
    2086:	b0 91 19 02 	lds	r27, 0x0219
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	a1 09       	sbc	r26, r1
    208e:	b1 09       	sbc	r27, r1
    2090:	80 93 16 02 	sts	0x0216, r24
    2094:	90 93 17 02 	sts	0x0217, r25
    2098:	a0 93 18 02 	sts	0x0218, r26
    209c:	b0 93 19 02 	sts	0x0219, r27
    20a0:	04 c0       	rjmp	.+8      	; 0x20aa <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    20a2:	80 91 06 01 	lds	r24, 0x0106
    20a6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    20aa:	ff 91       	pop	r31
    20ac:	ef 91       	pop	r30
    20ae:	bf 91       	pop	r27
    20b0:	af 91       	pop	r26
    20b2:	9f 91       	pop	r25
    20b4:	8f 91       	pop	r24
    20b6:	7f 91       	pop	r23
    20b8:	6f 91       	pop	r22
    20ba:	5f 91       	pop	r21
    20bc:	4f 91       	pop	r20
    20be:	3f 91       	pop	r19
    20c0:	2f 91       	pop	r18
    20c2:	0f 90       	pop	r0
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	0f 90       	pop	r0
    20c8:	1f 90       	pop	r1
    20ca:	18 95       	reti

000020cc <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    20cc:	08 95       	ret

000020ce <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    20ce:	82 30       	cpi	r24, 0x02	; 2
    20d0:	00 f5       	brcc	.+64     	; 0x2112 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    20d2:	e8 2f       	mov	r30, r24
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	ee 0f       	add	r30, r30
    20d8:	ff 1f       	adc	r31, r31
    20da:	e9 5f       	subi	r30, 0xF9	; 249
    20dc:	fe 4f       	sbci	r31, 0xFE	; 254
    20de:	71 83       	std	Z+1, r23	; 0x01
    20e0:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    20e2:	88 23       	and	r24, r24
    20e4:	19 f0       	breq	.+6      	; 0x20ec <attachInterrupt+0x1e>
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	49 f0       	breq	.+18     	; 0x20fc <attachInterrupt+0x2e>
    20ea:	08 95       	ret
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    20ec:	e9 e6       	ldi	r30, 0x69	; 105
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	8c 7f       	andi	r24, 0xFC	; 252
    20f4:	48 2b       	or	r20, r24
    20f6:	40 83       	st	Z, r20
      EIMSK |= (1 << INT0);
    20f8:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    20fa:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    20fc:	e9 e6       	ldi	r30, 0x69	; 105
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	44 0f       	add	r20, r20
    2104:	55 1f       	adc	r21, r21
    2106:	44 0f       	add	r20, r20
    2108:	55 1f       	adc	r21, r21
    210a:	83 7f       	andi	r24, 0xF3	; 243
    210c:	48 2b       	or	r20, r24
    210e:	40 83       	st	Z, r20
      EIMSK |= (1 << INT1);
    2110:	e9 9a       	sbi	0x1d, 1	; 29
    2112:	08 95       	ret

00002114 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    2114:	1f 92       	push	r1
    2116:	0f 92       	push	r0
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	2f 93       	push	r18
    2120:	3f 93       	push	r19
    2122:	4f 93       	push	r20
    2124:	5f 93       	push	r21
    2126:	6f 93       	push	r22
    2128:	7f 93       	push	r23
    212a:	8f 93       	push	r24
    212c:	9f 93       	push	r25
    212e:	af 93       	push	r26
    2130:	bf 93       	push	r27
    2132:	ef 93       	push	r30
    2134:	ff 93       	push	r31
    intFunc[EXTERNAL_INT_0]();
    2136:	e0 91 07 01 	lds	r30, 0x0107
    213a:	f0 91 08 01 	lds	r31, 0x0108
    213e:	09 95       	icall
}
    2140:	ff 91       	pop	r31
    2142:	ef 91       	pop	r30
    2144:	bf 91       	pop	r27
    2146:	af 91       	pop	r26
    2148:	9f 91       	pop	r25
    214a:	8f 91       	pop	r24
    214c:	7f 91       	pop	r23
    214e:	6f 91       	pop	r22
    2150:	5f 91       	pop	r21
    2152:	4f 91       	pop	r20
    2154:	3f 91       	pop	r19
    2156:	2f 91       	pop	r18
    2158:	0f 90       	pop	r0
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	0f 90       	pop	r0
    215e:	1f 90       	pop	r1
    2160:	18 95       	reti

00002162 <__vector_2>:

ISR(INT1_vect) {
    2162:	1f 92       	push	r1
    2164:	0f 92       	push	r0
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	0f 92       	push	r0
    216a:	11 24       	eor	r1, r1
    216c:	2f 93       	push	r18
    216e:	3f 93       	push	r19
    2170:	4f 93       	push	r20
    2172:	5f 93       	push	r21
    2174:	6f 93       	push	r22
    2176:	7f 93       	push	r23
    2178:	8f 93       	push	r24
    217a:	9f 93       	push	r25
    217c:	af 93       	push	r26
    217e:	bf 93       	push	r27
    2180:	ef 93       	push	r30
    2182:	ff 93       	push	r31
    intFunc[EXTERNAL_INT_1]();
    2184:	e0 91 09 01 	lds	r30, 0x0109
    2188:	f0 91 0a 01 	lds	r31, 0x010A
    218c:	09 95       	icall
}
    218e:	ff 91       	pop	r31
    2190:	ef 91       	pop	r30
    2192:	bf 91       	pop	r27
    2194:	af 91       	pop	r26
    2196:	9f 91       	pop	r25
    2198:	8f 91       	pop	r24
    219a:	7f 91       	pop	r23
    219c:	6f 91       	pop	r22
    219e:	5f 91       	pop	r21
    21a0:	4f 91       	pop	r20
    21a2:	3f 91       	pop	r19
    21a4:	2f 91       	pop	r18
    21a6:	0f 90       	pop	r0
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	0f 90       	pop	r0
    21ac:	1f 90       	pop	r1
    21ae:	18 95       	reti

000021b0 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    21b0:	1f 92       	push	r1
    21b2:	0f 92       	push	r0
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	0f 92       	push	r0
    21b8:	11 24       	eor	r1, r1
    21ba:	2f 93       	push	r18
    21bc:	3f 93       	push	r19
    21be:	8f 93       	push	r24
    21c0:	9f 93       	push	r25
    21c2:	af 93       	push	r26
    21c4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    21c6:	80 91 1b 02 	lds	r24, 0x021B
    21ca:	90 91 1c 02 	lds	r25, 0x021C
    21ce:	a0 91 1d 02 	lds	r26, 0x021D
    21d2:	b0 91 1e 02 	lds	r27, 0x021E
	unsigned char f = timer0_fract;
    21d6:	30 91 1a 02 	lds	r19, 0x021A

	m += MILLIS_INC;
	f += FRACT_INC;
    21da:	23 e0       	ldi	r18, 0x03	; 3
    21dc:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    21de:	2d 37       	cpi	r18, 0x7D	; 125
    21e0:	20 f4       	brcc	.+8      	; 0x21ea <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	a1 1d       	adc	r26, r1
    21e6:	b1 1d       	adc	r27, r1
    21e8:	05 c0       	rjmp	.+10     	; 0x21f4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    21ea:	26 e8       	ldi	r18, 0x86	; 134
    21ec:	23 0f       	add	r18, r19
		m += 1;
    21ee:	02 96       	adiw	r24, 0x02	; 2
    21f0:	a1 1d       	adc	r26, r1
    21f2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    21f4:	20 93 1a 02 	sts	0x021A, r18
	timer0_millis = m;
    21f8:	80 93 1b 02 	sts	0x021B, r24
    21fc:	90 93 1c 02 	sts	0x021C, r25
    2200:	a0 93 1d 02 	sts	0x021D, r26
    2204:	b0 93 1e 02 	sts	0x021E, r27
	timer0_overflow_count++;
    2208:	80 91 1f 02 	lds	r24, 0x021F
    220c:	90 91 20 02 	lds	r25, 0x0220
    2210:	a0 91 21 02 	lds	r26, 0x0221
    2214:	b0 91 22 02 	lds	r27, 0x0222
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	a1 1d       	adc	r26, r1
    221c:	b1 1d       	adc	r27, r1
    221e:	80 93 1f 02 	sts	0x021F, r24
    2222:	90 93 20 02 	sts	0x0220, r25
    2226:	a0 93 21 02 	sts	0x0221, r26
    222a:	b0 93 22 02 	sts	0x0222, r27
}
    222e:	bf 91       	pop	r27
    2230:	af 91       	pop	r26
    2232:	9f 91       	pop	r25
    2234:	8f 91       	pop	r24
    2236:	3f 91       	pop	r19
    2238:	2f 91       	pop	r18
    223a:	0f 90       	pop	r0
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	0f 90       	pop	r0
    2240:	1f 90       	pop	r1
    2242:	18 95       	reti

00002244 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2244:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2246:	f8 94       	cli
	m = timer0_millis;
    2248:	60 91 1b 02 	lds	r22, 0x021B
    224c:	70 91 1c 02 	lds	r23, 0x021C
    2250:	80 91 1d 02 	lds	r24, 0x021D
    2254:	90 91 1e 02 	lds	r25, 0x021E
	SREG = oldSREG;
    2258:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    225a:	08 95       	ret

0000225c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    225c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    225e:	f8 94       	cli
	m = timer0_overflow_count;
    2260:	80 91 1f 02 	lds	r24, 0x021F
    2264:	90 91 20 02 	lds	r25, 0x0220
    2268:	a0 91 21 02 	lds	r26, 0x0221
    226c:	b0 91 22 02 	lds	r27, 0x0222
#if defined(TCNT0)
	t = TCNT0;
    2270:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2272:	a8 9b       	sbis	0x15, 0	; 21
    2274:	05 c0       	rjmp	.+10     	; 0x2280 <micros+0x24>
    2276:	2f 3f       	cpi	r18, 0xFF	; 255
    2278:	19 f0       	breq	.+6      	; 0x2280 <micros+0x24>
		m++;
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	a1 1d       	adc	r26, r1
    227e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2280:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2282:	ba 2f       	mov	r27, r26
    2284:	a9 2f       	mov	r26, r25
    2286:	98 2f       	mov	r25, r24
    2288:	88 27       	eor	r24, r24
    228a:	82 0f       	add	r24, r18
    228c:	91 1d       	adc	r25, r1
    228e:	a1 1d       	adc	r26, r1
    2290:	b1 1d       	adc	r27, r1
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	66 0f       	add	r22, r22
    2298:	77 1f       	adc	r23, r23
    229a:	88 1f       	adc	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	66 0f       	add	r22, r22
    22a0:	77 1f       	adc	r23, r23
    22a2:	88 1f       	adc	r24, r24
    22a4:	99 1f       	adc	r25, r25
}
    22a6:	08 95       	ret

000022a8 <delay>:

void delay(unsigned long ms)
{
    22a8:	cf 92       	push	r12
    22aa:	df 92       	push	r13
    22ac:	ef 92       	push	r14
    22ae:	ff 92       	push	r15
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	6b 01       	movw	r12, r22
    22b6:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    22b8:	0e 94 2e 11 	call	0x225c	; 0x225c <micros>
    22bc:	eb 01       	movw	r28, r22

	while (ms > 0) {
    22be:	c1 14       	cp	r12, r1
    22c0:	d1 04       	cpc	r13, r1
    22c2:	e1 04       	cpc	r14, r1
    22c4:	f1 04       	cpc	r15, r1
    22c6:	a9 f0       	breq	.+42     	; 0x22f2 <delay+0x4a>
		yield();
    22c8:	0e 94 9d 0c 	call	0x193a	; 0x193a <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    22cc:	0e 94 2e 11 	call	0x225c	; 0x225c <micros>
    22d0:	6c 1b       	sub	r22, r28
    22d2:	7d 0b       	sbc	r23, r29
    22d4:	68 3e       	cpi	r22, 0xE8	; 232
    22d6:	73 40       	sbci	r23, 0x03	; 3
    22d8:	38 f0       	brcs	.+14     	; 0x22e8 <delay+0x40>
			ms--;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	c8 1a       	sub	r12, r24
    22de:	d1 08       	sbc	r13, r1
    22e0:	e1 08       	sbc	r14, r1
    22e2:	f1 08       	sbc	r15, r1
			start += 1000;
    22e4:	c8 51       	subi	r28, 0x18	; 24
    22e6:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    22e8:	c1 14       	cp	r12, r1
    22ea:	d1 04       	cpc	r13, r1
    22ec:	e1 04       	cpc	r14, r1
    22ee:	f1 04       	cpc	r15, r1
    22f0:	59 f7       	brne	.-42     	; 0x22c8 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	08 95       	ret

00002300 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2300:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2302:	84 b5       	in	r24, 0x24	; 36
    2304:	82 60       	ori	r24, 0x02	; 2
    2306:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2308:	84 b5       	in	r24, 0x24	; 36
    230a:	81 60       	ori	r24, 0x01	; 1
    230c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    230e:	85 b5       	in	r24, 0x25	; 37
    2310:	82 60       	ori	r24, 0x02	; 2
    2312:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2314:	85 b5       	in	r24, 0x25	; 37
    2316:	81 60       	ori	r24, 0x01	; 1
    2318:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    231a:	ee e6       	ldi	r30, 0x6E	; 110
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	81 60       	ori	r24, 0x01	; 1
    2322:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2324:	e1 e8       	ldi	r30, 0x81	; 129
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    232a:	80 81       	ld	r24, Z
    232c:	82 60       	ori	r24, 0x02	; 2
    232e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2330:	80 81       	ld	r24, Z
    2332:	81 60       	ori	r24, 0x01	; 1
    2334:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2336:	e0 e8       	ldi	r30, 0x80	; 128
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	81 60       	ori	r24, 0x01	; 1
    233e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2340:	e1 eb       	ldi	r30, 0xB1	; 177
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	84 60       	ori	r24, 0x04	; 4
    2348:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    234a:	e0 eb       	ldi	r30, 0xB0	; 176
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	81 60       	ori	r24, 0x01	; 1
    2352:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2354:	ea e7       	ldi	r30, 0x7A	; 122
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	84 60       	ori	r24, 0x04	; 4
    235c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    235e:	80 81       	ld	r24, Z
    2360:	82 60       	ori	r24, 0x02	; 2
    2362:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2364:	80 81       	ld	r24, Z
    2366:	81 60       	ori	r24, 0x01	; 1
    2368:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    236a:	80 81       	ld	r24, Z
    236c:	80 68       	ori	r24, 0x80	; 128
    236e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2370:	10 92 c1 00 	sts	0x00C1, r1
    2374:	08 95       	ret

00002376 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2376:	83 30       	cpi	r24, 0x03	; 3
    2378:	69 f0       	breq	.+26     	; 0x2394 <turnOffPWM+0x1e>
    237a:	28 f4       	brcc	.+10     	; 0x2386 <turnOffPWM+0x10>
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	b1 f0       	breq	.+44     	; 0x23ac <turnOffPWM+0x36>
    2380:	82 30       	cpi	r24, 0x02	; 2
    2382:	c1 f0       	breq	.+48     	; 0x23b4 <turnOffPWM+0x3e>
    2384:	08 95       	ret
    2386:	87 30       	cpi	r24, 0x07	; 7
    2388:	c9 f0       	breq	.+50     	; 0x23bc <turnOffPWM+0x46>
    238a:	88 30       	cpi	r24, 0x08	; 8
    238c:	e9 f0       	breq	.+58     	; 0x23c8 <turnOffPWM+0x52>
    238e:	84 30       	cpi	r24, 0x04	; 4
    2390:	01 f5       	brne	.+64     	; 0x23d2 <turnOffPWM+0x5c>
    2392:	06 c0       	rjmp	.+12     	; 0x23a0 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2394:	e0 e8       	ldi	r30, 0x80	; 128
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	8f 77       	andi	r24, 0x7F	; 127
    239c:	80 83       	st	Z, r24
    239e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    23a0:	e0 e8       	ldi	r30, 0x80	; 128
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	8f 7d       	andi	r24, 0xDF	; 223
    23a8:	80 83       	st	Z, r24
    23aa:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    23ac:	84 b5       	in	r24, 0x24	; 36
    23ae:	8f 77       	andi	r24, 0x7F	; 127
    23b0:	84 bd       	out	0x24, r24	; 36
    23b2:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    23b4:	84 b5       	in	r24, 0x24	; 36
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	84 bd       	out	0x24, r24	; 36
    23ba:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    23bc:	e0 eb       	ldi	r30, 0xB0	; 176
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8f 77       	andi	r24, 0x7F	; 127
    23c4:	80 83       	st	Z, r24
    23c6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    23c8:	e0 eb       	ldi	r30, 0xB0	; 176
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	8f 7d       	andi	r24, 0xDF	; 223
    23d0:	80 83       	st	Z, r24
    23d2:	08 95       	ret

000023d4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	fc 01       	movw	r30, r24
    23dc:	e3 5c       	subi	r30, 0xC3	; 195
    23de:	fd 4f       	sbci	r31, 0xFD	; 253
    23e0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    23e2:	fc 01       	movw	r30, r24
    23e4:	ef 5a       	subi	r30, 0xAF	; 175
    23e6:	fd 4f       	sbci	r31, 0xFD	; 253
    23e8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    23ea:	88 23       	and	r24, r24
    23ec:	79 f1       	breq	.+94     	; 0x244c <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	fc 01       	movw	r30, r24
    23f6:	e1 59       	subi	r30, 0x91	; 145
    23f8:	fd 4f       	sbci	r31, 0xFD	; 253
    23fa:	a5 91       	lpm	r26, Z+
    23fc:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    23fe:	fc 01       	movw	r30, r24
    2400:	eb 59       	subi	r30, 0x9B	; 155
    2402:	fd 4f       	sbci	r31, 0xFD	; 253
    2404:	c5 91       	lpm	r28, Z+
    2406:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    2408:	61 11       	cpse	r22, r1
    240a:	0c c0       	rjmp	.+24     	; 0x2424 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    240c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    240e:	f8 94       	cli
		*reg &= ~bit;
    2410:	8c 91       	ld	r24, X
    2412:	e2 2f       	mov	r30, r18
    2414:	e0 95       	com	r30
    2416:	8e 23       	and	r24, r30
    2418:	8c 93       	st	X, r24
		*out &= ~bit;
    241a:	28 81       	ld	r18, Y
    241c:	e2 23       	and	r30, r18
    241e:	e8 83       	st	Y, r30
		SREG = oldSREG;
    2420:	9f bf       	out	0x3f, r25	; 63
    2422:	14 c0       	rjmp	.+40     	; 0x244c <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    2424:	62 30       	cpi	r22, 0x02	; 2
    2426:	61 f4       	brne	.+24     	; 0x2440 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    2428:	9f b7       	in	r25, 0x3f	; 63
                cli();
    242a:	f8 94       	cli
		*reg &= ~bit;
    242c:	3c 91       	ld	r19, X
    242e:	82 2f       	mov	r24, r18
    2430:	80 95       	com	r24
    2432:	83 23       	and	r24, r19
    2434:	8c 93       	st	X, r24
		*out |= bit;
    2436:	e8 81       	ld	r30, Y
    2438:	e2 2b       	or	r30, r18
    243a:	e8 83       	st	Y, r30
		SREG = oldSREG;
    243c:	9f bf       	out	0x3f, r25	; 63
    243e:	06 c0       	rjmp	.+12     	; 0x244c <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    2440:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2442:	f8 94       	cli
		*reg |= bit;
    2444:	ec 91       	ld	r30, X
    2446:	e2 2b       	or	r30, r18
    2448:	ec 93       	st	X, r30
		SREG = oldSREG;
    244a:	8f bf       	out	0x3f, r24	; 63
	}
}
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	08 95       	ret

00002452 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2452:	1f 93       	push	r17
    2454:	cf 93       	push	r28
    2456:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	f9 01       	movw	r30, r18
    245e:	e7 5d       	subi	r30, 0xD7	; 215
    2460:	fd 4f       	sbci	r31, 0xFD	; 253
    2462:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2464:	f9 01       	movw	r30, r18
    2466:	e3 5c       	subi	r30, 0xC3	; 195
    2468:	fd 4f       	sbci	r31, 0xFD	; 253
    246a:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    246c:	f9 01       	movw	r30, r18
    246e:	ef 5a       	subi	r30, 0xAF	; 175
    2470:	fd 4f       	sbci	r31, 0xFD	; 253
    2472:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2474:	cc 23       	and	r28, r28
    2476:	d1 f0       	breq	.+52     	; 0x24ac <digitalWrite+0x5a>
    2478:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    247a:	81 11       	cpse	r24, r1
    247c:	0e 94 bb 11 	call	0x2376	; 0x2376 <turnOffPWM>

	out = portOutputRegister(port);
    2480:	ec 2f       	mov	r30, r28
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	eb 59       	subi	r30, 0x9B	; 155
    248a:	fd 4f       	sbci	r31, 0xFD	; 253
    248c:	a5 91       	lpm	r26, Z+
    248e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2490:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2492:	f8 94       	cli

	if (val == LOW) {
    2494:	d1 11       	cpse	r29, r1
    2496:	06 c0       	rjmp	.+12     	; 0x24a4 <digitalWrite+0x52>
		*out &= ~bit;
    2498:	9c 91       	ld	r25, X
    249a:	e1 2f       	mov	r30, r17
    249c:	e0 95       	com	r30
    249e:	e9 23       	and	r30, r25
    24a0:	ec 93       	st	X, r30
    24a2:	03 c0       	rjmp	.+6      	; 0x24aa <digitalWrite+0x58>
	} else {
		*out |= bit;
    24a4:	ec 91       	ld	r30, X
    24a6:	e1 2b       	or	r30, r17
    24a8:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    24aa:	8f bf       	out	0x3f, r24	; 63
}
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	08 95       	ret

000024b4 <_ZN10DCMotorBot13setEnablePinsEhh>:
}

/**
 * Set Enable pins
 */
void DCMotorBot::setEnablePins(byte e1, byte e2) {
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	ec 01       	movw	r28, r24
    24ba:	86 2f       	mov	r24, r22
    mE1 = e1;
    24bc:	6c 83       	std	Y+4, r22	; 0x04
    mE2 = e2;
    24be:	4d 83       	std	Y+5, r20	; 0x05

    pinMode(mE1, OUTPUT);
    24c0:	61 e0       	ldi	r22, 0x01	; 1
    24c2:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <pinMode>
    pinMode(mE2, OUTPUT);
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <pinMode>
}
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	08 95       	ret

000024d4 <_ZN10DCMotorBot14setControlPinsEhhhh>:

/**
 * Set Control pins
 */
void DCMotorBot::setControlPins(byte I1, byte I2, byte I3, byte I4) {
    24d4:	0f 93       	push	r16
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	ec 01       	movw	r28, r24
    24dc:	86 2f       	mov	r24, r22
    mI1 = I1;
    24de:	6e 83       	std	Y+6, r22	; 0x06
    mI2 = I2;
    24e0:	4f 83       	std	Y+7, r20	; 0x07
    mI3 = I3;
    24e2:	28 87       	std	Y+8, r18	; 0x08
    mI4 = I4;
    24e4:	09 87       	std	Y+9, r16	; 0x09

    pinMode(mI1, OUTPUT);
    24e6:	61 e0       	ldi	r22, 0x01	; 1
    24e8:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <pinMode>
    pinMode(mI2, OUTPUT);
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	8f 81       	ldd	r24, Y+7	; 0x07
    24f0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <pinMode>
    pinMode(mI3, OUTPUT);
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	88 85       	ldd	r24, Y+8	; 0x08
    24f8:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <pinMode>
    pinMode(mI4, OUTPUT);
    24fc:	61 e0       	ldi	r22, 0x01	; 1
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <pinMode>
}
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	0f 91       	pop	r16
    250a:	08 95       	ret

0000250c <_ZN10DCMotorBotC1Ev>:
}

/**
 * Default Constructor
 */
DCMotorBot::DCMotorBot() {
    250c:	0f 93       	push	r16
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	ec 01       	movw	r28, r24
    setEnablePins(1, 2);
    2514:	42 e0       	ldi	r20, 0x02	; 2
    2516:	61 e0       	ldi	r22, 0x01	; 1
    2518:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_ZN10DCMotorBot13setEnablePinsEhh>
    setControlPins(3, 4, 5, 6);
    251c:	06 e0       	ldi	r16, 0x06	; 6
    251e:	25 e0       	ldi	r18, 0x05	; 5
    2520:	44 e0       	ldi	r20, 0x04	; 4
    2522:	63 e0       	ldi	r22, 0x03	; 3
    2524:	ce 01       	movw	r24, r28
    2526:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <_ZN10DCMotorBot14setControlPinsEhhhh>

/**
 * Set delay value
 */
void DCMotorBot::setDelay(int delay) {
    mDelay = delay;
    252a:	8a e0       	ldi	r24, 0x0A	; 10
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	99 83       	std	Y+1, r25	; 0x01
    2530:	88 83       	st	Y, r24

/**
 * Set PWM Speed
 */
void DCMotorBot::setSpeed(int speed) {
    mSpeed = speed;
    2532:	8f ef       	ldi	r24, 0xFF	; 255
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9b 83       	std	Y+3, r25	; 0x03
    2538:	8a 83       	std	Y+2, r24	; 0x02
DCMotorBot::DCMotorBot() {
    setEnablePins(1, 2);
    setControlPins(3, 4, 5, 6);
    setDelay(10);
    setSpeed(255);
}
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	0f 91       	pop	r16
    2540:	08 95       	ret

00002542 <_ZN10DCMotorBot11moveForwardEv>:
}

/**
 * Move forward
 */
void DCMotorBot::moveForward() {
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	ec 01       	movw	r28, r24
    //analogWrite(mE1, mSpeed);
    //analogWrite(mE2, mSpeed);

    //delay(mDelay);

    digitalWrite(mI1, HIGH);
    2548:	61 e0       	ldi	r22, 0x01	; 1
    254a:	8e 81       	ldd	r24, Y+6	; 0x06
    254c:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>
    digitalWrite(mI2, LOW);
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	8f 81       	ldd	r24, Y+7	; 0x07
    2554:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>
    digitalWrite(mI3, HIGH);
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	88 85       	ldd	r24, Y+8	; 0x08
    255c:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>
    digitalWrite(mI4, LOW);
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>
}
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	08 95       	ret

0000256e <_ZN10DCMotorBot4stopEv>:
}

/**
 * Stop Bot
 */
void DCMotorBot::stop() {
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	ec 01       	movw	r28, r24
    //digitalWrite(mE1, LOW);
    //digitalWrite(mE2, LOW);
    digitalWrite(mI1, LOW);
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	8e 81       	ldd	r24, Y+6	; 0x06
    2578:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>
    digitalWrite(mI2, LOW);
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	8f 81       	ldd	r24, Y+7	; 0x07
    2580:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>
    digitalWrite(mI3, LOW);
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	88 85       	ldd	r24, Y+8	; 0x08
    2588:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>
    digitalWrite(mI4, LOW);
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	89 85       	ldd	r24, Y+9	; 0x09
    2590:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>

}
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	08 95       	ret

0000259a <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
    259a:	ef 92       	push	r14
    259c:	ff 92       	push	r15
    259e:	0f 93       	push	r16
    25a0:	1f 93       	push	r17
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	c6 2f       	mov	r28, r22
    25a8:	14 2f       	mov	r17, r20
    25aa:	79 01       	movw	r14, r18
    uint8_t status = 0;
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
    25ac:	68 2f       	mov	r22, r24
    25ae:	85 ed       	ldi	r24, 0xD5	; 213
    25b0:	92 e0       	ldi	r25, 0x02	; 2
    25b2:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
    25b6:	6c 2f       	mov	r22, r28
    25b8:	85 ed       	ldi	r24, 0xD5	; 213
    25ba:	92 e0       	ldi	r25, 0x02	; 2
    25bc:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <_ZN7TwoWire5writeEh>
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
    25c0:	11 23       	and	r17, r17
    25c2:	81 f0       	breq	.+32     	; 0x25e4 <_ZN6I2Cdev10writeBytesEhhhPh+0x4a>
    25c4:	e7 01       	movw	r28, r14
    25c6:	11 50       	subi	r17, 0x01	; 1
    25c8:	01 2f       	mov	r16, r17
    25ca:	10 e0       	ldi	r17, 0x00	; 0
    25cc:	0f 5f       	subi	r16, 0xFF	; 255
    25ce:	1f 4f       	sbci	r17, 0xFF	; 255
    25d0:	0e 0d       	add	r16, r14
    25d2:	1f 1d       	adc	r17, r15
            if (i + 1 < length) Serial.print(" ");
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
            Wire.write((uint8_t) data[i]);
    25d4:	69 91       	ld	r22, Y+
    25d6:	85 ed       	ldi	r24, 0xD5	; 213
    25d8:	92 e0       	ldi	r25, 0x02	; 2
    25da:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <_ZN7TwoWire5writeEh>
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
    25de:	c0 17       	cp	r28, r16
    25e0:	d1 07       	cpc	r29, r17
    25e2:	c1 f7       	brne	.-16     	; 0x25d4 <_ZN6I2Cdev10writeBytesEhhhPh+0x3a>
        #endif
    }
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        status = Wire.endTransmission();
    25e4:	85 ed       	ldi	r24, 0xD5	; 213
    25e6:	92 e0       	ldi	r25, 0x02	; 2
    25e8:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <_ZN7TwoWire15endTransmissionEv>
        //status = Fastwire::endTransmission();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
    25ec:	91 e0       	ldi	r25, 0x01	; 1
    25ee:	81 11       	cpse	r24, r1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
}
    25f2:	89 2f       	mov	r24, r25
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	ff 90       	pop	r15
    25fe:	ef 90       	pop	r14
    2600:	08 95       	ret

00002602 <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	1f 92       	push	r1
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	49 83       	std	Y+1, r20	; 0x01
    return writeBytes(devAddr, regAddr, 1, &data);
    260e:	9e 01       	movw	r18, r28
    2610:	2f 5f       	subi	r18, 0xFF	; 255
    2612:	3f 4f       	sbci	r19, 0xFF	; 255
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	0e 94 cd 12 	call	0x259a	; 0x259a <_ZN6I2Cdev10writeBytesEhhhPh>
}
    261a:	0f 90       	pop	r0
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	08 95       	ret

00002622 <_ZN6I2Cdev10writeWordsEhhhPj>:
 * @param regAddr First register address to write to
 * @param length Number of words to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {
    2622:	cf 92       	push	r12
    2624:	df 92       	push	r13
    2626:	ef 92       	push	r14
    2628:	ff 92       	push	r15
    262a:	1f 93       	push	r17
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	c6 2f       	mov	r28, r22
    2632:	e4 2e       	mov	r14, r20
    2634:	69 01       	movw	r12, r18
    uint8_t status = 0;
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.beginTransmission(devAddr);
        Wire.send(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
    2636:	68 2f       	mov	r22, r24
    2638:	85 ed       	ldi	r24, 0xD5	; 213
    263a:	92 e0       	ldi	r25, 0x02	; 2
    263c:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN7TwoWire17beginTransmissionEh>
        Wire.write(regAddr); // send address
    2640:	6c 2f       	mov	r22, r28
    2642:	85 ed       	ldi	r24, 0xD5	; 213
    2644:	92 e0       	ldi	r25, 0x02	; 2
    2646:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <_ZN7TwoWire5writeEh>
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
    264a:	f1 2c       	mov	r15, r1
    264c:	ee 0c       	add	r14, r14
    264e:	ff 1c       	adc	r15, r15
    2650:	1e 14       	cp	r1, r14
    2652:	1f 04       	cpc	r1, r15
    2654:	bc f4       	brge	.+46     	; 0x2684 <_ZN6I2Cdev10writeWordsEhhhPj+0x62>
    2656:	10 e0       	ldi	r17, 0x00	; 0
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t)(data[i] >> 8));     // send MSB
            Wire.send((uint8_t)data[i++]);          // send LSB
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
            Wire.write((uint8_t)(data[i] >> 8));    // send MSB
    2658:	c1 2f       	mov	r28, r17
    265a:	d0 e0       	ldi	r29, 0x00	; 0
    265c:	cc 0f       	add	r28, r28
    265e:	dd 1f       	adc	r29, r29
    2660:	cc 0d       	add	r28, r12
    2662:	dd 1d       	adc	r29, r13
    2664:	69 81       	ldd	r22, Y+1	; 0x01
    2666:	85 ed       	ldi	r24, 0xD5	; 213
    2668:	92 e0       	ldi	r25, 0x02	; 2
    266a:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <_ZN7TwoWire5writeEh>
            Wire.write((uint8_t)data[i++]);         // send LSB
    266e:	68 81       	ld	r22, Y
    2670:	85 ed       	ldi	r24, 0xD5	; 213
    2672:	92 e0       	ldi	r25, 0x02	; 2
    2674:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <_ZN7TwoWire5writeEh>
        Wire.write(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
    2678:	1e 5f       	subi	r17, 0xFE	; 254
    267a:	81 2f       	mov	r24, r17
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	8e 15       	cp	r24, r14
    2680:	9f 05       	cpc	r25, r15
    2682:	54 f3       	brlt	.-44     	; 0x2658 <_ZN6I2Cdev10writeWordsEhhhPj+0x36>
        #endif
    }
    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
        Wire.endTransmission();
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
        status = Wire.endTransmission();
    2684:	85 ed       	ldi	r24, 0xD5	; 213
    2686:	92 e0       	ldi	r25, 0x02	; 2
    2688:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <_ZN7TwoWire15endTransmissionEv>
        //status = Fastwire::endTransmission();
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
    268c:	91 e0       	ldi	r25, 0x01	; 1
    268e:	81 11       	cpse	r24, r1
    2690:	90 e0       	ldi	r25, 0x00	; 0
}
    2692:	89 2f       	mov	r24, r25
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	ff 90       	pop	r15
    269c:	ef 90       	pop	r14
    269e:	df 90       	pop	r13
    26a0:	cf 90       	pop	r12
    26a2:	08 95       	ret

000026a4 <_ZN6I2Cdev9writeWordEhhj>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <_ZN6I2Cdev9writeWordEhhj+0x6>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	5a 83       	std	Y+2, r21	; 0x02
    26b0:	49 83       	std	Y+1, r20	; 0x01
    return writeWords(devAddr, regAddr, 1, &data);
    26b2:	9e 01       	movw	r18, r28
    26b4:	2f 5f       	subi	r18, 0xFF	; 255
    26b6:	3f 4f       	sbci	r19, 0xFF	; 255
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	0e 94 11 13 	call	0x2622	; 0x2622 <_ZN6I2Cdev10writeWordsEhhhPj>
}
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	08 95       	ret

000026c8 <_ZN6I2Cdev9readBytesEhhhPhj>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
    26c8:	2f 92       	push	r2
    26ca:	3f 92       	push	r3
    26cc:	4f 92       	push	r4
    26ce:	5f 92       	push	r5
    26d0:	6f 92       	push	r6
    26d2:	7f 92       	push	r7
    26d4:	8f 92       	push	r8
    26d6:	9f 92       	push	r9
    26d8:	af 92       	push	r10
    26da:	bf 92       	push	r11
    26dc:	cf 92       	push	r12
    26de:	df 92       	push	r13
    26e0:	ef 92       	push	r14
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <_ZN6I2Cdev9readBytesEhhhPhj+0x28>
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <_ZN6I2Cdev9readBytesEhhhPhj+0x2a>
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	28 2e       	mov	r2, r24
    26f8:	69 83       	std	Y+1, r22	; 0x01
    26fa:	c4 2e       	mov	r12, r20
    26fc:	79 01       	movw	r14, r18
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    uint32_t t1 = millis();
    26fe:	0e 94 22 11 	call	0x2244	; 0x2244 <millis>
    2702:	4b 01       	movw	r8, r22
    2704:	5c 01       	movw	r10, r24
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    2706:	cc 20       	and	r12, r12
    2708:	09 f4       	brne	.+2      	; 0x270c <_ZN6I2Cdev9readBytesEhhhPhj+0x44>
    270a:	5b c0       	rjmp	.+182    	; 0x27c2 <_ZN6I2Cdev9readBytesEhhhPhj+0xfa>
    270c:	31 2c       	mov	r3, r1
    270e:	d1 2c       	mov	r13, r1
                Wire.beginTransmission(devAddr);
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    2710:	8c 2d       	mov	r24, r12
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	9b 83       	std	Y+3, r25	; 0x03
    2716:	8a 83       	std	Y+2, r24	; 0x02
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    2718:	28 01       	movw	r4, r16
    271a:	61 2c       	mov	r6, r1
    271c:	71 2c       	mov	r7, r1
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    271e:	cc 82       	std	Y+4, r12	; 0x04
                Wire.beginTransmission(devAddr);
    2720:	62 2d       	mov	r22, r2
    2722:	85 ed       	ldi	r24, 0xD5	; 213
    2724:	92 e0       	ldi	r25, 0x02	; 2
    2726:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
    272a:	69 81       	ldd	r22, Y+1	; 0x01
    272c:	85 ed       	ldi	r24, 0xD5	; 213
    272e:	92 e0       	ldi	r25, 0x02	; 2
    2730:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <_ZN7TwoWire5writeEh>
                Wire.endTransmission();
    2734:	85 ed       	ldi	r24, 0xD5	; 213
    2736:	92 e0       	ldi	r25, 0x02	; 2
    2738:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
    273c:	62 2d       	mov	r22, r2
    273e:	85 ed       	ldi	r24, 0xD5	; 213
    2740:	92 e0       	ldi	r25, 0x02	; 2
    2742:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    2746:	4a 81       	ldd	r20, Y+2	; 0x02
    2748:	5b 81       	ldd	r21, Y+3	; 0x03
    274a:	43 19       	sub	r20, r3
    274c:	51 09       	sbc	r21, r1
    274e:	41 32       	cpi	r20, 0x21	; 33
    2750:	51 05       	cpc	r21, r1
    2752:	14 f0       	brlt	.+4      	; 0x2758 <_ZN6I2Cdev9readBytesEhhhPhj+0x90>
    2754:	40 e2       	ldi	r20, 0x20	; 32
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	62 2d       	mov	r22, r2
    275a:	85 ed       	ldi	r24, 0xD5	; 213
    275c:	92 e0       	ldi	r25, 0x02	; 2
    275e:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <_ZN7TwoWire11requestFromEhh>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    2762:	0f c0       	rjmp	.+30     	; 0x2782 <_ZN6I2Cdev9readBytesEhhhPhj+0xba>
                    data[count] = Wire.read();
    2764:	f7 01       	movw	r30, r14
    2766:	ed 0d       	add	r30, r13
    2768:	f1 1d       	adc	r31, r1
    276a:	d7 fc       	sbrc	r13, 7
    276c:	fa 95       	dec	r31
    276e:	fe 83       	std	Y+6, r31	; 0x06
    2770:	ed 83       	std	Y+5, r30	; 0x05
    2772:	85 ed       	ldi	r24, 0xD5	; 213
    2774:	92 e0       	ldi	r25, 0x02	; 2
    2776:	0e 94 1d 1c 	call	0x383a	; 0x383a <_ZN7TwoWire4readEv>
    277a:	ed 81       	ldd	r30, Y+5	; 0x05
    277c:	fe 81       	ldd	r31, Y+6	; 0x06
    277e:	80 83       	st	Z, r24
    2780:	d3 94       	inc	r13
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    2782:	85 ed       	ldi	r24, 0xD5	; 213
    2784:	92 e0       	ldi	r25, 0x02	; 2
    2786:	0e 94 15 1c 	call	0x382a	; 0x382a <_ZN7TwoWire9availableEv>
    278a:	89 2b       	or	r24, r25
    278c:	81 f0       	breq	.+32     	; 0x27ae <_ZN6I2Cdev9readBytesEhhhPhj+0xe6>
    278e:	01 15       	cp	r16, r1
    2790:	11 05       	cpc	r17, r1
    2792:	41 f3       	breq	.-48     	; 0x2764 <_ZN6I2Cdev9readBytesEhhhPhj+0x9c>
    2794:	0e 94 22 11 	call	0x2244	; 0x2244 <millis>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	88 19       	sub	r24, r8
    279e:	99 09       	sbc	r25, r9
    27a0:	aa 09       	sbc	r26, r10
    27a2:	bb 09       	sbc	r27, r11
    27a4:	84 15       	cp	r24, r4
    27a6:	95 05       	cpc	r25, r5
    27a8:	a6 05       	cpc	r26, r6
    27aa:	b7 05       	cpc	r27, r7
    27ac:	d8 f2       	brcs	.-74     	; 0x2764 <_ZN6I2Cdev9readBytesEhhhPhj+0x9c>
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
    27ae:	8c 81       	ldd	r24, Y+4	; 0x04
    27b0:	f0 e2       	ldi	r31, 0x20	; 32
    27b2:	fc 15       	cp	r31, r12
    27b4:	08 f4       	brcc	.+2      	; 0x27b8 <_ZN6I2Cdev9readBytesEhhhPhj+0xf0>
    27b6:	80 e2       	ldi	r24, 0x20	; 32
    27b8:	38 0e       	add	r3, r24
    27ba:	3c 14       	cp	r3, r12
    27bc:	08 f4       	brcc	.+2      	; 0x27c0 <_ZN6I2Cdev9readBytesEhhhPhj+0xf8>
    27be:	b0 cf       	rjmp	.-160    	; 0x2720 <_ZN6I2Cdev9readBytesEhhhPhj+0x58>
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <_ZN6I2Cdev9readBytesEhhhPhj+0xfc>
        Serial.print(" bytes from 0x");
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
    27c2:	d1 2c       	mov	r13, r1
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
    27c4:	01 15       	cp	r16, r1
    27c6:	11 05       	cpc	r17, r1
    27c8:	d1 f0       	breq	.+52     	; 0x27fe <_ZN6I2Cdev9readBytesEhhhPhj+0x136>
    27ca:	0e 94 22 11 	call	0x2244	; 0x2244 <millis>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	88 19       	sub	r24, r8
    27d4:	99 09       	sbc	r25, r9
    27d6:	aa 09       	sbc	r26, r10
    27d8:	bb 09       	sbc	r27, r11
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	80 17       	cp	r24, r16
    27e0:	91 07       	cpc	r25, r17
    27e2:	a2 07       	cpc	r26, r18
    27e4:	b3 07       	cpc	r27, r19
    27e6:	58 f0       	brcs	.+22     	; 0x27fe <_ZN6I2Cdev9readBytesEhhhPhj+0x136>
    27e8:	8c 2d       	mov	r24, r12
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	2d 2d       	mov	r18, r13
    27ee:	0d 2c       	mov	r0, r13
    27f0:	00 0c       	add	r0, r0
    27f2:	33 0b       	sbc	r19, r19
    27f4:	28 17       	cp	r18, r24
    27f6:	39 07       	cpc	r19, r25
    27f8:	14 f4       	brge	.+4      	; 0x27fe <_ZN6I2Cdev9readBytesEhhhPhj+0x136>
    27fa:	dd 24       	eor	r13, r13
    27fc:	da 94       	dec	r13
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
    27fe:	8d 2d       	mov	r24, r13
    2800:	26 96       	adiw	r28, 0x06	; 6
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
    2814:	ff 90       	pop	r15
    2816:	ef 90       	pop	r14
    2818:	df 90       	pop	r13
    281a:	cf 90       	pop	r12
    281c:	bf 90       	pop	r11
    281e:	af 90       	pop	r10
    2820:	9f 90       	pop	r9
    2822:	8f 90       	pop	r8
    2824:	7f 90       	pop	r7
    2826:	6f 90       	pop	r6
    2828:	5f 90       	pop	r5
    282a:	4f 90       	pop	r4
    282c:	3f 90       	pop	r3
    282e:	2f 90       	pop	r2
    2830:	08 95       	ret

00002832 <_ZN6I2Cdev8readByteEhhPhj>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
    return readBytes(devAddr, regAddr, 1, data, timeout);
    2836:	89 01       	movw	r16, r18
    2838:	9a 01       	movw	r18, r20
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN6I2Cdev9readBytesEhhhPhj>
}
    2840:	1f 91       	pop	r17
    2842:	0f 91       	pop	r16
    2844:	08 95       	ret

00002846 <_ZN6I2Cdev7readBitEhhhPhj>:
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {
    2846:	df 92       	push	r13
    2848:	ef 92       	push	r14
    284a:	ff 92       	push	r15
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	1f 92       	push	r1
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	d4 2e       	mov	r13, r20
    285c:	79 01       	movw	r14, r18
    285e:	98 01       	movw	r18, r16
    uint8_t b;
    uint8_t count = readByte(devAddr, regAddr, &b, timeout);
    2860:	ae 01       	movw	r20, r28
    2862:	4f 5f       	subi	r20, 0xFF	; 255
    2864:	5f 4f       	sbci	r21, 0xFF	; 255
    2866:	0e 94 19 14 	call	0x2832	; 0x2832 <_ZN6I2Cdev8readByteEhhPhj>
    *data = b & (1 << bitNum);
    286a:	61 e0       	ldi	r22, 0x01	; 1
    286c:	70 e0       	ldi	r23, 0x00	; 0
    286e:	ab 01       	movw	r20, r22
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <_ZN6I2Cdev7readBitEhhhPhj+0x30>
    2872:	44 0f       	add	r20, r20
    2874:	55 1f       	adc	r21, r21
    2876:	da 94       	dec	r13
    2878:	e2 f7       	brpl	.-8      	; 0x2872 <_ZN6I2Cdev7readBitEhhhPhj+0x2c>
    287a:	99 81       	ldd	r25, Y+1	; 0x01
    287c:	49 23       	and	r20, r25
    287e:	f7 01       	movw	r30, r14
    2880:	40 83       	st	Z, r20
    return count;
}
    2882:	0f 90       	pop	r0
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	ff 90       	pop	r15
    288e:	ef 90       	pop	r14
    2890:	df 90       	pop	r13
    2892:	08 95       	ret

00002894 <_ZN6I2Cdev8readBitsEhhhhPhj>:
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    2894:	cf 92       	push	r12
    2896:	df 92       	push	r13
    2898:	ef 92       	push	r14
    289a:	ff 92       	push	r15
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	1f 92       	push	r1
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	d4 2e       	mov	r13, r20
    28ac:	c2 2e       	mov	r12, r18
    28ae:	97 01       	movw	r18, r14
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    28b0:	ae 01       	movw	r20, r28
    28b2:	4f 5f       	subi	r20, 0xFF	; 255
    28b4:	5f 4f       	sbci	r21, 0xFF	; 255
    28b6:	0e 94 19 14 	call	0x2832	; 0x2832 <_ZN6I2Cdev8readByteEhhPhj>
    28ba:	88 23       	and	r24, r24
    28bc:	01 f1       	breq	.+64     	; 0x28fe <_ZN6I2Cdev8readBitsEhhhhPhj+0x6a>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    28be:	4d 2d       	mov	r20, r13
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	4c 19       	sub	r20, r12
    28c4:	51 09       	sbc	r21, r1
    28c6:	4f 5f       	subi	r20, 0xFF	; 255
    28c8:	5f 4f       	sbci	r21, 0xFF	; 255
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	9b 01       	movw	r18, r22
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <_ZN6I2Cdev8readBitsEhhhhPhj+0x42>
    28d2:	22 0f       	add	r18, r18
    28d4:	33 1f       	adc	r19, r19
    28d6:	ca 94       	dec	r12
    28d8:	e2 f7       	brpl	.-8      	; 0x28d2 <_ZN6I2Cdev8readBitsEhhhhPhj+0x3e>
    28da:	21 50       	subi	r18, 0x01	; 1
    28dc:	31 09       	sbc	r19, r1
    28de:	04 2e       	mov	r0, r20
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <_ZN6I2Cdev8readBitsEhhhhPhj+0x52>
    28e2:	22 0f       	add	r18, r18
    28e4:	33 1f       	adc	r19, r19
    28e6:	0a 94       	dec	r0
    28e8:	e2 f7       	brpl	.-8      	; 0x28e2 <_ZN6I2Cdev8readBitsEhhhhPhj+0x4e>
        b &= mask;
    28ea:	99 81       	ldd	r25, Y+1	; 0x01
    28ec:	29 23       	and	r18, r25
        b >>= (bitStart - length + 1);
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	02 c0       	rjmp	.+4      	; 0x28f6 <_ZN6I2Cdev8readBitsEhhhhPhj+0x62>
    28f2:	35 95       	asr	r19
    28f4:	27 95       	ror	r18
    28f6:	4a 95       	dec	r20
    28f8:	e2 f7       	brpl	.-8      	; 0x28f2 <_ZN6I2Cdev8readBitsEhhhhPhj+0x5e>
    28fa:	f8 01       	movw	r30, r16
    28fc:	20 83       	st	Z, r18
        *data = b;
    }
    return count;
}
    28fe:	0f 90       	pop	r0
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	ff 90       	pop	r15
    290a:	ef 90       	pop	r14
    290c:	df 90       	pop	r13
    290e:	cf 90       	pop	r12
    2910:	08 95       	ret

00002912 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    2912:	ef 92       	push	r14
    2914:	ff 92       	push	r15
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	1f 92       	push	r1
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	18 2f       	mov	r17, r24
    2926:	06 2f       	mov	r16, r22
    2928:	f4 2e       	mov	r15, r20
    292a:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    292c:	20 91 0b 01 	lds	r18, 0x010B
    2930:	30 91 0c 01 	lds	r19, 0x010C
    2934:	ae 01       	movw	r20, r28
    2936:	4f 5f       	subi	r20, 0xFF	; 255
    2938:	5f 4f       	sbci	r21, 0xFF	; 255
    293a:	0e 94 19 14 	call	0x2832	; 0x2832 <_ZN6I2Cdev8readByteEhhPhj>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    293e:	ee 20       	and	r14, r14
    2940:	59 f0       	breq	.+22     	; 0x2958 <_ZN6I2Cdev8writeBitEhhhh+0x46>
    2942:	21 e0       	ldi	r18, 0x01	; 1
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	a9 01       	movw	r20, r18
    2948:	02 c0       	rjmp	.+4      	; 0x294e <_ZN6I2Cdev8writeBitEhhhh+0x3c>
    294a:	44 0f       	add	r20, r20
    294c:	55 1f       	adc	r21, r21
    294e:	fa 94       	dec	r15
    2950:	e2 f7       	brpl	.-8      	; 0x294a <_ZN6I2Cdev8writeBitEhhhh+0x38>
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	48 2b       	or	r20, r24
    2956:	0b c0       	rjmp	.+22     	; 0x296e <_ZN6I2Cdev8writeBitEhhhh+0x5c>
    2958:	21 e0       	ldi	r18, 0x01	; 1
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	a9 01       	movw	r20, r18
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <_ZN6I2Cdev8writeBitEhhhh+0x52>
    2960:	44 0f       	add	r20, r20
    2962:	55 1f       	adc	r21, r21
    2964:	fa 94       	dec	r15
    2966:	e2 f7       	brpl	.-8      	; 0x2960 <_ZN6I2Cdev8writeBitEhhhh+0x4e>
    2968:	40 95       	com	r20
    296a:	99 81       	ldd	r25, Y+1	; 0x01
    296c:	49 23       	and	r20, r25
    296e:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
    2970:	60 2f       	mov	r22, r16
    2972:	81 2f       	mov	r24, r17
    2974:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
}
    2978:	0f 90       	pop	r0
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	ff 90       	pop	r15
    2984:	ef 90       	pop	r14
    2986:	08 95       	ret

00002988 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    2988:	df 92       	push	r13
    298a:	ef 92       	push	r14
    298c:	ff 92       	push	r15
    298e:	0f 93       	push	r16
    2990:	1f 93       	push	r17
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	1f 92       	push	r1
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	18 2f       	mov	r17, r24
    299e:	f6 2e       	mov	r15, r22
    29a0:	e4 2e       	mov	r14, r20
    29a2:	d2 2e       	mov	r13, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
    29a4:	20 91 0b 01 	lds	r18, 0x010B
    29a8:	30 91 0c 01 	lds	r19, 0x010C
    29ac:	ae 01       	movw	r20, r28
    29ae:	4f 5f       	subi	r20, 0xFF	; 255
    29b0:	5f 4f       	sbci	r21, 0xFF	; 255
    29b2:	0e 94 19 14 	call	0x2832	; 0x2832 <_ZN6I2Cdev8readByteEhhPhj>
    29b6:	88 23       	and	r24, r24
    29b8:	41 f1       	breq	.+80     	; 0x2a0a <_ZN6I2Cdev9writeBitsEhhhhh+0x82>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    29ba:	ee 2d       	mov	r30, r14
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	ed 19       	sub	r30, r13
    29c0:	f1 09       	sbc	r31, r1
    29c2:	31 96       	adiw	r30, 0x01	; 1
    29c4:	41 e0       	ldi	r20, 0x01	; 1
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	9a 01       	movw	r18, r20
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
    29cc:	22 0f       	add	r18, r18
    29ce:	33 1f       	adc	r19, r19
    29d0:	da 94       	dec	r13
    29d2:	e2 f7       	brpl	.-8      	; 0x29cc <_ZN6I2Cdev9writeBitsEhhhhh+0x44>
    29d4:	21 50       	subi	r18, 0x01	; 1
    29d6:	31 09       	sbc	r19, r1
    29d8:	0e 2e       	mov	r0, r30
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <_ZN6I2Cdev9writeBitsEhhhhh+0x58>
    29dc:	22 0f       	add	r18, r18
    29de:	33 1f       	adc	r19, r19
    29e0:	0a 94       	dec	r0
    29e2:	e2 f7       	brpl	.-8      	; 0x29dc <_ZN6I2Cdev9writeBitsEhhhhh+0x54>
        data <<= (bitStart - length + 1); // shift data into correct position
    29e4:	80 2f       	mov	r24, r16
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <_ZN6I2Cdev9writeBitsEhhhhh+0x66>
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	ea 95       	dec	r30
    29f0:	e2 f7       	brpl	.-8      	; 0x29ea <_ZN6I2Cdev9writeBitsEhhhhh+0x62>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
    29f2:	42 2f       	mov	r20, r18
    29f4:	40 95       	com	r20
    29f6:	99 81       	ldd	r25, Y+1	; 0x01
    29f8:	49 23       	and	r20, r25
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
    29fa:	28 23       	and	r18, r24
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
    29fc:	42 2b       	or	r20, r18
    29fe:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
    2a00:	6f 2d       	mov	r22, r15
    2a02:	81 2f       	mov	r24, r17
    2a04:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    2a08:	01 c0       	rjmp	.+2      	; 0x2a0c <_ZN6I2Cdev9writeBitsEhhhhh+0x84>
    } else {
        return false;
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    2a0c:	0f 90       	pop	r0
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	ff 90       	pop	r15
    2a18:	ef 90       	pop	r14
    2a1a:	df 90       	pop	r13
    2a1c:	08 95       	ret

00002a1e <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
    2a1e:	28 e6       	ldi	r18, 0x68	; 104
    2a20:	fc 01       	movw	r30, r24
    2a22:	20 83       	st	Z, r18
    2a24:	08 95       	ret

00002a26 <_ZN7MPU60507setRateEh>:
/** Set gyroscope sample rate divider.
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050::setRate(uint8_t rate) {
    2a26:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
    2a28:	69 e1       	ldi	r22, 0x19	; 25
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	80 81       	ld	r24, Z
    2a2e:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    2a32:	08 95       	ret

00002a34 <_ZN7MPU605020setExternalFrameSyncEh>:
/** Set external FSYNC configuration.
 * @see getExternalFrameSync()
 * @see MPU6050_RA_CONFIG
 * @param sync New FSYNC configuration value
 */
void MPU6050::setExternalFrameSync(uint8_t sync) {
    2a34:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
    2a36:	06 2f       	mov	r16, r22
    2a38:	23 e0       	ldi	r18, 0x03	; 3
    2a3a:	45 e0       	ldi	r20, 0x05	; 5
    2a3c:	6a e1       	ldi	r22, 0x1A	; 26
    2a3e:	fc 01       	movw	r30, r24
    2a40:	80 81       	ld	r24, Z
    2a42:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    2a46:	0f 91       	pop	r16
    2a48:	08 95       	ret

00002a4a <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode) {
    2a4a:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
    2a4c:	06 2f       	mov	r16, r22
    2a4e:	23 e0       	ldi	r18, 0x03	; 3
    2a50:	42 e0       	ldi	r20, 0x02	; 2
    2a52:	6a e1       	ldi	r22, 0x1A	; 26
    2a54:	fc 01       	movw	r30, r24
    2a56:	80 81       	ld	r24, Z
    2a58:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    2a5c:	0f 91       	pop	r16
    2a5e:	08 95       	ret

00002a60 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
    2a60:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
    2a62:	06 2f       	mov	r16, r22
    2a64:	22 e0       	ldi	r18, 0x02	; 2
    2a66:	44 e0       	ldi	r20, 0x04	; 4
    2a68:	6b e1       	ldi	r22, 0x1B	; 27
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	80 81       	ld	r24, Z
    2a6e:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    2a72:	0f 91       	pop	r16
    2a74:	08 95       	ret

00002a76 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
    2a76:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
    2a78:	06 2f       	mov	r16, r22
    2a7a:	22 e0       	ldi	r18, 0x02	; 2
    2a7c:	44 e0       	ldi	r20, 0x04	; 4
    2a7e:	6c e1       	ldi	r22, 0x1C	; 28
    2a80:	fc 01       	movw	r30, r24
    2a82:	80 81       	ld	r24, Z
    2a84:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    2a88:	0f 91       	pop	r16
    2a8a:	08 95       	ret

00002a8c <_ZN7MPU605027setMotionDetectionThresholdEh>:
/** Set motion detection event acceleration threshold.
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
    2a8c:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
    2a8e:	6f e1       	ldi	r22, 0x1F	; 31
    2a90:	fc 01       	movw	r30, r24
    2a92:	80 81       	ld	r24, Z
    2a94:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    2a98:	08 95       	ret

00002a9a <_ZN7MPU605026setMotionDetectionDurationEh>:
/** Set motion detection event duration threshold.
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050::setMotionDetectionDuration(uint8_t duration) {
    2a9a:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
    2a9c:	60 e2       	ldi	r22, 0x20	; 32
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	80 81       	ld	r24, Z
    2aa2:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    2aa6:	08 95       	ret

00002aa8 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:
/** Set zero motion detection event acceleration threshold.
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
    2aa8:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
    2aaa:	61 e2       	ldi	r22, 0x21	; 33
    2aac:	fc 01       	movw	r30, r24
    2aae:	80 81       	ld	r24, Z
    2ab0:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    2ab4:	08 95       	ret

00002ab6 <_ZN7MPU605030setZeroMotionDetectionDurationEh>:
/** Set zero motion detection event duration threshold.
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
    2ab6:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
    2ab8:	62 e2       	ldi	r22, 0x22	; 34
    2aba:	fc 01       	movw	r30, r24
    2abc:	80 81       	ld	r24, Z
    2abe:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    2ac2:	08 95       	ret

00002ac4 <_ZN7MPU605015setSlaveAddressEhh>:
 * @param address New address for specified slave
 * @see getSlaveAddress()
 * @see MPU6050_RA_I2C_SLV0_ADDR
 */
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
    if (num > 3) return;
    2ac4:	64 30       	cpi	r22, 0x04	; 4
    2ac6:	40 f4       	brcc	.+16     	; 0x2ad8 <_ZN7MPU605015setSlaveAddressEhh+0x14>
    2ac8:	fc 01       	movw	r30, r24
    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
    2aca:	26 2f       	mov	r18, r22
    2acc:	22 0f       	add	r18, r18
    2ace:	62 0f       	add	r22, r18
    2ad0:	6b 5d       	subi	r22, 0xDB	; 219
    2ad2:	80 81       	ld	r24, Z
    2ad4:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    2ad8:	08 95       	ret

00002ada <_ZN7MPU605013setIntEnabledEh>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050::setIntEnabled(uint8_t enabled) {
    2ada:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
    2adc:	68 e3       	ldi	r22, 0x38	; 56
    2ade:	fc 01       	movw	r30, r24
    2ae0:	80 81       	ld	r24, Z
    2ae2:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    2ae6:	08 95       	ret

00002ae8 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
    2ae8:	cf 93       	push	r28
    2aea:	df 93       	push	r29
    2aec:	ec 01       	movw	r28, r24
    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
    2aee:	20 91 0b 01 	lds	r18, 0x010B
    2af2:	30 91 0c 01 	lds	r19, 0x010C
    2af6:	ac 01       	movw	r20, r24
    2af8:	4f 5f       	subi	r20, 0xFF	; 255
    2afa:	5f 4f       	sbci	r21, 0xFF	; 255
    2afc:	6a e3       	ldi	r22, 0x3A	; 58
    2afe:	88 81       	ld	r24, Y
    2b00:	0e 94 19 14 	call	0x2832	; 0x2832 <_ZN6I2Cdev8readByteEhhPhj>
    return buffer[0];
}
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	08 95       	ret

00002b0c <_ZN7MPU605014setFIFOEnabledEb>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050::setFIFOEnabled(bool enabled) {
    2b0c:	26 2f       	mov	r18, r22
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
    2b0e:	46 e0       	ldi	r20, 0x06	; 6
    2b10:	6a e6       	ldi	r22, 0x6A	; 106
    2b12:	fc 01       	movw	r30, r24
    2b14:	80 81       	ld	r24, Z
    2b16:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN6I2Cdev8writeBitEhhhh>
    2b1a:	08 95       	ret

00002b1c <_ZN7MPU605023setI2CMasterModeEnabledEb>:
 * @param enabled New I2C Master Mode enabled status
 * @see getI2CMasterModeEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_EN_BIT
 */
void MPU6050::setI2CMasterModeEnabled(bool enabled) {
    2b1c:	26 2f       	mov	r18, r22
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
    2b1e:	45 e0       	ldi	r20, 0x05	; 5
    2b20:	6a e6       	ldi	r22, 0x6A	; 106
    2b22:	fc 01       	movw	r30, r24
    2b24:	80 81       	ld	r24, Z
    2b26:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN6I2Cdev8writeBitEhhhh>
    2b2a:	08 95       	ret

00002b2c <_ZN7MPU60509resetFIFOEv>:
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
    2b2c:	21 e0       	ldi	r18, 0x01	; 1
    2b2e:	42 e0       	ldi	r20, 0x02	; 2
    2b30:	6a e6       	ldi	r22, 0x6A	; 106
    2b32:	fc 01       	movw	r30, r24
    2b34:	80 81       	ld	r24, Z
    2b36:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN6I2Cdev8writeBitEhhhh>
    2b3a:	08 95       	ret

00002b3c <_ZN7MPU605014resetI2CMasterEv>:
 * This bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT
 */
void MPU6050::resetI2CMaster() {
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
    2b3c:	21 e0       	ldi	r18, 0x01	; 1
    2b3e:	41 e0       	ldi	r20, 0x01	; 1
    2b40:	6a e6       	ldi	r22, 0x6A	; 106
    2b42:	fc 01       	movw	r30, r24
    2b44:	80 81       	ld	r24, Z
    2b46:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN6I2Cdev8writeBitEhhhh>
    2b4a:	08 95       	ret

00002b4c <_ZN7MPU60505resetEv>:
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050::reset() {
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
    2b4c:	21 e0       	ldi	r18, 0x01	; 1
    2b4e:	47 e0       	ldi	r20, 0x07	; 7
    2b50:	6b e6       	ldi	r22, 0x6B	; 107
    2b52:	fc 01       	movw	r30, r24
    2b54:	80 81       	ld	r24, Z
    2b56:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN6I2Cdev8writeBitEhhhh>
    2b5a:	08 95       	ret

00002b5c <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
    2b5c:	26 2f       	mov	r18, r22
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
    2b5e:	46 e0       	ldi	r20, 0x06	; 6
    2b60:	6b e6       	ldi	r22, 0x6B	; 107
    2b62:	fc 01       	movw	r30, r24
    2b64:	80 81       	ld	r24, Z
    2b66:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN6I2Cdev8writeBitEhhhh>
    2b6a:	08 95       	ret

00002b6c <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
    2b6c:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
    2b6e:	06 2f       	mov	r16, r22
    2b70:	23 e0       	ldi	r18, 0x03	; 3
    2b72:	42 e0       	ldi	r20, 0x02	; 2
    2b74:	6b e6       	ldi	r22, 0x6B	; 107
    2b76:	fc 01       	movw	r30, r24
    2b78:	80 81       	ld	r24, Z
    2b7a:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    2b7e:	0f 91       	pop	r16
    2b80:	08 95       	ret

00002b82 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	ec 01       	movw	r28, r24
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	ce 01       	movw	r24, r28
    2b92:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    2b96:	60 e0       	ldi	r22, 0x00	; 0
    2b98:	ce 01       	movw	r24, r28
    2b9a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
    2b9e:	60 e0       	ldi	r22, 0x00	; 0
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_ZN7MPU605015setSleepEnabledEb>
}
    2ba6:	df 91       	pop	r29
    2ba8:	cf 91       	pop	r28
    2baa:	08 95       	ret

00002bac <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
    2bac:	0f 93       	push	r16
    2bae:	1f 93       	push	r17
    2bb0:	cf 93       	push	r28
    2bb2:	df 93       	push	r29
    2bb4:	ec 01       	movw	r28, r24
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
    2bb6:	00 91 0b 01 	lds	r16, 0x010B
    2bba:	10 91 0c 01 	lds	r17, 0x010C
    2bbe:	9c 01       	movw	r18, r24
    2bc0:	2f 5f       	subi	r18, 0xFF	; 255
    2bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc4:	42 e0       	ldi	r20, 0x02	; 2
    2bc6:	62 e7       	ldi	r22, 0x72	; 114
    2bc8:	88 81       	ld	r24, Y
    2bca:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN6I2Cdev9readBytesEhhhPhj>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
    2bce:	29 81       	ldd	r18, Y+1	; 0x01
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	32 2f       	mov	r19, r18
    2bd4:	22 27       	eor	r18, r18
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2bd8:	a9 01       	movw	r20, r18
    2bda:	48 2b       	or	r20, r24
    2bdc:	ca 01       	movw	r24, r20
    2bde:	df 91       	pop	r29
    2be0:	cf 91       	pop	r28
    2be2:	1f 91       	pop	r17
    2be4:	0f 91       	pop	r16
    2be6:	08 95       	ret

00002be8 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev::readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
    2be8:	0f 93       	push	r16
    2bea:	1f 93       	push	r17
    if(length > 0){
    2bec:	44 23       	and	r20, r20
    2bee:	59 f0       	breq	.+22     	; 0x2c06 <_ZN7MPU605012getFIFOBytesEPhh+0x1e>
    2bf0:	9b 01       	movw	r18, r22
    2bf2:	fc 01       	movw	r30, r24
        I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
    2bf4:	00 91 0b 01 	lds	r16, 0x010B
    2bf8:	10 91 0c 01 	lds	r17, 0x010C
    2bfc:	64 e7       	ldi	r22, 0x74	; 116
    2bfe:	80 81       	ld	r24, Z
    2c00:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN6I2Cdev9readBytesEhhhPhj>
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <_ZN7MPU605012getFIFOBytesEPhh+0x22>
    } else {
    	*data = 0;
    2c06:	fb 01       	movw	r30, r22
    2c08:	10 82       	st	Z, r1
    }
}
    2c0a:	1f 91       	pop	r17
    2c0c:	0f 91       	pop	r16
    2c0e:	08 95       	ret

00002c10 <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    2c10:	ef 92       	push	r14
    2c12:	ff 92       	push	r15
    2c14:	0f 93       	push	r16
    2c16:	1f 93       	push	r17
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
    2c1c:	ec 01       	movw	r28, r24
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
    2c1e:	e0 90 0b 01 	lds	r14, 0x010B
    2c22:	f0 90 0c 01 	lds	r15, 0x010C
    2c26:	8c 01       	movw	r16, r24
    2c28:	0f 5f       	subi	r16, 0xFF	; 255
    2c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2c:	26 e0       	ldi	r18, 0x06	; 6
    2c2e:	46 e0       	ldi	r20, 0x06	; 6
    2c30:	65 e7       	ldi	r22, 0x75	; 117
    2c32:	88 81       	ld	r24, Y
    2c34:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN6I2Cdev8readBitsEhhhhPhj>
    return buffer[0];
}
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	1f 91       	pop	r17
    2c40:	0f 91       	pop	r16
    2c42:	ff 90       	pop	r15
    2c44:	ef 90       	pop	r14
    2c46:	08 95       	ret

00002c48 <_ZN7MPU605014testConnectionEv>:
/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
    return getDeviceID() == 0x34;
    2c48:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN7MPU605011getDeviceIDEv>
    2c4c:	91 e0       	ldi	r25, 0x01	; 1
    2c4e:	84 33       	cpi	r24, 0x34	; 52
    2c50:	09 f0       	breq	.+2      	; 0x2c54 <_ZN7MPU605014testConnectionEv+0xc>
    2c52:	90 e0       	ldi	r25, 0x00	; 0
}
    2c54:	89 2f       	mov	r24, r25
    2c56:	08 95       	ret

00002c58 <_ZN7MPU605015getOTPBankValidEv>:

// ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========

// XG_OFFS_TC register

uint8_t MPU6050::getOTPBankValid() {
    2c58:	0f 93       	push	r16
    2c5a:	1f 93       	push	r17
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	ec 01       	movw	r28, r24
    I2Cdev::readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);
    2c62:	00 91 0b 01 	lds	r16, 0x010B
    2c66:	10 91 0c 01 	lds	r17, 0x010C
    2c6a:	9c 01       	movw	r18, r24
    2c6c:	2f 5f       	subi	r18, 0xFF	; 255
    2c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c70:	40 e0       	ldi	r20, 0x00	; 0
    2c72:	60 e0       	ldi	r22, 0x00	; 0
    2c74:	88 81       	ld	r24, Y
    2c76:	0e 94 23 14 	call	0x2846	; 0x2846 <_ZN6I2Cdev7readBitEhhhPhj>
    return buffer[0];
}
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	1f 91       	pop	r17
    2c82:	0f 91       	pop	r16
    2c84:	08 95       	ret

00002c86 <_ZN7MPU605015setOTPBankValidEb>:
void MPU6050::setOTPBankValid(bool enabled) {
    2c86:	26 2f       	mov	r18, r22
    I2Cdev::writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	80 81       	ld	r24, Z
    2c90:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN6I2Cdev8writeBitEhhhh>
    2c94:	08 95       	ret

00002c96 <_ZN7MPU605016getXGyroOffsetTCEv>:
}
int8_t MPU6050::getXGyroOffsetTC() {
    2c96:	ef 92       	push	r14
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	ec 01       	movw	r28, r24
    I2Cdev::readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
    2ca4:	e0 90 0b 01 	lds	r14, 0x010B
    2ca8:	f0 90 0c 01 	lds	r15, 0x010C
    2cac:	8c 01       	movw	r16, r24
    2cae:	0f 5f       	subi	r16, 0xFF	; 255
    2cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb2:	26 e0       	ldi	r18, 0x06	; 6
    2cb4:	46 e0       	ldi	r20, 0x06	; 6
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	88 81       	ld	r24, Y
    2cba:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN6I2Cdev8readBitsEhhhhPhj>
    return buffer[0];
}
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
    2cc8:	ff 90       	pop	r15
    2cca:	ef 90       	pop	r14
    2ccc:	08 95       	ret

00002cce <_ZN7MPU605016setXGyroOffsetTCEa>:
void MPU6050::setXGyroOffsetTC(int8_t offset) {
    2cce:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
    2cd0:	06 2f       	mov	r16, r22
    2cd2:	26 e0       	ldi	r18, 0x06	; 6
    2cd4:	46 e0       	ldi	r20, 0x06	; 6
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	fc 01       	movw	r30, r24
    2cda:	80 81       	ld	r24, Z
    2cdc:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    2ce0:	0f 91       	pop	r16
    2ce2:	08 95       	ret

00002ce4 <_ZN7MPU605016getYGyroOffsetTCEv>:

// YG_OFFS_TC register

int8_t MPU6050::getYGyroOffsetTC() {
    2ce4:	ef 92       	push	r14
    2ce6:	ff 92       	push	r15
    2ce8:	0f 93       	push	r16
    2cea:	1f 93       	push	r17
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	ec 01       	movw	r28, r24
    I2Cdev::readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
    2cf2:	e0 90 0b 01 	lds	r14, 0x010B
    2cf6:	f0 90 0c 01 	lds	r15, 0x010C
    2cfa:	8c 01       	movw	r16, r24
    2cfc:	0f 5f       	subi	r16, 0xFF	; 255
    2cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2d00:	26 e0       	ldi	r18, 0x06	; 6
    2d02:	46 e0       	ldi	r20, 0x06	; 6
    2d04:	61 e0       	ldi	r22, 0x01	; 1
    2d06:	88 81       	ld	r24, Y
    2d08:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN6I2Cdev8readBitsEhhhhPhj>
    return buffer[0];
}
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	df 91       	pop	r29
    2d10:	cf 91       	pop	r28
    2d12:	1f 91       	pop	r17
    2d14:	0f 91       	pop	r16
    2d16:	ff 90       	pop	r15
    2d18:	ef 90       	pop	r14
    2d1a:	08 95       	ret

00002d1c <_ZN7MPU605016setYGyroOffsetTCEa>:
void MPU6050::setYGyroOffsetTC(int8_t offset) {
    2d1c:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
    2d1e:	06 2f       	mov	r16, r22
    2d20:	26 e0       	ldi	r18, 0x06	; 6
    2d22:	46 e0       	ldi	r20, 0x06	; 6
    2d24:	61 e0       	ldi	r22, 0x01	; 1
    2d26:	fc 01       	movw	r30, r24
    2d28:	80 81       	ld	r24, Z
    2d2a:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    2d2e:	0f 91       	pop	r16
    2d30:	08 95       	ret

00002d32 <_ZN7MPU605016getZGyroOffsetTCEv>:

// ZG_OFFS_TC register

int8_t MPU6050::getZGyroOffsetTC() {
    2d32:	ef 92       	push	r14
    2d34:	ff 92       	push	r15
    2d36:	0f 93       	push	r16
    2d38:	1f 93       	push	r17
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	ec 01       	movw	r28, r24
    I2Cdev::readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);
    2d40:	e0 90 0b 01 	lds	r14, 0x010B
    2d44:	f0 90 0c 01 	lds	r15, 0x010C
    2d48:	8c 01       	movw	r16, r24
    2d4a:	0f 5f       	subi	r16, 0xFF	; 255
    2d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4e:	26 e0       	ldi	r18, 0x06	; 6
    2d50:	46 e0       	ldi	r20, 0x06	; 6
    2d52:	62 e0       	ldi	r22, 0x02	; 2
    2d54:	88 81       	ld	r24, Y
    2d56:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN6I2Cdev8readBitsEhhhhPhj>
    return buffer[0];
}
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	08 95       	ret

00002d6a <_ZN7MPU605016setZGyroOffsetTCEa>:
void MPU6050::setZGyroOffsetTC(int8_t offset) {
    2d6a:	0f 93       	push	r16
    I2Cdev::writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);
    2d6c:	06 2f       	mov	r16, r22
    2d6e:	26 e0       	ldi	r18, 0x06	; 6
    2d70:	46 e0       	ldi	r20, 0x06	; 6
    2d72:	62 e0       	ldi	r22, 0x02	; 2
    2d74:	fc 01       	movw	r30, r24
    2d76:	80 81       	ld	r24, Z
    2d78:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN6I2Cdev9writeBitsEhhhhh>
}
    2d7c:	0f 91       	pop	r16
    2d7e:	08 95       	ret

00002d80 <_ZN7MPU605015setZAccelOffsetEi>:

int16_t MPU6050::getZAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
    2d80:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
    2d82:	6a e0       	ldi	r22, 0x0A	; 10
    2d84:	fc 01       	movw	r30, r24
    2d86:	80 81       	ld	r24, Z
    2d88:	0e 94 52 13 	call	0x26a4	; 0x26a4 <_ZN6I2Cdev9writeWordEhhj>
    2d8c:	08 95       	ret

00002d8e <_ZN7MPU605014setXGyroOffsetEi>:

int16_t MPU6050::getXGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
    2d8e:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
    2d90:	63 e1       	ldi	r22, 0x13	; 19
    2d92:	fc 01       	movw	r30, r24
    2d94:	80 81       	ld	r24, Z
    2d96:	0e 94 52 13 	call	0x26a4	; 0x26a4 <_ZN6I2Cdev9writeWordEhhj>
    2d9a:	08 95       	ret

00002d9c <_ZN7MPU605014setYGyroOffsetEi>:

int16_t MPU6050::getYGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
    2d9c:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
    2d9e:	65 e1       	ldi	r22, 0x15	; 21
    2da0:	fc 01       	movw	r30, r24
    2da2:	80 81       	ld	r24, Z
    2da4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <_ZN6I2Cdev9writeWordEhhj>
    2da8:	08 95       	ret

00002daa <_ZN7MPU605014setZGyroOffsetEi>:

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
    2daa:	ab 01       	movw	r20, r22
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
    2dac:	67 e1       	ldi	r22, 0x17	; 23
    2dae:	fc 01       	movw	r30, r24
    2db0:	80 81       	ld	r24, Z
    2db2:	0e 94 52 13 	call	0x26a4	; 0x26a4 <_ZN6I2Cdev9writeWordEhhj>
    2db6:	08 95       	ret

00002db8 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
    2db8:	26 2f       	mov	r18, r22
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
    2dba:	47 e0       	ldi	r20, 0x07	; 7
    2dbc:	6a e6       	ldi	r22, 0x6A	; 106
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	80 81       	ld	r24, Z
    2dc2:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN6I2Cdev8writeBitEhhhh>
    2dc6:	08 95       	ret

00002dc8 <_ZN7MPU60508resetDMPEv>:
}
void MPU6050::resetDMP() {
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
    2dc8:	21 e0       	ldi	r18, 0x01	; 1
    2dca:	43 e0       	ldi	r20, 0x03	; 3
    2dcc:	6a e6       	ldi	r22, 0x6A	; 106
    2dce:	fc 01       	movw	r30, r24
    2dd0:	80 81       	ld	r24, Z
    2dd2:	0e 94 89 14 	call	0x2912	; 0x2912 <_ZN6I2Cdev8writeBitEhhhh>
    2dd6:	08 95       	ret

00002dd8 <_ZN7MPU605013setMemoryBankEhbb>:
}

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
    bank &= 0x1F;
    2dd8:	6f 71       	andi	r22, 0x1F	; 31
    if (userBank) bank |= 0x20;
    2dda:	21 11       	cpse	r18, r1
    2ddc:	60 62       	ori	r22, 0x20	; 32
    if (prefetchEnabled) bank |= 0x40;
    2dde:	41 11       	cpse	r20, r1
    2de0:	60 64       	ori	r22, 0x40	; 64
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
    2de2:	46 2f       	mov	r20, r22
    2de4:	6d e6       	ldi	r22, 0x6D	; 109
    2de6:	fc 01       	movw	r30, r24
    2de8:	80 81       	ld	r24, Z
    2dea:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    2dee:	08 95       	ret

00002df0 <_ZN7MPU605021setMemoryStartAddressEh>:
}

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
    2df0:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
    2df2:	6e e6       	ldi	r22, 0x6E	; 110
    2df4:	fc 01       	movw	r30, r24
    2df6:	80 81       	ld	r24, Z
    2df8:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    2dfc:	08 95       	ret

00002dfe <_ZN7MPU605014readMemoryByteEv>:
}

// MEM_R_W register

uint8_t MPU6050::readMemoryByte() {
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	ec 01       	movw	r28, r24
    I2Cdev::readByte(devAddr, MPU6050_RA_MEM_R_W, buffer);
    2e04:	20 91 0b 01 	lds	r18, 0x010B
    2e08:	30 91 0c 01 	lds	r19, 0x010C
    2e0c:	ac 01       	movw	r20, r24
    2e0e:	4f 5f       	subi	r20, 0xFF	; 255
    2e10:	5f 4f       	sbci	r21, 0xFF	; 255
    2e12:	6f e6       	ldi	r22, 0x6F	; 111
    2e14:	88 81       	ld	r24, Y
    2e16:	0e 94 19 14 	call	0x2832	; 0x2832 <_ZN6I2Cdev8readByteEhhPhj>
    return buffer[0];
}
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	df 91       	pop	r29
    2e1e:	cf 91       	pop	r28
    2e20:	08 95       	ret

00002e22 <_ZN7MPU605015readMemoryBlockEPhjhh>:
void MPU6050::writeMemoryByte(uint8_t data) {
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
    2e22:	4f 92       	push	r4
    2e24:	5f 92       	push	r5
    2e26:	6f 92       	push	r6
    2e28:	7f 92       	push	r7
    2e2a:	8f 92       	push	r8
    2e2c:	9f 92       	push	r9
    2e2e:	af 92       	push	r10
    2e30:	bf 92       	push	r11
    2e32:	cf 92       	push	r12
    2e34:	df 92       	push	r13
    2e36:	ef 92       	push	r14
    2e38:	ff 92       	push	r15
    2e3a:	0f 93       	push	r16
    2e3c:	1f 93       	push	r17
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29
    2e42:	6c 01       	movw	r12, r24
    2e44:	5b 01       	movw	r10, r22
    2e46:	7a 01       	movw	r14, r20
    2e48:	52 2e       	mov	r5, r18
    2e4a:	60 2e       	mov	r6, r16
    setMemoryBank(bank);
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	40 e0       	ldi	r20, 0x00	; 0
    2e50:	65 2d       	mov	r22, r5
    2e52:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
    2e56:	60 2f       	mov	r22, r16
    2e58:	c6 01       	movw	r24, r12
    2e5a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
    2e5e:	e1 14       	cp	r14, r1
    2e60:	f1 04       	cpc	r15, r1
    2e62:	d9 f1       	breq	.+118    	; 0x2eda <_ZN7MPU605015readMemoryBlockEPhjhh+0xb8>
    2e64:	c0 e0       	ldi	r28, 0x00	; 0
    2e66:	d0 e0       	ldi	r29, 0x00	; 0
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
    2e68:	68 94       	set
    2e6a:	44 24       	eor	r4, r4
    2e6c:	44 f8       	bld	r4, 4

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    2e6e:	81 2c       	mov	r8, r1
    2e70:	99 24       	eor	r9, r9
    2e72:	93 94       	inc	r9
    for (uint16_t i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
    2e74:	ce 01       	movw	r24, r28
    2e76:	40 96       	adiw	r24, 0x10	; 16
    2e78:	e8 16       	cp	r14, r24
    2e7a:	f9 06       	cpc	r15, r25
    2e7c:	18 f4       	brcc	.+6      	; 0x2e84 <_ZN7MPU605015readMemoryBlockEPhjhh+0x62>
    2e7e:	7e 2c       	mov	r7, r14
    2e80:	7c 1a       	sub	r7, r28
    2e82:	01 c0       	rjmp	.+2      	; 0x2e86 <_ZN7MPU605015readMemoryBlockEPhjhh+0x64>
    setMemoryBank(bank);
    setMemoryStartAddress(address);
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
    2e84:	74 2c       	mov	r7, r4

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    2e86:	87 2d       	mov	r24, r7
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	94 01       	movw	r18, r8
    2e8c:	26 19       	sub	r18, r6
    2e8e:	31 09       	sbc	r19, r1
    2e90:	28 17       	cp	r18, r24
    2e92:	39 07       	cpc	r19, r25
    2e94:	14 f4       	brge	.+4      	; 0x2e9a <_ZN7MPU605015readMemoryBlockEPhjhh+0x78>
    2e96:	76 2c       	mov	r7, r6
    2e98:	71 94       	neg	r7

        // read the chunk of data as specified
        I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
    2e9a:	00 91 0b 01 	lds	r16, 0x010B
    2e9e:	10 91 0c 01 	lds	r17, 0x010C
    2ea2:	95 01       	movw	r18, r10
    2ea4:	2c 0f       	add	r18, r28
    2ea6:	3d 1f       	adc	r19, r29
    2ea8:	47 2d       	mov	r20, r7
    2eaa:	6f e6       	ldi	r22, 0x6F	; 111
    2eac:	f6 01       	movw	r30, r12
    2eae:	80 81       	ld	r24, Z
    2eb0:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN6I2Cdev9readBytesEhhhPhj>
        
        // increase byte index by [chunkSize]
        i += chunkSize;
    2eb4:	c7 0d       	add	r28, r7
    2eb6:	d1 1d       	adc	r29, r1

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
    2eb8:	ce 15       	cp	r28, r14
    2eba:	df 05       	cpc	r29, r15
    2ebc:	70 f4       	brcc	.+28     	; 0x2eda <_ZN7MPU605015readMemoryBlockEPhjhh+0xb8>
        
        // increase byte index by [chunkSize]
        i += chunkSize;

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
    2ebe:	67 0c       	add	r6, r7

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
            if (address == 0) bank++;
    2ec0:	09 f4       	brne	.+2      	; 0x2ec4 <_ZN7MPU605015readMemoryBlockEPhjhh+0xa2>
    2ec2:	53 94       	inc	r5
            setMemoryBank(bank);
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	40 e0       	ldi	r20, 0x00	; 0
    2ec8:	65 2d       	mov	r22, r5
    2eca:	c6 01       	movw	r24, r12
    2ecc:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
    2ed0:	66 2d       	mov	r22, r6
    2ed2:	c6 01       	movw	r24, r12
    2ed4:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <_ZN7MPU605021setMemoryStartAddressEh>
    2ed8:	cd cf       	rjmp	.-102    	; 0x2e74 <_ZN7MPU605015readMemoryBlockEPhjhh+0x52>
        }
    }
}
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	1f 91       	pop	r17
    2ee0:	0f 91       	pop	r16
    2ee2:	ff 90       	pop	r15
    2ee4:	ef 90       	pop	r14
    2ee6:	df 90       	pop	r13
    2ee8:	cf 90       	pop	r12
    2eea:	bf 90       	pop	r11
    2eec:	af 90       	pop	r10
    2eee:	9f 90       	pop	r9
    2ef0:	8f 90       	pop	r8
    2ef2:	7f 90       	pop	r7
    2ef4:	6f 90       	pop	r6
    2ef6:	5f 90       	pop	r5
    2ef8:	4f 90       	pop	r4
    2efa:	08 95       	ret

00002efc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>:
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
    2efc:	2f 92       	push	r2
    2efe:	3f 92       	push	r3
    2f00:	4f 92       	push	r4
    2f02:	5f 92       	push	r5
    2f04:	6f 92       	push	r6
    2f06:	7f 92       	push	r7
    2f08:	8f 92       	push	r8
    2f0a:	9f 92       	push	r9
    2f0c:	af 92       	push	r10
    2f0e:	bf 92       	push	r11
    2f10:	cf 92       	push	r12
    2f12:	df 92       	push	r13
    2f14:	ef 92       	push	r14
    2f16:	ff 92       	push	r15
    2f18:	0f 93       	push	r16
    2f1a:	1f 93       	push	r17
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x26>
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x28>
    2f24:	1f 92       	push	r1
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
    2f2a:	5c 01       	movw	r10, r24
    2f2c:	3b 01       	movw	r6, r22
    2f2e:	4a 01       	movw	r8, r20
    2f30:	29 83       	std	Y+1, r18	; 0x01
    2f32:	50 2e       	mov	r5, r16
    2f34:	eb 82       	std	Y+3, r14	; 0x03
    2f36:	ca 82       	std	Y+2, r12	; 0x02
    setMemoryBank(bank);
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	69 81       	ldd	r22, Y+1	; 0x01
    2f3e:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
    2f42:	60 2f       	mov	r22, r16
    2f44:	c5 01       	movw	r24, r10
    2f46:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer;
    uint8_t *progBuffer=0;
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    2f4a:	eb 80       	ldd	r14, Y+3	; 0x03
    2f4c:	ee 20       	and	r14, r14
    2f4e:	29 f0       	breq	.+10     	; 0x2f5a <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x5e>
    2f50:	80 e1       	ldi	r24, 0x10	; 16
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 b5 29 	call	0x536a	; 0x536a <malloc>
    2f58:	1c 01       	movw	r2, r24
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    2f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5c:	88 23       	and	r24, r24
    2f5e:	31 f0       	breq	.+12     	; 0x2f6c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x70>
    2f60:	80 e1       	ldi	r24, 0x10	; 16
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 b5 29 	call	0x536a	; 0x536a <malloc>
    2f68:	7c 01       	movw	r14, r24
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x74>
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
    setMemoryBank(bank);
    setMemoryStartAddress(address);
    uint8_t chunkSize;
    uint8_t *verifyBuffer;
    uint8_t *progBuffer=0;
    2f6c:	e1 2c       	mov	r14, r1
    2f6e:	f1 2c       	mov	r15, r1
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    for (i = 0; i < dataSize;) {
    2f70:	81 14       	cp	r8, r1
    2f72:	91 04       	cpc	r9, r1
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x7c>
    2f76:	86 c0       	rjmp	.+268    	; 0x3084 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x188>
    2f78:	1d 82       	std	Y+5, r1	; 0x05
    2f7a:	1c 82       	std	Y+4, r1	; 0x04

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    2f7c:	c1 2c       	mov	r12, r1
    2f7e:	dd 24       	eor	r13, r13
    2f80:	d3 94       	inc	r13
    for (i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
    2f82:	8c 81       	ldd	r24, Y+4	; 0x04
    2f84:	9d 81       	ldd	r25, Y+5	; 0x05
    2f86:	40 96       	adiw	r24, 0x10	; 16
    2f88:	88 16       	cp	r8, r24
    2f8a:	99 06       	cpc	r9, r25
    2f8c:	20 f4       	brcc	.+8      	; 0x2f96 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x9a>
    2f8e:	48 2c       	mov	r4, r8
    2f90:	9c 81       	ldd	r25, Y+4	; 0x04
    2f92:	49 1a       	sub	r4, r25
    2f94:	03 c0       	rjmp	.+6      	; 0x2f9c <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xa0>
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
    for (i = 0; i < dataSize;) {
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
    2f96:	68 94       	set
    2f98:	44 24       	eor	r4, r4
    2f9a:	44 f8       	bld	r4, 4

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
    2f9c:	84 2d       	mov	r24, r4
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	96 01       	movw	r18, r12
    2fa2:	25 19       	sub	r18, r5
    2fa4:	31 09       	sbc	r19, r1
    2fa6:	28 17       	cp	r18, r24
    2fa8:	39 07       	cpc	r19, r25
    2faa:	14 f4       	brge	.+4      	; 0x2fb0 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xb4>
    2fac:	45 2c       	mov	r4, r5
    2fae:	41 94       	neg	r4
        
        if (useProgMem) {
    2fb0:	ea 81       	ldd	r30, Y+2	; 0x02
    2fb2:	ee 23       	and	r30, r30
    2fb4:	a9 f0       	breq	.+42     	; 0x2fe0 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xe4>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
    2fb6:	44 20       	and	r4, r4
    2fb8:	b9 f0       	breq	.+46     	; 0x2fe8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xec>
    2fba:	ec 81       	ldd	r30, Y+4	; 0x04
    2fbc:	fd 81       	ldd	r31, Y+5	; 0x05
    2fbe:	e6 0d       	add	r30, r6
    2fc0:	f7 1d       	adc	r31, r7
    2fc2:	d7 01       	movw	r26, r14
    2fc4:	2f ef       	ldi	r18, 0xFF	; 255
    2fc6:	24 0d       	add	r18, r4
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	2f 5f       	subi	r18, 0xFF	; 255
    2fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fce:	2e 0d       	add	r18, r14
    2fd0:	3f 1d       	adc	r19, r15
    2fd2:	84 91       	lpm	r24, Z
    2fd4:	8d 93       	st	X+, r24
    2fd6:	31 96       	adiw	r30, 0x01	; 1
    2fd8:	a2 17       	cp	r26, r18
    2fda:	b3 07       	cpc	r27, r19
    2fdc:	d1 f7       	brne	.-12     	; 0x2fd2 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xd6>
    2fde:	04 c0       	rjmp	.+8      	; 0x2fe8 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0xec>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
    2fe0:	ec 80       	ldd	r14, Y+4	; 0x04
    2fe2:	fd 80       	ldd	r15, Y+5	; 0x05
    2fe4:	e6 0c       	add	r14, r6
    2fe6:	f7 1c       	adc	r15, r7
        }

        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
    2fe8:	97 01       	movw	r18, r14
    2fea:	44 2d       	mov	r20, r4
    2fec:	6f e6       	ldi	r22, 0x6F	; 111
    2fee:	f5 01       	movw	r30, r10
    2ff0:	80 81       	ld	r24, Z
    2ff2:	0e 94 cd 12 	call	0x259a	; 0x259a <_ZN6I2Cdev10writeBytesEhhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
    2ff6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ff8:	ff 23       	and	r31, r31
    2ffa:	59 f1       	breq	.+86     	; 0x3052 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x156>
    2ffc:	21 14       	cp	r2, r1
    2ffe:	31 04       	cpc	r3, r1
    3000:	41 f1       	breq	.+80     	; 0x3052 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x156>
            setMemoryBank(bank);
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	40 e0       	ldi	r20, 0x00	; 0
    3006:	69 81       	ldd	r22, Y+1	; 0x01
    3008:	c5 01       	movw	r24, r10
    300a:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
    300e:	65 2d       	mov	r22, r5
    3010:	c5 01       	movw	r24, r10
    3012:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <_ZN7MPU605021setMemoryStartAddressEh>
            I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
    3016:	00 91 0b 01 	lds	r16, 0x010B
    301a:	10 91 0c 01 	lds	r17, 0x010C
    301e:	91 01       	movw	r18, r2
    3020:	44 2d       	mov	r20, r4
    3022:	6f e6       	ldi	r22, 0x6F	; 111
    3024:	f5 01       	movw	r30, r10
    3026:	80 81       	ld	r24, Z
    3028:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN6I2Cdev9readBytesEhhhPhj>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
    302c:	44 2d       	mov	r20, r4
    302e:	50 e0       	ldi	r21, 0x00	; 0
    3030:	b1 01       	movw	r22, r2
    3032:	c7 01       	movw	r24, r14
    3034:	0e 94 ac 2b 	call	0x5758	; 0x5758 <memcmp>
    3038:	89 2b       	or	r24, r25
    303a:	59 f0       	breq	.+22     	; 0x3052 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x156>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
    303c:	c1 01       	movw	r24, r2
    303e:	0e 94 4a 2a 	call	0x5494	; 0x5494 <free>
                if (useProgMem) free(progBuffer);
    3042:	fa 81       	ldd	r31, Y+2	; 0x02
    3044:	ff 23       	and	r31, r31
    3046:	61 f1       	breq	.+88     	; 0x30a0 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1a4>
    3048:	c7 01       	movw	r24, r14
    304a:	0e 94 4a 2a 	call	0x5494	; 0x5494 <free>
                return false; // uh oh.
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	2a c0       	rjmp	.+84     	; 0x30a6 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1aa>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
    3052:	8c 81       	ldd	r24, Y+4	; 0x04
    3054:	9d 81       	ldd	r25, Y+5	; 0x05
    3056:	84 0d       	add	r24, r4
    3058:	91 1d       	adc	r25, r1
    305a:	9d 83       	std	Y+5, r25	; 0x05
    305c:	8c 83       	std	Y+4, r24	; 0x04

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
    305e:	88 15       	cp	r24, r8
    3060:	99 05       	cpc	r25, r9
    3062:	80 f4       	brcc	.+32     	; 0x3084 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x188>

        // increase byte index by [chunkSize]
        i += chunkSize;

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
    3064:	54 0c       	add	r5, r4

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
            if (address == 0) bank++;
    3066:	19 f4       	brne	.+6      	; 0x306e <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x172>
    3068:	99 81       	ldd	r25, Y+1	; 0x01
    306a:	9f 5f       	subi	r25, 0xFF	; 255
    306c:	99 83       	std	Y+1, r25	; 0x01
            setMemoryBank(bank);
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	40 e0       	ldi	r20, 0x00	; 0
    3072:	69 81       	ldd	r22, Y+1	; 0x01
    3074:	c5 01       	movw	r24, r10
    3076:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
    307a:	65 2d       	mov	r22, r5
    307c:	c5 01       	movw	r24, r10
    307e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <_ZN7MPU605021setMemoryStartAddressEh>
    3082:	7f cf       	rjmp	.-258    	; 0x2f82 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x86>
        }
    }
    if (verify) free(verifyBuffer);
    3084:	eb 81       	ldd	r30, Y+3	; 0x03
    3086:	ee 23       	and	r30, r30
    3088:	19 f0       	breq	.+6      	; 0x3090 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x194>
    308a:	c1 01       	movw	r24, r2
    308c:	0e 94 4a 2a 	call	0x5494	; 0x5494 <free>
    if (useProgMem) free(progBuffer);
    3090:	fa 81       	ldd	r31, Y+2	; 0x02
    3092:	ff 23       	and	r31, r31
    3094:	39 f0       	breq	.+14     	; 0x30a4 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1a8>
    3096:	c7 01       	movw	r24, r14
    3098:	0e 94 4a 2a 	call	0x5494	; 0x5494 <free>
    return true;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	03 c0       	rjmp	.+6      	; 0x30a6 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1aa>
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
                if (useProgMem) free(progBuffer);
                return false; // uh oh.
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	01 c0       	rjmp	.+2      	; 0x30a6 <_ZN7MPU605016writeMemoryBlockEPKhjhhbb+0x1aa>
            setMemoryStartAddress(address);
        }
    }
    if (verify) free(verifyBuffer);
    if (useProgMem) free(progBuffer);
    return true;
    30a4:	81 e0       	ldi	r24, 0x01	; 1
}
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	1f 91       	pop	r17
    30b6:	0f 91       	pop	r16
    30b8:	ff 90       	pop	r15
    30ba:	ef 90       	pop	r14
    30bc:	df 90       	pop	r13
    30be:	cf 90       	pop	r12
    30c0:	bf 90       	pop	r11
    30c2:	af 90       	pop	r10
    30c4:	9f 90       	pop	r9
    30c6:	8f 90       	pop	r8
    30c8:	7f 90       	pop	r7
    30ca:	6f 90       	pop	r6
    30cc:	5f 90       	pop	r5
    30ce:	4f 90       	pop	r4
    30d0:	3f 90       	pop	r3
    30d2:	2f 90       	pop	r2
    30d4:	08 95       	ret

000030d6 <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
    30d6:	cf 92       	push	r12
    30d8:	ef 92       	push	r14
    30da:	0f 93       	push	r16
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
    30dc:	cc 24       	eor	r12, r12
    30de:	c3 94       	inc	r12
    30e0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
}
    30e4:	0f 91       	pop	r16
    30e6:	ef 90       	pop	r14
    30e8:	cf 90       	pop	r12
    30ea:	08 95       	ret

000030ec <_ZN7MPU605024writeDMPConfigurationSetEPKhjb>:
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
    30ec:	2f 92       	push	r2
    30ee:	3f 92       	push	r3
    30f0:	4f 92       	push	r4
    30f2:	5f 92       	push	r5
    30f4:	6f 92       	push	r6
    30f6:	7f 92       	push	r7
    30f8:	8f 92       	push	r8
    30fa:	9f 92       	push	r9
    30fc:	af 92       	push	r10
    30fe:	bf 92       	push	r11
    3100:	cf 92       	push	r12
    3102:	ef 92       	push	r14
    3104:	ff 92       	push	r15
    3106:	0f 93       	push	r16
    3108:	1f 93       	push	r17
    310a:	cf 93       	push	r28
    310c:	df 93       	push	r29
    310e:	1c 01       	movw	r2, r24
    3110:	4b 01       	movw	r8, r22
    3112:	2a 01       	movw	r4, r20
    3114:	f2 2e       	mov	r15, r18
    uint8_t *progBuffer = 0;
	uint8_t success, special;
    uint16_t i, j;
    if (useProgMem) {
    3116:	22 23       	and	r18, r18
    3118:	09 f4       	brne	.+2      	; 0x311c <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x30>
    311a:	7e c0       	rjmp	.+252    	; 0x3218 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x12c>
        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary
    311c:	88 e0       	ldi	r24, 0x08	; 8
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	0e 94 b5 29 	call	0x536a	; 0x536a <malloc>
    3124:	3c 01       	movw	r6, r24
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
    3126:	41 14       	cp	r4, r1
    3128:	51 04       	cpc	r5, r1
    312a:	19 f4       	brne	.+6      	; 0x3132 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x46>
    312c:	6c c0       	rjmp	.+216    	; 0x3206 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x11a>
}
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
}
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {
    uint8_t *progBuffer = 0;
    312e:	61 2c       	mov	r6, r1
    3130:	71 2c       	mov	r7, r1
    3132:	c0 e0       	ldi	r28, 0x00	; 0
    3134:	d0 e0       	ldi	r29, 0x00	; 0

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
        if (useProgMem) {
    3136:	ff 20       	and	r15, r15
    3138:	a9 f0       	breq	.+42     	; 0x3164 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x78>
            bank = pgm_read_byte(data + i++);
    313a:	f4 01       	movw	r30, r8
    313c:	ec 0f       	add	r30, r28
    313e:	fd 1f       	adc	r31, r29
    3140:	14 91       	lpm	r17, Z
    3142:	fe 01       	movw	r30, r28
    3144:	31 96       	adiw	r30, 0x01	; 1
            offset = pgm_read_byte(data + i++);
    3146:	e8 0d       	add	r30, r8
    3148:	f9 1d       	adc	r31, r9
    314a:	04 91       	lpm	r16, Z
            length = pgm_read_byte(data + i++);
    314c:	5e 01       	movw	r10, r28
    314e:	83 e0       	ldi	r24, 0x03	; 3
    3150:	a8 0e       	add	r10, r24
    3152:	b1 1c       	adc	r11, r1
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
        if (useProgMem) {
            bank = pgm_read_byte(data + i++);
            offset = pgm_read_byte(data + i++);
    3154:	fe 01       	movw	r30, r28
    3156:	32 96       	adiw	r30, 0x02	; 2
            length = pgm_read_byte(data + i++);
    3158:	e8 0d       	add	r30, r8
    315a:	f9 1d       	adc	r31, r9
    315c:	e4 90       	lpm	r14, Z
            offset = data[i++];
            length = data[i++];
        }

        // write data or perform special action
        if (length > 0) {
    315e:	e1 10       	cpse	r14, r1
    3160:	0e c0       	rjmp	.+28     	; 0x317e <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x92>
    3162:	5f c0       	rjmp	.+190    	; 0x3222 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x136>
        if (useProgMem) {
            bank = pgm_read_byte(data + i++);
            offset = pgm_read_byte(data + i++);
            length = pgm_read_byte(data + i++);
        } else {
            bank = data[i++];
    3164:	f4 01       	movw	r30, r8
    3166:	ec 0f       	add	r30, r28
    3168:	fd 1f       	adc	r31, r29
    316a:	10 81       	ld	r17, Z
            offset = data[i++];
    316c:	01 81       	ldd	r16, Z+1	; 0x01
            length = data[i++];
    316e:	5e 01       	movw	r10, r28
    3170:	83 e0       	ldi	r24, 0x03	; 3
    3172:	a8 0e       	add	r10, r24
    3174:	b1 1c       	adc	r11, r1
    3176:	e2 80       	ldd	r14, Z+2	; 0x02
        }

        // write data or perform special action
        if (length > 0) {
    3178:	e1 10       	cpse	r14, r1
    317a:	1c c0       	rjmp	.+56     	; 0x31b4 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xc8>
    317c:	58 c0       	rjmp	.+176    	; 0x322e <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x142>
            Serial.print(", offset ");
            Serial.print(offset);
            Serial.print(", length=");
            Serial.println(length);*/
            if (useProgMem) {
                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);
    317e:	e2 e0       	ldi	r30, 0x02	; 2
    3180:	ee 15       	cp	r30, r14
    3182:	30 f4       	brcc	.+12     	; 0x3190 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xa4>
    3184:	6e 2d       	mov	r22, r14
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	c3 01       	movw	r24, r6
    318a:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <realloc>
    318e:	3c 01       	movw	r6, r24
                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);
    3190:	2e 2d       	mov	r18, r14
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	21 15       	cp	r18, r1
    3196:	31 05       	cpc	r19, r1
    3198:	81 f0       	breq	.+32     	; 0x31ba <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xce>
    319a:	f4 01       	movw	r30, r8
    319c:	ea 0d       	add	r30, r10
    319e:	fb 1d       	adc	r31, r11
    31a0:	d3 01       	movw	r26, r6
    31a2:	26 0d       	add	r18, r6
    31a4:	37 1d       	adc	r19, r7
    31a6:	84 91       	lpm	r24, Z
    31a8:	8d 93       	st	X+, r24
    31aa:	31 96       	adiw	r30, 0x01	; 1
    31ac:	a2 17       	cp	r26, r18
    31ae:	b3 07       	cpc	r27, r19
    31b0:	d1 f7       	brne	.-12     	; 0x31a6 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xba>
    31b2:	03 c0       	rjmp	.+6      	; 0x31ba <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xce>
            } else {
                progBuffer = (uint8_t *)data + i;
    31b4:	34 01       	movw	r6, r8
    31b6:	6a 0c       	add	r6, r10
    31b8:	7b 1c       	adc	r7, r11
            }
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
    31ba:	ce 2d       	mov	r28, r14
    31bc:	d0 e0       	ldi	r29, 0x00	; 0
    31be:	c1 2c       	mov	r12, r1
    31c0:	ee 24       	eor	r14, r14
    31c2:	e3 94       	inc	r14
    31c4:	21 2f       	mov	r18, r17
    31c6:	ae 01       	movw	r20, r28
    31c8:	b3 01       	movw	r22, r6
    31ca:	c1 01       	movw	r24, r2
    31cc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>
            i += length;
    31d0:	ca 0d       	add	r28, r10
    31d2:	db 1d       	adc	r29, r11
                // unknown special command
                success = false;
            }
        }
        
        if (!success) {
    31d4:	81 11       	cpse	r24, r1
    31d6:	11 c0       	rjmp	.+34     	; 0x31fa <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x10e>
    31d8:	09 c0       	rjmp	.+18     	; 0x31ec <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x100>
                special = data[i++];
            }
            /*Serial.print("Special command code ");
            Serial.print(special, HEX);
            Serial.println(" found...");*/
            if (special == 0x01) {
    31da:	e1 30       	cpi	r30, 0x01	; 1
    31dc:	39 f4       	brne	.+14     	; 0x31ec <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x100>
                // enable DMP-related interrupts
                
                //setIntZeroMotionEnabled(true);
                //setIntFIFOBufferOverflowEnabled(true);
                //setIntDMPEnabled(true);
                I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
    31de:	42 e3       	ldi	r20, 0x32	; 50
    31e0:	68 e3       	ldi	r22, 0x38	; 56
    31e2:	f1 01       	movw	r30, r2
    31e4:	80 81       	ld	r24, Z
    31e6:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    31ea:	07 c0       	rjmp	.+14     	; 0x31fa <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x10e>
                success = false;
            }
        }
        
        if (!success) {
            if (useProgMem) free(progBuffer);
    31ec:	ff 20       	and	r15, r15
    31ee:	81 f0       	breq	.+32     	; 0x3210 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x124>
    31f0:	c3 01       	movw	r24, r6
    31f2:	0e 94 4a 2a 	call	0x5494	; 0x5494 <free>
            return false; // uh oh
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	20 c0       	rjmp	.+64     	; 0x323a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x14e>
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
    31fa:	c4 15       	cp	r28, r4
    31fc:	d5 05       	cpc	r29, r5
    31fe:	08 f4       	brcc	.+2      	; 0x3202 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x116>
    3200:	9a cf       	rjmp	.-204    	; 0x3136 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x4a>
        if (!success) {
            if (useProgMem) free(progBuffer);
            return false; // uh oh
        }
    }
    if (useProgMem) free(progBuffer);
    3202:	ff 20       	and	r15, r15
    3204:	39 f0       	breq	.+14     	; 0x3214 <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x128>
    3206:	c3 01       	movw	r24, r6
    3208:	0e 94 4a 2a 	call	0x5494	; 0x5494 <free>
    return true;
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	15 c0       	rjmp	.+42     	; 0x323a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x14e>
            }
        }
        
        if (!success) {
            if (useProgMem) free(progBuffer);
            return false; // uh oh
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	13 c0       	rjmp	.+38     	; 0x323a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x14e>
        }
    }
    if (useProgMem) free(progBuffer);
    return true;
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	11 c0       	rjmp	.+34     	; 0x323a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x14e>
    }

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
    3218:	45 2b       	or	r20, r21
    321a:	09 f0       	breq	.+2      	; 0x321e <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x132>
    321c:	88 cf       	rjmp	.-240    	; 0x312e <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x42>
            if (useProgMem) free(progBuffer);
            return false; // uh oh
        }
    }
    if (useProgMem) free(progBuffer);
    return true;
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	0c c0       	rjmp	.+24     	; 0x323a <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0x14e>
            // NOTE: this kind of behavior (what and when to do certain things)
            // is totally undocumented. This code is in here based on observed
            // behavior only, and exactly why (or even whether) it has to be here
            // is anybody's guess for now.
            if (useProgMem) {
                special = pgm_read_byte(data + i++);
    3222:	24 96       	adiw	r28, 0x04	; 4
    3224:	f4 01       	movw	r30, r8
    3226:	ea 0d       	add	r30, r10
    3228:	fb 1d       	adc	r31, r11
    322a:	e4 91       	lpm	r30, Z
    322c:	d6 cf       	rjmp	.-84     	; 0x31da <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xee>
            } else {
                special = data[i++];
    322e:	24 96       	adiw	r28, 0x04	; 4
    3230:	f4 01       	movw	r30, r8
    3232:	ea 0d       	add	r30, r10
    3234:	fb 1d       	adc	r31, r11
    3236:	e0 81       	ld	r30, Z
    3238:	d0 cf       	rjmp	.-96     	; 0x31da <_ZN7MPU605024writeDMPConfigurationSetEPKhjb+0xee>
            return false; // uh oh
        }
    }
    if (useProgMem) free(progBuffer);
    return true;
}
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	1f 91       	pop	r17
    3240:	0f 91       	pop	r16
    3242:	ff 90       	pop	r15
    3244:	ef 90       	pop	r14
    3246:	cf 90       	pop	r12
    3248:	bf 90       	pop	r11
    324a:	af 90       	pop	r10
    324c:	9f 90       	pop	r9
    324e:	8f 90       	pop	r8
    3250:	7f 90       	pop	r7
    3252:	6f 90       	pop	r6
    3254:	5f 90       	pop	r5
    3256:	4f 90       	pop	r4
    3258:	3f 90       	pop	r3
    325a:	2f 90       	pop	r2
    325c:	08 95       	ret

0000325e <_ZN7MPU605028writeProgDMPConfigurationSetEPKhj>:
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
    return writeDMPConfigurationSet(data, dataSize, true);
    325e:	21 e0       	ldi	r18, 0x01	; 1
    3260:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN7MPU605024writeDMPConfigurationSetEPKhjb>
}
    3264:	08 95       	ret

00003266 <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
    3266:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
    3268:	60 e7       	ldi	r22, 0x70	; 112
    326a:	fc 01       	movw	r30, r24
    326c:	80 81       	ld	r24, Z
    326e:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    3272:	08 95       	ret

00003274 <_ZN7MPU605013setDMPConfig2Eh>:

uint8_t MPU6050::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig2(uint8_t config) {
    3274:	46 2f       	mov	r20, r22
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
    3276:	61 e7       	ldi	r22, 0x71	; 113
    3278:	fc 01       	movw	r30, r24
    327a:	80 81       	ld	r24, Z
    327c:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZN6I2Cdev9writeByteEhhh>
    3280:	08 95       	ret

00003282 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    3282:	1f 92       	push	r1
    3284:	0f 92       	push	r0
    3286:	0f b6       	in	r0, 0x3f	; 63
    3288:	0f 92       	push	r0
    328a:	11 24       	eor	r1, r1
    328c:	2f 93       	push	r18
    328e:	3f 93       	push	r19
    3290:	4f 93       	push	r20
    3292:	5f 93       	push	r21
    3294:	6f 93       	push	r22
    3296:	7f 93       	push	r23
    3298:	8f 93       	push	r24
    329a:	9f 93       	push	r25
    329c:	af 93       	push	r26
    329e:	bf 93       	push	r27
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	ef 93       	push	r30
    32a6:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    32a8:	a0 91 65 02 	lds	r26, 0x0265
    32ac:	b0 91 66 02 	lds	r27, 0x0266
    32b0:	10 97       	sbiw	r26, 0x00	; 0
    32b2:	09 f4       	brne	.+2      	; 0x32b6 <__vector_3+0x34>
    32b4:	81 c0       	rjmp	.+258    	; 0x33b8 <__vector_3+0x136>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    32b6:	5e 96       	adiw	r26, 0x1e	; 30
    32b8:	8c 91       	ld	r24, X
    32ba:	5e 97       	sbiw	r26, 0x1e	; 30
    32bc:	81 ff       	sbrs	r24, 1
    32be:	0d c0       	rjmp	.+26     	; 0x32da <__vector_3+0x58>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    32c0:	1e 96       	adiw	r26, 0x0e	; 14
    32c2:	ed 91       	ld	r30, X+
    32c4:	fc 91       	ld	r31, X
    32c6:	1f 97       	sbiw	r26, 0x0f	; 15
    32c8:	90 81       	ld	r25, Z
    32ca:	1d 96       	adiw	r26, 0x0d	; 13
    32cc:	8c 91       	ld	r24, X
    32ce:	1d 97       	sbiw	r26, 0x0d	; 13
    32d0:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	71 f4       	brne	.+28     	; 0x32f2 <__vector_3+0x70>
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	0c c0       	rjmp	.+24     	; 0x32f2 <__vector_3+0x70>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    32da:	1e 96       	adiw	r26, 0x0e	; 14
    32dc:	ed 91       	ld	r30, X+
    32de:	fc 91       	ld	r31, X
    32e0:	1f 97       	sbiw	r26, 0x0f	; 15
    32e2:	90 81       	ld	r25, Z
    32e4:	1d 96       	adiw	r26, 0x0d	; 13
    32e6:	8c 91       	ld	r24, X
    32e8:	1d 97       	sbiw	r26, 0x0d	; 13
    32ea:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	09 f0       	breq	.+2      	; 0x32f2 <__vector_3+0x70>
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	88 23       	and	r24, r24
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <__vector_3+0x76>
    32f6:	60 c0       	rjmp	.+192    	; 0x33b8 <__vector_3+0x136>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    32f8:	53 96       	adiw	r26, 0x13	; 19
    32fa:	ed 91       	ld	r30, X+
    32fc:	fc 91       	ld	r31, X
    32fe:	54 97       	sbiw	r26, 0x14	; 20
    3300:	90 81       	ld	r25, Z
    3302:	55 96       	adiw	r26, 0x15	; 21
    3304:	8c 91       	ld	r24, X
    3306:	55 97       	sbiw	r26, 0x15	; 21
    3308:	80 95       	com	r24
    330a:	89 23       	and	r24, r25
    330c:	80 83       	st	Z, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    330e:	56 96       	adiw	r26, 0x16	; 22
    3310:	8d 91       	ld	r24, X+
    3312:	9c 91       	ld	r25, X
    3314:	57 97       	sbiw	r26, 0x17	; 23
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <__vector_3+0x94>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    331a:	58 96       	adiw	r26, 0x18	; 24
    331c:	6d 91       	ld	r22, X+
    331e:	7c 91       	ld	r23, X
    3320:	59 97       	sbiw	r26, 0x19	; 25
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    3322:	1e 96       	adiw	r26, 0x0e	; 14
    3324:	cd 91       	ld	r28, X+
    3326:	dc 91       	ld	r29, X
    3328:	1f 97       	sbiw	r26, 0x0f	; 15
    332a:	1d 96       	adiw	r26, 0x0d	; 13
    332c:	5c 91       	ld	r21, X
    332e:	1d 97       	sbiw	r26, 0x0d	; 13
    3330:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    3332:	40 e0       	ldi	r20, 0x00	; 0
    3334:	fb 01       	movw	r30, r22
    3336:	31 97       	sbiw	r30, 0x01	; 1
    3338:	f1 f7       	brne	.-4      	; 0x3336 <__vector_3+0xb4>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    333a:	84 2f       	mov	r24, r20
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	95 95       	asr	r25
    3340:	87 95       	ror	r24
    3342:	48 2f       	mov	r20, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    3344:	28 81       	ld	r18, Y
    3346:	25 23       	and	r18, r21
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    3348:	09 f0       	breq	.+2      	; 0x334c <__vector_3+0xca>
        d |= 0x80;
    334a:	40 68       	ori	r20, 0x80	; 128
    334c:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    334e:	91 f7       	brne	.-28     	; 0x3334 <__vector_3+0xb2>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    3350:	5e 96       	adiw	r26, 0x1e	; 30
    3352:	8c 91       	ld	r24, X
    3354:	5e 97       	sbiw	r26, 0x1e	; 30
    3356:	81 fd       	sbrc	r24, 1
      d = ~d;
    3358:	40 95       	com	r20

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    335a:	80 91 24 02 	lds	r24, 0x0224
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	01 96       	adiw	r24, 0x01	; 1
    3362:	8f 73       	andi	r24, 0x3F	; 63
    3364:	90 78       	andi	r25, 0x80	; 128
    3366:	99 23       	and	r25, r25
    3368:	24 f4       	brge	.+8      	; 0x3372 <__vector_3+0xf0>
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	80 6c       	ori	r24, 0xC0	; 192
    336e:	9f 6f       	ori	r25, 0xFF	; 255
    3370:	01 96       	adiw	r24, 0x01	; 1
    if (next != _receive_buffer_head)
    3372:	20 91 23 02 	lds	r18, 0x0223
    3376:	28 17       	cp	r18, r24
    3378:	49 f0       	breq	.+18     	; 0x338c <__vector_3+0x10a>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    337a:	e0 91 24 02 	lds	r30, 0x0224
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	eb 5d       	subi	r30, 0xDB	; 219
    3382:	fd 4f       	sbci	r31, 0xFD	; 253
    3384:	40 83       	st	Z, r20
      _receive_buffer_tail = next;
    3386:	80 93 24 02 	sts	0x0224, r24
    338a:	07 c0       	rjmp	.+14     	; 0x339a <__vector_3+0x118>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    338c:	5e 96       	adiw	r26, 0x1e	; 30
    338e:	8c 91       	ld	r24, X
    3390:	5e 97       	sbiw	r26, 0x1e	; 30
    3392:	81 60       	ori	r24, 0x01	; 1
    3394:	5e 96       	adiw	r26, 0x1e	; 30
    3396:	8c 93       	st	X, r24
    3398:	5e 97       	sbiw	r26, 0x1e	; 30
    339a:	5a 96       	adiw	r26, 0x1a	; 26
    339c:	8d 91       	ld	r24, X+
    339e:	9c 91       	ld	r25, X
    33a0:	5b 97       	sbiw	r26, 0x1b	; 27
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	f1 f7       	brne	.-4      	; 0x33a2 <__vector_3+0x120>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    33a6:	53 96       	adiw	r26, 0x13	; 19
    33a8:	ed 91       	ld	r30, X+
    33aa:	fc 91       	ld	r31, X
    33ac:	54 97       	sbiw	r26, 0x14	; 20
    33ae:	90 81       	ld	r25, Z
    33b0:	55 96       	adiw	r26, 0x15	; 21
    33b2:	8c 91       	ld	r24, X
    33b4:	89 2b       	or	r24, r25
    33b6:	80 83       	st	Z, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    33b8:	ff 91       	pop	r31
    33ba:	ef 91       	pop	r30
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	bf 91       	pop	r27
    33c2:	af 91       	pop	r26
    33c4:	9f 91       	pop	r25
    33c6:	8f 91       	pop	r24
    33c8:	7f 91       	pop	r23
    33ca:	6f 91       	pop	r22
    33cc:	5f 91       	pop	r21
    33ce:	4f 91       	pop	r20
    33d0:	3f 91       	pop	r19
    33d2:	2f 91       	pop	r18
    33d4:	0f 90       	pop	r0
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	0f 90       	pop	r0
    33da:	1f 90       	pop	r1
    33dc:	18 95       	reti

000033de <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    33de:	10 92 d4 02 	sts	0x02D4, r1
  twi_sendStop = true;		// default value
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	80 93 d2 02 	sts	0x02D2, r24
  twi_inRepStart = false;
    33e8:	10 92 d1 02 	sts	0x02D1, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    33ec:	61 e0       	ldi	r22, 0x01	; 1
    33ee:	82 e1       	ldi	r24, 0x12	; 18
    33f0:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>
  digitalWrite(SCL, 1);
    33f4:	61 e0       	ldi	r22, 0x01	; 1
    33f6:	83 e1       	ldi	r24, 0x13	; 19
    33f8:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    33fc:	e9 eb       	ldi	r30, 0xB9	; 185
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	8e 7f       	andi	r24, 0xFE	; 254
    3404:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    3406:	80 81       	ld	r24, Z
    3408:	8d 7f       	andi	r24, 0xFD	; 253
    340a:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    340c:	88 e4       	ldi	r24, 0x48	; 72
    340e:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    3412:	85 e4       	ldi	r24, 0x45	; 69
    3414:	80 93 bc 00 	sts	0x00BC, r24
    3418:	08 95       	ret

0000341a <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    341a:	41 32       	cpi	r20, 0x21	; 33
    341c:	08 f0       	brcs	.+2      	; 0x3420 <twi_readFrom+0x6>
    341e:	4c c0       	rjmp	.+152    	; 0x34b8 <twi_readFrom+0x9e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    3420:	90 91 d4 02 	lds	r25, 0x02D4
    3424:	91 11       	cpse	r25, r1
    3426:	fc cf       	rjmp	.-8      	; 0x3420 <twi_readFrom+0x6>
    continue;
  }
  twi_state = TWI_MRX;
    3428:	31 e0       	ldi	r19, 0x01	; 1
    342a:	30 93 d4 02 	sts	0x02D4, r19
  twi_sendStop = sendStop;
    342e:	20 93 d2 02 	sts	0x02D2, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3432:	2f ef       	ldi	r18, 0xFF	; 255
    3434:	20 93 67 02 	sts	0x0267, r18

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3438:	10 92 ac 02 	sts	0x02AC, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    343c:	24 0f       	add	r18, r20
    343e:	20 93 ab 02 	sts	0x02AB, r18
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    3442:	30 93 d3 02 	sts	0x02D3, r19
  twi_slarw |= address << 1;
    3446:	20 91 d3 02 	lds	r18, 0x02D3
    344a:	88 0f       	add	r24, r24
    344c:	82 2b       	or	r24, r18
    344e:	80 93 d3 02 	sts	0x02D3, r24

  if (true == twi_inRepStart) {
    3452:	80 91 d1 02 	lds	r24, 0x02D1
    3456:	81 30       	cpi	r24, 0x01	; 1
    3458:	81 f4       	brne	.+32     	; 0x347a <twi_readFrom+0x60>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    345a:	10 92 d1 02 	sts	0x02D1, r1
    do {
      TWDR = twi_slarw;
    345e:	ab eb       	ldi	r26, 0xBB	; 187
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    } while(TWCR & _BV(TWWC));
    3462:	ec eb       	ldi	r30, 0xBC	; 188
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    do {
      TWDR = twi_slarw;
    3466:	80 91 d3 02 	lds	r24, 0x02D3
    346a:	8c 93       	st	X, r24
    } while(TWCR & _BV(TWWC));
    346c:	80 81       	ld	r24, Z
    346e:	83 fd       	sbrc	r24, 3
    3470:	fa cf       	rjmp	.-12     	; 0x3466 <twi_readFrom+0x4c>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    3472:	85 ec       	ldi	r24, 0xC5	; 197
    3474:	80 93 bc 00 	sts	0x00BC, r24
    3478:	03 c0       	rjmp	.+6      	; 0x3480 <twi_readFrom+0x66>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    347a:	85 ee       	ldi	r24, 0xE5	; 229
    347c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    3480:	80 91 d4 02 	lds	r24, 0x02D4
    3484:	81 30       	cpi	r24, 0x01	; 1
    3486:	e1 f3       	breq	.-8      	; 0x3480 <twi_readFrom+0x66>
    continue;
  }

  if (twi_masterBufferIndex < length)
    3488:	80 91 ac 02 	lds	r24, 0x02AC
    348c:	84 17       	cp	r24, r20
    348e:	10 f4       	brcc	.+4      	; 0x3494 <twi_readFrom+0x7a>
    length = twi_masterBufferIndex;
    3490:	40 91 ac 02 	lds	r20, 0x02AC

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3494:	44 23       	and	r20, r20
    3496:	89 f0       	breq	.+34     	; 0x34ba <twi_readFrom+0xa0>
    3498:	ad ea       	ldi	r26, 0xAD	; 173
    349a:	b2 e0       	ldi	r27, 0x02	; 2
    349c:	fb 01       	movw	r30, r22
    349e:	8f ef       	ldi	r24, 0xFF	; 255
    34a0:	84 0f       	add	r24, r20
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	01 96       	adiw	r24, 0x01	; 1
    34a6:	68 0f       	add	r22, r24
    34a8:	79 1f       	adc	r23, r25
    data[i] = twi_masterBuffer[i];
    34aa:	8d 91       	ld	r24, X+
    34ac:	81 93       	st	Z+, r24

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    34ae:	e6 17       	cp	r30, r22
    34b0:	f7 07       	cpc	r31, r23
    34b2:	d9 f7       	brne	.-10     	; 0x34aa <twi_readFrom+0x90>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    34b4:	94 2f       	mov	r25, r20
    34b6:	01 c0       	rjmp	.+2      	; 0x34ba <twi_readFrom+0xa0>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
    34b8:	90 e0       	ldi	r25, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    34ba:	89 2f       	mov	r24, r25
    34bc:	08 95       	ret

000034be <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    34be:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    34c0:	41 32       	cpi	r20, 0x21	; 33
    34c2:	08 f0       	brcs	.+2      	; 0x34c6 <twi_writeTo+0x8>
    34c4:	57 c0       	rjmp	.+174    	; 0x3574 <twi_writeTo+0xb6>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    34c6:	30 91 d4 02 	lds	r19, 0x02D4
    34ca:	31 11       	cpse	r19, r1
    34cc:	fc cf       	rjmp	.-8      	; 0x34c6 <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
    34ce:	92 e0       	ldi	r25, 0x02	; 2
    34d0:	90 93 d4 02 	sts	0x02D4, r25
  twi_sendStop = sendStop;
    34d4:	00 93 d2 02 	sts	0x02D2, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    34d8:	9f ef       	ldi	r25, 0xFF	; 255
    34da:	90 93 67 02 	sts	0x0267, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    34de:	10 92 ac 02 	sts	0x02AC, r1
  twi_masterBufferLength = length;
    34e2:	40 93 ab 02 	sts	0x02AB, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    34e6:	44 23       	and	r20, r20
    34e8:	71 f0       	breq	.+28     	; 0x3506 <twi_writeTo+0x48>
    34ea:	fb 01       	movw	r30, r22
    34ec:	ad ea       	ldi	r26, 0xAD	; 173
    34ee:	b2 e0       	ldi	r27, 0x02	; 2
    34f0:	41 50       	subi	r20, 0x01	; 1
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	4f 5f       	subi	r20, 0xFF	; 255
    34f6:	5f 4f       	sbci	r21, 0xFF	; 255
    34f8:	64 0f       	add	r22, r20
    34fa:	75 1f       	adc	r23, r21
    twi_masterBuffer[i] = data[i];
    34fc:	91 91       	ld	r25, Z+
    34fe:	9d 93       	st	X+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3500:	e6 17       	cp	r30, r22
    3502:	f7 07       	cpc	r31, r23
    3504:	d9 f7       	brne	.-10     	; 0x34fc <twi_writeTo+0x3e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    3506:	10 92 d3 02 	sts	0x02D3, r1
  twi_slarw |= address << 1;
    350a:	90 91 d3 02 	lds	r25, 0x02D3
    350e:	88 0f       	add	r24, r24
    3510:	89 2b       	or	r24, r25
    3512:	80 93 d3 02 	sts	0x02D3, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    3516:	80 91 d1 02 	lds	r24, 0x02D1
    351a:	81 30       	cpi	r24, 0x01	; 1
    351c:	81 f4       	brne	.+32     	; 0x353e <twi_writeTo+0x80>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    351e:	10 92 d1 02 	sts	0x02D1, r1
    do {
      TWDR = twi_slarw;				
    3522:	ab eb       	ldi	r26, 0xBB	; 187
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    } while(TWCR & _BV(TWWC));
    3526:	ec eb       	ldi	r30, 0xBC	; 188
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    do {
      TWDR = twi_slarw;				
    352a:	80 91 d3 02 	lds	r24, 0x02D3
    352e:	8c 93       	st	X, r24
    } while(TWCR & _BV(TWWC));
    3530:	80 81       	ld	r24, Z
    3532:	83 fd       	sbrc	r24, 3
    3534:	fa cf       	rjmp	.-12     	; 0x352a <twi_writeTo+0x6c>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    3536:	85 ec       	ldi	r24, 0xC5	; 197
    3538:	80 93 bc 00 	sts	0x00BC, r24
    353c:	03 c0       	rjmp	.+6      	; 0x3544 <twi_writeTo+0x86>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    353e:	85 ee       	ldi	r24, 0xE5	; 229
    3540:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    3544:	22 23       	and	r18, r18
    3546:	41 f0       	breq	.+16     	; 0x3558 <twi_writeTo+0x9a>
    3548:	80 91 d4 02 	lds	r24, 0x02D4
    354c:	82 30       	cpi	r24, 0x02	; 2
    354e:	21 f4       	brne	.+8      	; 0x3558 <twi_writeTo+0x9a>
    3550:	80 91 d4 02 	lds	r24, 0x02D4
    3554:	82 30       	cpi	r24, 0x02	; 2
    3556:	e1 f3       	breq	.-8      	; 0x3550 <twi_writeTo+0x92>
    continue;
  }
  
  if (twi_error == 0xFF)
    3558:	80 91 67 02 	lds	r24, 0x0267
    355c:	8f 3f       	cpi	r24, 0xFF	; 255
    355e:	79 f0       	breq	.+30     	; 0x357e <twi_writeTo+0xc0>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    3560:	80 91 67 02 	lds	r24, 0x0267
    3564:	80 32       	cpi	r24, 0x20	; 32
    3566:	41 f0       	breq	.+16     	; 0x3578 <twi_writeTo+0xba>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    3568:	80 91 67 02 	lds	r24, 0x0267
    356c:	80 33       	cpi	r24, 0x30	; 48
    356e:	31 f0       	breq	.+12     	; 0x357c <twi_writeTo+0xbe>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
    3570:	34 e0       	ldi	r19, 0x04	; 4
    3572:	05 c0       	rjmp	.+10     	; 0x357e <twi_writeTo+0xc0>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    3574:	31 e0       	ldi	r19, 0x01	; 1
    3576:	03 c0       	rjmp	.+6      	; 0x357e <twi_writeTo+0xc0>
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
    3578:	32 e0       	ldi	r19, 0x02	; 2
    357a:	01 c0       	rjmp	.+2      	; 0x357e <twi_writeTo+0xc0>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
    357c:	33 e0       	ldi	r19, 0x03	; 3
  else
    return 4;	// other twi error
}
    357e:	83 2f       	mov	r24, r19
    3580:	0f 91       	pop	r16
    3582:	08 95       	ret

00003584 <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3584:	61 32       	cpi	r22, 0x21	; 33
    3586:	c8 f4       	brcc	.+50     	; 0x35ba <twi_transmit+0x36>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    3588:	20 91 d4 02 	lds	r18, 0x02D4
    358c:	24 30       	cpi	r18, 0x04	; 4
    358e:	b9 f4       	brne	.+46     	; 0x35be <twi_transmit+0x3a>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    3590:	60 93 89 02 	sts	0x0289, r22
  for(i = 0; i < length; ++i){
    3594:	66 23       	and	r22, r22
    3596:	a9 f0       	breq	.+42     	; 0x35c2 <twi_transmit+0x3e>
    3598:	fc 01       	movw	r30, r24
    359a:	ab e8       	ldi	r26, 0x8B	; 139
    359c:	b2 e0       	ldi	r27, 0x02	; 2
    359e:	61 50       	subi	r22, 0x01	; 1
    35a0:	26 2f       	mov	r18, r22
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	2f 5f       	subi	r18, 0xFF	; 255
    35a6:	3f 4f       	sbci	r19, 0xFF	; 255
    35a8:	28 0f       	add	r18, r24
    35aa:	39 1f       	adc	r19, r25
    twi_txBuffer[i] = data[i];
    35ac:	91 91       	ld	r25, Z+
    35ae:	9d 93       	st	X+, r25
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    35b0:	e2 17       	cp	r30, r18
    35b2:	f3 07       	cpc	r31, r19
    35b4:	d9 f7       	brne	.-10     	; 0x35ac <twi_transmit+0x28>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
    35be:	82 e0       	ldi	r24, 0x02	; 2
    35c0:	08 95       	ret
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
    35c2:	80 e0       	ldi	r24, 0x00	; 0
}
    35c4:	08 95       	ret

000035c6 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    35c6:	85 ed       	ldi	r24, 0xD5	; 213
    35c8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    35cc:	ec eb       	ldi	r30, 0xBC	; 188
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	84 fd       	sbrc	r24, 4
    35d4:	fd cf       	rjmp	.-6      	; 0x35d0 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    35d6:	10 92 d4 02 	sts	0x02D4, r1
    35da:	08 95       	ret

000035dc <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    35dc:	85 ec       	ldi	r24, 0xC5	; 197
    35de:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    35e2:	10 92 d4 02 	sts	0x02D4, r1
    35e6:	08 95       	ret

000035e8 <__vector_24>:
}

ISR(TWI_vect)
{
    35e8:	1f 92       	push	r1
    35ea:	0f 92       	push	r0
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	0f 92       	push	r0
    35f0:	11 24       	eor	r1, r1
    35f2:	2f 93       	push	r18
    35f4:	3f 93       	push	r19
    35f6:	4f 93       	push	r20
    35f8:	5f 93       	push	r21
    35fa:	6f 93       	push	r22
    35fc:	7f 93       	push	r23
    35fe:	8f 93       	push	r24
    3600:	9f 93       	push	r25
    3602:	af 93       	push	r26
    3604:	bf 93       	push	r27
    3606:	ef 93       	push	r30
    3608:	ff 93       	push	r31
  switch(TW_STATUS){
    360a:	80 91 b9 00 	lds	r24, 0x00B9
    360e:	e8 2f       	mov	r30, r24
    3610:	e8 7f       	andi	r30, 0xF8	; 248
    3612:	8e 2f       	mov	r24, r30
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	89 3c       	cpi	r24, 0xC9	; 201
    3618:	91 05       	cpc	r25, r1
    361a:	08 f0       	brcs	.+2      	; 0x361e <__vector_24+0x36>
    361c:	f5 c0       	rjmp	.+490    	; 0x3808 <__vector_24+0x220>
    361e:	fc 01       	movw	r30, r24
    3620:	ec 5c       	subi	r30, 0xCC	; 204
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	0c 94 af 29 	jmp	0x535e	; 0x535e <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3628:	80 91 d3 02 	lds	r24, 0x02D3
    362c:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3630:	85 ec       	ldi	r24, 0xC5	; 197
    3632:	80 93 bc 00 	sts	0x00BC, r24
    3636:	e8 c0       	rjmp	.+464    	; 0x3808 <__vector_24+0x220>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3638:	90 91 ac 02 	lds	r25, 0x02AC
    363c:	80 91 ab 02 	lds	r24, 0x02AB
    3640:	98 17       	cp	r25, r24
    3642:	80 f4       	brcc	.+32     	; 0x3664 <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3644:	e0 91 ac 02 	lds	r30, 0x02AC
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	8e 0f       	add	r24, r30
    364c:	80 93 ac 02 	sts	0x02AC, r24
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	e3 55       	subi	r30, 0x53	; 83
    3654:	fd 4f       	sbci	r31, 0xFD	; 253
    3656:	80 81       	ld	r24, Z
    3658:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    365c:	85 ec       	ldi	r24, 0xC5	; 197
    365e:	80 93 bc 00 	sts	0x00BC, r24
    3662:	d2 c0       	rjmp	.+420    	; 0x3808 <__vector_24+0x220>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    3664:	80 91 d2 02 	lds	r24, 0x02D2
    3668:	88 23       	and	r24, r24
    366a:	19 f0       	breq	.+6      	; 0x3672 <__vector_24+0x8a>
          twi_stop();
    366c:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <twi_stop>
    3670:	cb c0       	rjmp	.+406    	; 0x3808 <__vector_24+0x220>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	80 93 d1 02 	sts	0x02D1, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3678:	84 ea       	ldi	r24, 0xA4	; 164
    367a:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    367e:	10 92 d4 02 	sts	0x02D4, r1
    3682:	c2 c0       	rjmp	.+388    	; 0x3808 <__vector_24+0x220>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3684:	80 e2       	ldi	r24, 0x20	; 32
    3686:	80 93 67 02 	sts	0x0267, r24
      twi_stop();
    368a:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <twi_stop>
      break;
    368e:	bc c0       	rjmp	.+376    	; 0x3808 <__vector_24+0x220>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3690:	80 e3       	ldi	r24, 0x30	; 48
    3692:	80 93 67 02 	sts	0x0267, r24
      twi_stop();
    3696:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <twi_stop>
      break;
    369a:	b6 c0       	rjmp	.+364    	; 0x3808 <__vector_24+0x220>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    369c:	88 e3       	ldi	r24, 0x38	; 56
    369e:	80 93 67 02 	sts	0x0267, r24
      twi_releaseBus();
    36a2:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <twi_releaseBus>
      break;
    36a6:	b0 c0       	rjmp	.+352    	; 0x3808 <__vector_24+0x220>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    36a8:	e0 91 ac 02 	lds	r30, 0x02AC
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	8e 0f       	add	r24, r30
    36b0:	80 93 ac 02 	sts	0x02AC, r24
    36b4:	80 91 bb 00 	lds	r24, 0x00BB
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	e3 55       	subi	r30, 0x53	; 83
    36bc:	fd 4f       	sbci	r31, 0xFD	; 253
    36be:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    36c0:	90 91 ac 02 	lds	r25, 0x02AC
    36c4:	80 91 ab 02 	lds	r24, 0x02AB
    36c8:	98 17       	cp	r25, r24
    36ca:	20 f4       	brcc	.+8      	; 0x36d4 <__vector_24+0xec>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    36cc:	85 ec       	ldi	r24, 0xC5	; 197
    36ce:	80 93 bc 00 	sts	0x00BC, r24
    36d2:	9a c0       	rjmp	.+308    	; 0x3808 <__vector_24+0x220>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    36d4:	85 e8       	ldi	r24, 0x85	; 133
    36d6:	80 93 bc 00 	sts	0x00BC, r24
    36da:	96 c0       	rjmp	.+300    	; 0x3808 <__vector_24+0x220>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    36dc:	e0 91 ac 02 	lds	r30, 0x02AC
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	8e 0f       	add	r24, r30
    36e4:	80 93 ac 02 	sts	0x02AC, r24
    36e8:	80 91 bb 00 	lds	r24, 0x00BB
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	e3 55       	subi	r30, 0x53	; 83
    36f0:	fd 4f       	sbci	r31, 0xFD	; 253
    36f2:	80 83       	st	Z, r24
	if (twi_sendStop)
    36f4:	80 91 d2 02 	lds	r24, 0x02D2
    36f8:	88 23       	and	r24, r24
    36fa:	19 f0       	breq	.+6      	; 0x3702 <__vector_24+0x11a>
          twi_stop();
    36fc:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <twi_stop>
    3700:	83 c0       	rjmp	.+262    	; 0x3808 <__vector_24+0x220>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	80 93 d1 02 	sts	0x02D1, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3708:	84 ea       	ldi	r24, 0xA4	; 164
    370a:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    370e:	10 92 d4 02 	sts	0x02D4, r1
    3712:	7a c0       	rjmp	.+244    	; 0x3808 <__vector_24+0x220>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    3714:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <twi_stop>
      break;
    3718:	77 c0       	rjmp	.+238    	; 0x3808 <__vector_24+0x220>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    371a:	83 e0       	ldi	r24, 0x03	; 3
    371c:	80 93 d4 02 	sts	0x02D4, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3720:	10 92 68 02 	sts	0x0268, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3724:	85 ec       	ldi	r24, 0xC5	; 197
    3726:	80 93 bc 00 	sts	0x00BC, r24
    372a:	6e c0       	rjmp	.+220    	; 0x3808 <__vector_24+0x220>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    372c:	80 91 68 02 	lds	r24, 0x0268
    3730:	80 32       	cpi	r24, 0x20	; 32
    3732:	80 f4       	brcc	.+32     	; 0x3754 <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3734:	e0 91 68 02 	lds	r30, 0x0268
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	8e 0f       	add	r24, r30
    373c:	80 93 68 02 	sts	0x0268, r24
    3740:	80 91 bb 00 	lds	r24, 0x00BB
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	e7 59       	subi	r30, 0x97	; 151
    3748:	fd 4f       	sbci	r31, 0xFD	; 253
    374a:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    374c:	85 ec       	ldi	r24, 0xC5	; 197
    374e:	80 93 bc 00 	sts	0x00BC, r24
    3752:	5a c0       	rjmp	.+180    	; 0x3808 <__vector_24+0x220>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3754:	85 e8       	ldi	r24, 0x85	; 133
    3756:	80 93 bc 00 	sts	0x00BC, r24
    375a:	56 c0       	rjmp	.+172    	; 0x3808 <__vector_24+0x220>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    375c:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3760:	80 91 68 02 	lds	r24, 0x0268
    3764:	80 32       	cpi	r24, 0x20	; 32
    3766:	30 f4       	brcc	.+12     	; 0x3774 <__vector_24+0x18c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3768:	e0 91 68 02 	lds	r30, 0x0268
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	e7 59       	subi	r30, 0x97	; 151
    3770:	fd 4f       	sbci	r31, 0xFD	; 253
    3772:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3774:	60 91 68 02 	lds	r22, 0x0268
    3778:	70 e0       	ldi	r23, 0x00	; 0
    377a:	e0 91 cd 02 	lds	r30, 0x02CD
    377e:	f0 91 ce 02 	lds	r31, 0x02CE
    3782:	89 e6       	ldi	r24, 0x69	; 105
    3784:	92 e0       	ldi	r25, 0x02	; 2
    3786:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3788:	10 92 68 02 	sts	0x0268, r1
      break;
    378c:	3d c0       	rjmp	.+122    	; 0x3808 <__vector_24+0x220>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    378e:	85 e8       	ldi	r24, 0x85	; 133
    3790:	80 93 bc 00 	sts	0x00BC, r24
    3794:	39 c0       	rjmp	.+114    	; 0x3808 <__vector_24+0x220>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3796:	84 e0       	ldi	r24, 0x04	; 4
    3798:	80 93 d4 02 	sts	0x02D4, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    379c:	10 92 8a 02 	sts	0x028A, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    37a0:	10 92 89 02 	sts	0x0289, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    37a4:	e0 91 cf 02 	lds	r30, 0x02CF
    37a8:	f0 91 d0 02 	lds	r31, 0x02D0
    37ac:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    37ae:	80 91 89 02 	lds	r24, 0x0289
    37b2:	81 11       	cpse	r24, r1
    37b4:	05 c0       	rjmp	.+10     	; 0x37c0 <__vector_24+0x1d8>
        twi_txBufferLength = 1;
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	80 93 89 02 	sts	0x0289, r24
        twi_txBuffer[0] = 0x00;
    37bc:	10 92 8b 02 	sts	0x028B, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    37c0:	e0 91 8a 02 	lds	r30, 0x028A
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	8e 0f       	add	r24, r30
    37c8:	80 93 8a 02 	sts	0x028A, r24
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	e5 57       	subi	r30, 0x75	; 117
    37d0:	fd 4f       	sbci	r31, 0xFD	; 253
    37d2:	80 81       	ld	r24, Z
    37d4:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    37d8:	90 91 8a 02 	lds	r25, 0x028A
    37dc:	80 91 89 02 	lds	r24, 0x0289
    37e0:	98 17       	cp	r25, r24
    37e2:	20 f4       	brcc	.+8      	; 0x37ec <__vector_24+0x204>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    37e4:	85 ec       	ldi	r24, 0xC5	; 197
    37e6:	80 93 bc 00 	sts	0x00BC, r24
    37ea:	0e c0       	rjmp	.+28     	; 0x3808 <__vector_24+0x220>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    37ec:	85 e8       	ldi	r24, 0x85	; 133
    37ee:	80 93 bc 00 	sts	0x00BC, r24
    37f2:	0a c0       	rjmp	.+20     	; 0x3808 <__vector_24+0x220>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    37f4:	85 ec       	ldi	r24, 0xC5	; 197
    37f6:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    37fa:	10 92 d4 02 	sts	0x02D4, r1
      break;
    37fe:	04 c0       	rjmp	.+8      	; 0x3808 <__vector_24+0x220>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3800:	10 92 67 02 	sts	0x0267, r1
      twi_stop();
    3804:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <twi_stop>
      break;
  }
}
    3808:	ff 91       	pop	r31
    380a:	ef 91       	pop	r30
    380c:	bf 91       	pop	r27
    380e:	af 91       	pop	r26
    3810:	9f 91       	pop	r25
    3812:	8f 91       	pop	r24
    3814:	7f 91       	pop	r23
    3816:	6f 91       	pop	r22
    3818:	5f 91       	pop	r21
    381a:	4f 91       	pop	r20
    381c:	3f 91       	pop	r19
    381e:	2f 91       	pop	r18
    3820:	0f 90       	pop	r0
    3822:	0f be       	out	0x3f, r0	; 63
    3824:	0f 90       	pop	r0
    3826:	1f 90       	pop	r1
    3828:	18 95       	reti

0000382a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    382a:	80 91 05 03 	lds	r24, 0x0305
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	20 91 06 03 	lds	r18, 0x0306
}
    3834:	82 1b       	sub	r24, r18
    3836:	91 09       	sbc	r25, r1
    3838:	08 95       	ret

0000383a <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    383a:	90 91 06 03 	lds	r25, 0x0306
    383e:	80 91 05 03 	lds	r24, 0x0305
    3842:	98 17       	cp	r25, r24
    3844:	50 f4       	brcc	.+20     	; 0x385a <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    3846:	e9 2f       	mov	r30, r25
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	e9 5f       	subi	r30, 0xF9	; 249
    384c:	fc 4f       	sbci	r31, 0xFC	; 252
    384e:	20 81       	ld	r18, Z
    3850:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    3852:	9f 5f       	subi	r25, 0xFF	; 255
    3854:	90 93 06 03 	sts	0x0306, r25
    3858:	02 c0       	rjmp	.+4      	; 0x385e <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    385a:	2f ef       	ldi	r18, 0xFF	; 255
    385c:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    385e:	c9 01       	movw	r24, r18
    3860:	08 95       	ret

00003862 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    3862:	e0 91 06 03 	lds	r30, 0x0306
    3866:	80 91 05 03 	lds	r24, 0x0305
    386a:	e8 17       	cp	r30, r24
    386c:	30 f4       	brcc	.+12     	; 0x387a <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    386e:	f0 e0       	ldi	r31, 0x00	; 0
    3870:	e9 5f       	subi	r30, 0xF9	; 249
    3872:	fc 4f       	sbci	r31, 0xFC	; 252
    3874:	80 81       	ld	r24, Z
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    387a:	8f ef       	ldi	r24, 0xFF	; 255
    387c:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    387e:	08 95       	ret

00003880 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    3880:	08 95       	ret

00003882 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    3882:	cf 92       	push	r12
    3884:	df 92       	push	r13
    3886:	ef 92       	push	r14
    3888:	ff 92       	push	r15
    388a:	0f 93       	push	r16
    388c:	1f 93       	push	r17
    388e:	cf 93       	push	r28
    3890:	df 93       	push	r29
    3892:	8c 01       	movw	r16, r24
    3894:	cb 01       	movw	r24, r22
    3896:	6a 01       	movw	r12, r20
  if(transmitting){
    3898:	20 91 e1 02 	lds	r18, 0x02E1
    389c:	22 23       	and	r18, r18
    389e:	a1 f0       	breq	.+40     	; 0x38c8 <_ZN7TwoWire5writeEPKhj+0x46>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    38a0:	41 15       	cp	r20, r1
    38a2:	51 05       	cpc	r21, r1
    38a4:	a1 f0       	breq	.+40     	; 0x38ce <_ZN7TwoWire5writeEPKhj+0x4c>
    38a6:	eb 01       	movw	r28, r22
    38a8:	7b 01       	movw	r14, r22
    38aa:	e4 0e       	add	r14, r20
    38ac:	f5 1e       	adc	r15, r21
      write(data[i]);
    38ae:	69 91       	ld	r22, Y+
    38b0:	d8 01       	movw	r26, r16
    38b2:	ed 91       	ld	r30, X+
    38b4:	fc 91       	ld	r31, X
    38b6:	01 90       	ld	r0, Z+
    38b8:	f0 81       	ld	r31, Z
    38ba:	e0 2d       	mov	r30, r0
    38bc:	c8 01       	movw	r24, r16
    38be:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    38c0:	ce 15       	cp	r28, r14
    38c2:	df 05       	cpc	r29, r15
    38c4:	a1 f7       	brne	.-24     	; 0x38ae <_ZN7TwoWire5writeEPKhj+0x2c>
    38c6:	03 c0       	rjmp	.+6      	; 0x38ce <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    38c8:	64 2f       	mov	r22, r20
    38ca:	0e 94 c2 1a 	call	0x3584	; 0x3584 <twi_transmit>
  }
  return quantity;
}
    38ce:	c6 01       	movw	r24, r12
    38d0:	df 91       	pop	r29
    38d2:	cf 91       	pop	r28
    38d4:	1f 91       	pop	r17
    38d6:	0f 91       	pop	r16
    38d8:	ff 90       	pop	r15
    38da:	ef 90       	pop	r14
    38dc:	df 90       	pop	r13
    38de:	cf 90       	pop	r12
    38e0:	08 95       	ret

000038e2 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    38e2:	cf 93       	push	r28
    38e4:	df 93       	push	r29
    38e6:	1f 92       	push	r1
    38e8:	cd b7       	in	r28, 0x3d	; 61
    38ea:	de b7       	in	r29, 0x3e	; 62
    38ec:	fc 01       	movw	r30, r24
    38ee:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    38f0:	90 91 e1 02 	lds	r25, 0x02E1
    38f4:	99 23       	and	r25, r25
    38f6:	d9 f0       	breq	.+54     	; 0x392e <_ZN7TwoWire5writeEh+0x4c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    38f8:	90 91 e2 02 	lds	r25, 0x02E2
    38fc:	90 32       	cpi	r25, 0x20	; 32
    38fe:	38 f0       	brcs	.+14     	; 0x390e <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	93 83       	std	Z+3, r25	; 0x03
    3906:	82 83       	std	Z+2, r24	; 0x02
      setWriteError();
      return 0;
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	17 c0       	rjmp	.+46     	; 0x393c <_ZN7TwoWire5writeEh+0x5a>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    390e:	80 91 e3 02 	lds	r24, 0x02E3
    3912:	e8 2f       	mov	r30, r24
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	ec 51       	subi	r30, 0x1C	; 28
    3918:	fd 4f       	sbci	r31, 0xFD	; 253
    391a:	99 81       	ldd	r25, Y+1	; 0x01
    391c:	90 83       	st	Z, r25
    ++txBufferIndex;
    391e:	8f 5f       	subi	r24, 0xFF	; 255
    3920:	80 93 e3 02 	sts	0x02E3, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    3924:	80 93 e2 02 	sts	0x02E2, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    3928:	81 e0       	ldi	r24, 0x01	; 1
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	07 c0       	rjmp	.+14     	; 0x393c <_ZN7TwoWire5writeEh+0x5a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    392e:	61 e0       	ldi	r22, 0x01	; 1
    3930:	ce 01       	movw	r24, r28
    3932:	01 96       	adiw	r24, 0x01	; 1
    3934:	0e 94 c2 1a 	call	0x3584	; 0x3584 <twi_transmit>
  }
  return 1;
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	90 e0       	ldi	r25, 0x00	; 0
}
    393c:	0f 90       	pop	r0
    393e:	df 91       	pop	r29
    3940:	cf 91       	pop	r28
    3942:	08 95       	ret

00003944 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    3944:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    3946:	13 82       	std	Z+3, r1	; 0x03
    3948:	12 82       	std	Z+2, r1	; 0x02
    394a:	88 ee       	ldi	r24, 0xE8	; 232
    394c:	93 e0       	ldi	r25, 0x03	; 3
    394e:	a0 e0       	ldi	r26, 0x00	; 0
    3950:	b0 e0       	ldi	r27, 0x00	; 0
    3952:	84 83       	std	Z+4, r24	; 0x04
    3954:	95 83       	std	Z+5, r25	; 0x05
    3956:	a6 83       	std	Z+6, r26	; 0x06
    3958:	b7 83       	std	Z+7, r27	; 0x07
    395a:	88 e3       	ldi	r24, 0x38	; 56
    395c:	91 e0       	ldi	r25, 0x01	; 1
    395e:	91 83       	std	Z+1, r25	; 0x01
    3960:	80 83       	st	Z, r24
    3962:	08 95       	ret

00003964 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    3964:	10 92 06 03 	sts	0x0306, r1
  rxBufferLength = 0;
    3968:	10 92 05 03 	sts	0x0305, r1

  txBufferIndex = 0;
    396c:	10 92 e3 02 	sts	0x02E3, r1
  txBufferLength = 0;
    3970:	10 92 e2 02 	sts	0x02E2, r1

  twi_init();
    3974:	0e 94 ef 19 	call	0x33de	; 0x33de <twi_init>
    3978:	08 95       	ret

0000397a <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	80 93 e1 02 	sts	0x02E1, r24
  // set address of targeted slave
  txAddress = address;
    3980:	60 93 04 03 	sts	0x0304, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    3984:	10 92 e3 02 	sts	0x02E3, r1
  txBufferLength = 0;
    3988:	10 92 e2 02 	sts	0x02E2, r1
    398c:	08 95       	ret

0000398e <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    398e:	0f 93       	push	r16
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    3990:	06 2f       	mov	r16, r22
    3992:	21 e0       	ldi	r18, 0x01	; 1
    3994:	40 91 e2 02 	lds	r20, 0x02E2
    3998:	64 ee       	ldi	r22, 0xE4	; 228
    399a:	72 e0       	ldi	r23, 0x02	; 2
    399c:	80 91 04 03 	lds	r24, 0x0304
    39a0:	0e 94 5f 1a 	call	0x34be	; 0x34be <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    39a4:	10 92 e3 02 	sts	0x02E3, r1
  txBufferLength = 0;
    39a8:	10 92 e2 02 	sts	0x02E2, r1
  // indicate that we are done transmitting
  transmitting = 0;
    39ac:	10 92 e1 02 	sts	0x02E1, r1
  return ret;
}
    39b0:	0f 91       	pop	r16
    39b2:	08 95       	ret

000039b4 <_ZN7TwoWire11requestFromEhhmhh>:
{
  TWBR = ((F_CPU / frequency) - 16) / 2;
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    39b4:	4f 92       	push	r4
    39b6:	5f 92       	push	r5
    39b8:	6f 92       	push	r6
    39ba:	7f 92       	push	r7
    39bc:	af 92       	push	r10
    39be:	bf 92       	push	r11
    39c0:	cf 92       	push	r12
    39c2:	ef 92       	push	r14
    39c4:	ff 92       	push	r15
    39c6:	0f 93       	push	r16
    39c8:	1f 93       	push	r17
    39ca:	cf 93       	push	r28
    39cc:	df 93       	push	r29
    39ce:	5c 01       	movw	r10, r24
    39d0:	f6 2e       	mov	r15, r22
    39d2:	d4 2f       	mov	r29, r20
    39d4:	28 01       	movw	r4, r16
    39d6:	39 01       	movw	r6, r18
  if (isize > 0) {
    39d8:	ee 20       	and	r14, r14
    39da:	49 f1       	breq	.+82     	; 0x3a2e <_ZN7TwoWire11requestFromEhhmhh+0x7a>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    39dc:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN7TwoWire17beginTransmissionEh>
    39e0:	8e 2d       	mov	r24, r14
    39e2:	84 30       	cpi	r24, 0x04	; 4
    39e4:	08 f0       	brcs	.+2      	; 0x39e8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    39e6:	83 e0       	ldi	r24, 0x03	; 3
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    39e8:	cf ef       	ldi	r28, 0xFF	; 255
    39ea:	c8 0f       	add	r28, r24
    39ec:	88 23       	and	r24, r24
    39ee:	d9 f0       	breq	.+54     	; 0x3a26 <_ZN7TwoWire11requestFromEhhmhh+0x72>
    write((uint8_t)(iaddress >> (isize*8)));
    39f0:	d5 01       	movw	r26, r10
    39f2:	ed 91       	ld	r30, X+
    39f4:	fc 91       	ld	r31, X
    39f6:	8c 2f       	mov	r24, r28
    39f8:	88 0f       	add	r24, r24
    39fa:	88 0f       	add	r24, r24
    39fc:	88 0f       	add	r24, r24
    39fe:	a3 01       	movw	r20, r6
    3a00:	92 01       	movw	r18, r4
    3a02:	04 c0       	rjmp	.+8      	; 0x3a0c <_ZN7TwoWire11requestFromEhhmhh+0x58>
    3a04:	56 95       	lsr	r21
    3a06:	47 95       	ror	r20
    3a08:	37 95       	ror	r19
    3a0a:	27 95       	ror	r18
    3a0c:	8a 95       	dec	r24
    3a0e:	d2 f7       	brpl	.-12     	; 0x3a04 <_ZN7TwoWire11requestFromEhhmhh+0x50>
    3a10:	ca 01       	movw	r24, r20
    3a12:	b9 01       	movw	r22, r18
    3a14:	01 90       	ld	r0, Z+
    3a16:	f0 81       	ld	r31, Z
    3a18:	e0 2d       	mov	r30, r0
    3a1a:	c5 01       	movw	r24, r10
    3a1c:	09 95       	icall
    3a1e:	9c 2f       	mov	r25, r28
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    3a20:	c1 50       	subi	r28, 0x01	; 1
    3a22:	91 11       	cpse	r25, r1
    3a24:	e5 cf       	rjmp	.-54     	; 0x39f0 <_ZN7TwoWire11requestFromEhhmhh+0x3c>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    3a26:	60 e0       	ldi	r22, 0x00	; 0
    3a28:	c5 01       	movw	r24, r10
    3a2a:	0e 94 c7 1c 	call	0x398e	; 0x398e <_ZN7TwoWire15endTransmissionEh>
    3a2e:	4d 2f       	mov	r20, r29
    3a30:	d1 32       	cpi	r29, 0x21	; 33
    3a32:	08 f0       	brcs	.+2      	; 0x3a36 <_ZN7TwoWire11requestFromEhhmhh+0x82>
    3a34:	40 e2       	ldi	r20, 0x20	; 32
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    3a36:	2c 2d       	mov	r18, r12
    3a38:	67 e0       	ldi	r22, 0x07	; 7
    3a3a:	73 e0       	ldi	r23, 0x03	; 3
    3a3c:	8f 2d       	mov	r24, r15
    3a3e:	0e 94 0d 1a 	call	0x341a	; 0x341a <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    3a42:	10 92 06 03 	sts	0x0306, r1
  rxBufferLength = read;
    3a46:	80 93 05 03 	sts	0x0305, r24

  return read;
}
    3a4a:	df 91       	pop	r29
    3a4c:	cf 91       	pop	r28
    3a4e:	1f 91       	pop	r17
    3a50:	0f 91       	pop	r16
    3a52:	ff 90       	pop	r15
    3a54:	ef 90       	pop	r14
    3a56:	cf 90       	pop	r12
    3a58:	bf 90       	pop	r11
    3a5a:	af 90       	pop	r10
    3a5c:	7f 90       	pop	r7
    3a5e:	6f 90       	pop	r6
    3a60:	5f 90       	pop	r5
    3a62:	4f 90       	pop	r4
    3a64:	08 95       	ret

00003a66 <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    3a66:	cf 92       	push	r12
    3a68:	ef 92       	push	r14
    3a6a:	0f 93       	push	r16
    3a6c:	1f 93       	push	r17
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    3a6e:	c2 2e       	mov	r12, r18
    3a70:	e1 2c       	mov	r14, r1
    3a72:	00 e0       	ldi	r16, 0x00	; 0
    3a74:	10 e0       	ldi	r17, 0x00	; 0
    3a76:	98 01       	movw	r18, r16
    3a78:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <_ZN7TwoWire11requestFromEhhmhh>
}
    3a7c:	1f 91       	pop	r17
    3a7e:	0f 91       	pop	r16
    3a80:	ef 90       	pop	r14
    3a82:	cf 90       	pop	r12
    3a84:	08 95       	ret

00003a86 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    3a86:	21 e0       	ldi	r18, 0x01	; 1
    3a88:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <_ZN7TwoWire11requestFromEhhh>
}
    3a8c:	08 95       	ret

00003a8e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    3a8e:	61 e0       	ldi	r22, 0x01	; 1
    3a90:	0e 94 c7 1c 	call	0x398e	; 0x398e <_ZN7TwoWire15endTransmissionEh>
}
    3a94:	08 95       	ret

00003a96 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3a96:	85 ed       	ldi	r24, 0xD5	; 213
    3a98:	92 e0       	ldi	r25, 0x02	; 2
    3a9a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <_ZN7TwoWireC1Ev>
    3a9e:	08 95       	ret

00003aa0 <_Z12dmpDataReadyv>:
// ===               INTERRUPT DETECTION ROUTINE                ===
// ================================================================

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
    mpuInterrupt = true;
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	80 93 27 03 	sts	0x0327, r24
    3aa6:	08 95       	ret

00003aa8 <_ZN7MPU605013dmpInitializeEv>:
    0x00,   0x60,   0x04,   0x40, 0x00, 0x00, 0x00,
    0x01,   0x62,   0x02,   0x00, 0x00,
    0x00,   0x60,   0x04,   0x00, 0x40, 0x00, 0x00
};

uint8_t MPU6050::dmpInitialize() {
    3aa8:	8f 92       	push	r8
    3aaa:	9f 92       	push	r9
    3aac:	af 92       	push	r10
    3aae:	bf 92       	push	r11
    3ab0:	cf 92       	push	r12
    3ab2:	ef 92       	push	r14
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	c0 59       	subi	r28, 0x90	; 144
    3ac2:	d1 09       	sbc	r29, r1
    3ac4:	0f b6       	in	r0, 0x3f	; 63
    3ac6:	f8 94       	cli
    3ac8:	de bf       	out	0x3e, r29	; 62
    3aca:	0f be       	out	0x3f, r0	; 63
    3acc:	cd bf       	out	0x3d, r28	; 61
    3ace:	4c 01       	movw	r8, r24
    // reset device
    DEBUG_PRINTLN(F("\n\nResetting MPU6050..."));
    3ad0:	65 ea       	ldi	r22, 0xA5	; 165
    3ad2:	7c e0       	ldi	r23, 0x0C	; 12
    3ad4:	80 e7       	ldi	r24, 0x70	; 112
    3ad6:	91 e0       	ldi	r25, 0x01	; 1
    3ad8:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    reset();
    3adc:	c4 01       	movw	r24, r8
    3ade:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <_ZN7MPU60505resetEv>
    delay(30); // wait after reset
    3ae2:	6e e1       	ldi	r22, 0x1E	; 30
    3ae4:	70 e0       	ldi	r23, 0x00	; 0
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	0e 94 54 11 	call	0x22a8	; 0x22a8 <delay>
    setSleepEnabled(true);
    Serial.println(F("Enabling wake cycle..."));
    setWakeCycleEnabled(true);*/

    // disable sleep mode
    DEBUG_PRINTLN(F("Disabling sleep mode..."));
    3aee:	6d e8       	ldi	r22, 0x8D	; 141
    3af0:	7c e0       	ldi	r23, 0x0C	; 12
    3af2:	80 e7       	ldi	r24, 0x70	; 112
    3af4:	91 e0       	ldi	r25, 0x01	; 1
    3af6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setSleepEnabled(false);
    3afa:	60 e0       	ldi	r22, 0x00	; 0
    3afc:	c4 01       	movw	r24, r8
    3afe:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    DEBUG_PRINTLN(F("Selecting user bank 16..."));
    3b02:	63 e7       	ldi	r22, 0x73	; 115
    3b04:	7c e0       	ldi	r23, 0x0C	; 12
    3b06:	80 e7       	ldi	r24, 0x70	; 112
    3b08:	91 e0       	ldi	r25, 0x01	; 1
    3b0a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setMemoryBank(0x10, true, true);
    3b0e:	21 e0       	ldi	r18, 0x01	; 1
    3b10:	41 e0       	ldi	r20, 0x01	; 1
    3b12:	60 e1       	ldi	r22, 0x10	; 16
    3b14:	c4 01       	movw	r24, r8
    3b16:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_ZN7MPU605013setMemoryBankEhbb>
    DEBUG_PRINTLN(F("Selecting memory byte 6..."));
    3b1a:	68 e5       	ldi	r22, 0x58	; 88
    3b1c:	7c e0       	ldi	r23, 0x0C	; 12
    3b1e:	80 e7       	ldi	r24, 0x70	; 112
    3b20:	91 e0       	ldi	r25, 0x01	; 1
    3b22:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setMemoryStartAddress(0x06);
    3b26:	66 e0       	ldi	r22, 0x06	; 6
    3b28:	c4 01       	movw	r24, r8
    3b2a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <_ZN7MPU605021setMemoryStartAddressEh>
    DEBUG_PRINTLN(F("Checking hardware revision..."));
    3b2e:	6a e3       	ldi	r22, 0x3A	; 58
    3b30:	7c e0       	ldi	r23, 0x0C	; 12
    3b32:	80 e7       	ldi	r24, 0x70	; 112
    3b34:	91 e0       	ldi	r25, 0x01	; 1
    3b36:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    DEBUG_PRINT(F("Revision @ user[16][6] = "));
    3b3a:	60 e2       	ldi	r22, 0x20	; 32
    3b3c:	7c e0       	ldi	r23, 0x0C	; 12
    3b3e:	80 e7       	ldi	r24, 0x70	; 112
    3b40:	91 e0       	ldi	r25, 0x01	; 1
    3b42:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINTLNF(readMemoryByte(), HEX);
    3b46:	c4 01       	movw	r24, r8
    3b48:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <_ZN7MPU605014readMemoryByteEv>
    3b4c:	40 e1       	ldi	r20, 0x10	; 16
    3b4e:	50 e0       	ldi	r21, 0x00	; 0
    3b50:	68 2f       	mov	r22, r24
    3b52:	80 e7       	ldi	r24, 0x70	; 112
    3b54:	91 e0       	ldi	r25, 0x01	; 1
    3b56:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_ZN5Print7printlnEhi>
    DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
    3b5a:	68 ef       	ldi	r22, 0xF8	; 248
    3b5c:	7b e0       	ldi	r23, 0x0B	; 11
    3b5e:	80 e7       	ldi	r24, 0x70	; 112
    3b60:	91 e0       	ldi	r25, 0x01	; 1
    3b62:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setMemoryBank(0, false, false);
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	40 e0       	ldi	r20, 0x00	; 0
    3b6a:	60 e0       	ldi	r22, 0x00	; 0
    3b6c:	c4 01       	movw	r24, r8
    3b6e:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_ZN7MPU605013setMemoryBankEhbb>

    // check OTP bank valid
    DEBUG_PRINTLN(F("Reading OTP bank valid flag..."));
    3b72:	69 ed       	ldi	r22, 0xD9	; 217
    3b74:	7b e0       	ldi	r23, 0x0B	; 11
    3b76:	80 e7       	ldi	r24, 0x70	; 112
    3b78:	91 e0       	ldi	r25, 0x01	; 1
    3b7a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    DEBUG_PRINT(F("OTP bank is "));
    3b7e:	6c ec       	ldi	r22, 0xCC	; 204
    3b80:	7b e0       	ldi	r23, 0x0B	; 11
    3b82:	80 e7       	ldi	r24, 0x70	; 112
    3b84:	91 e0       	ldi	r25, 0x01	; 1
    3b86:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINTLN(getOTPBankValid() ? F("valid!") : F("invalid!"));
    3b8a:	c4 01       	movw	r24, r8
    3b8c:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN7MPU605015getOTPBankValidEv>
    3b90:	81 11       	cpse	r24, r1
    3b92:	03 c0       	rjmp	.+6      	; 0x3b9a <_ZN7MPU605013dmpInitializeEv+0xf2>
    3b94:	6c eb       	ldi	r22, 0xBC	; 188
    3b96:	7b e0       	ldi	r23, 0x0B	; 11
    3b98:	02 c0       	rjmp	.+4      	; 0x3b9e <_ZN7MPU605013dmpInitializeEv+0xf6>
    3b9a:	65 ec       	ldi	r22, 0xC5	; 197
    3b9c:	7b e0       	ldi	r23, 0x0B	; 11
    3b9e:	80 e7       	ldi	r24, 0x70	; 112
    3ba0:	91 e0       	ldi	r25, 0x01	; 1
    3ba2:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>

    // get X/Y/Z gyro offsets
    DEBUG_PRINTLN(F("Reading gyro offset TC values..."));
    3ba6:	6b e9       	ldi	r22, 0x9B	; 155
    3ba8:	7b e0       	ldi	r23, 0x0B	; 11
    3baa:	80 e7       	ldi	r24, 0x70	; 112
    3bac:	91 e0       	ldi	r25, 0x01	; 1
    3bae:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    int8_t xgOffsetTC = getXGyroOffsetTC();
    3bb2:	c4 01       	movw	r24, r8
    3bb4:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN7MPU605016getXGyroOffsetTCEv>
    3bb8:	a8 2e       	mov	r10, r24
    int8_t ygOffsetTC = getYGyroOffsetTC();
    3bba:	c4 01       	movw	r24, r8
    3bbc:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN7MPU605016getYGyroOffsetTCEv>
    3bc0:	b8 2e       	mov	r11, r24
    int8_t zgOffsetTC = getZGyroOffsetTC();
    3bc2:	c4 01       	movw	r24, r8
    3bc4:	0e 94 99 16 	call	0x2d32	; 0x2d32 <_ZN7MPU605016getZGyroOffsetTCEv>
    3bc8:	18 2f       	mov	r17, r24
    DEBUG_PRINT(F("X gyro offset = "));
    3bca:	6a e8       	ldi	r22, 0x8A	; 138
    3bcc:	7b e0       	ldi	r23, 0x0B	; 11
    3bce:	80 e7       	ldi	r24, 0x70	; 112
    3bd0:	91 e0       	ldi	r25, 0x01	; 1
    3bd2:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINTLN(xgOffsetTC);
    3bd6:	6a 2d       	mov	r22, r10
    3bd8:	0a 2c       	mov	r0, r10
    3bda:	00 0c       	add	r0, r0
    3bdc:	77 0b       	sbc	r23, r23
    3bde:	4a e0       	ldi	r20, 0x0A	; 10
    3be0:	50 e0       	ldi	r21, 0x00	; 0
    3be2:	80 e7       	ldi	r24, 0x70	; 112
    3be4:	91 e0       	ldi	r25, 0x01	; 1
    3be6:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_ZN5Print7printlnEii>
    DEBUG_PRINT(F("Y gyro offset = "));
    3bea:	69 e7       	ldi	r22, 0x79	; 121
    3bec:	7b e0       	ldi	r23, 0x0B	; 11
    3bee:	80 e7       	ldi	r24, 0x70	; 112
    3bf0:	91 e0       	ldi	r25, 0x01	; 1
    3bf2:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINTLN(ygOffsetTC);
    3bf6:	6b 2d       	mov	r22, r11
    3bf8:	0b 2c       	mov	r0, r11
    3bfa:	00 0c       	add	r0, r0
    3bfc:	77 0b       	sbc	r23, r23
    3bfe:	4a e0       	ldi	r20, 0x0A	; 10
    3c00:	50 e0       	ldi	r21, 0x00	; 0
    3c02:	80 e7       	ldi	r24, 0x70	; 112
    3c04:	91 e0       	ldi	r25, 0x01	; 1
    3c06:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_ZN5Print7printlnEii>
    DEBUG_PRINT(F("Z gyro offset = "));
    3c0a:	68 e6       	ldi	r22, 0x68	; 104
    3c0c:	7b e0       	ldi	r23, 0x0B	; 11
    3c0e:	80 e7       	ldi	r24, 0x70	; 112
    3c10:	91 e0       	ldi	r25, 0x01	; 1
    3c12:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINTLN(zgOffsetTC);
    3c16:	61 2f       	mov	r22, r17
    3c18:	01 2e       	mov	r0, r17
    3c1a:	00 0c       	add	r0, r0
    3c1c:	77 0b       	sbc	r23, r23
    3c1e:	4a e0       	ldi	r20, 0x0A	; 10
    3c20:	50 e0       	ldi	r21, 0x00	; 0
    3c22:	80 e7       	ldi	r24, 0x70	; 112
    3c24:	91 e0       	ldi	r25, 0x01	; 1
    3c26:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_ZN5Print7printlnEii>

    // setup weird slave stuff (?)
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
    3c2a:	65 e4       	ldi	r22, 0x45	; 69
    3c2c:	7b e0       	ldi	r23, 0x0B	; 11
    3c2e:	80 e7       	ldi	r24, 0x70	; 112
    3c30:	91 e0       	ldi	r25, 0x01	; 1
    3c32:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setSlaveAddress(0, 0x7F);
    3c36:	4f e7       	ldi	r20, 0x7F	; 127
    3c38:	60 e0       	ldi	r22, 0x00	; 0
    3c3a:	c4 01       	movw	r24, r8
    3c3c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
    3c40:	68 e2       	ldi	r22, 0x28	; 40
    3c42:	7b e0       	ldi	r23, 0x0B	; 11
    3c44:	80 e7       	ldi	r24, 0x70	; 112
    3c46:	91 e0       	ldi	r25, 0x01	; 1
    3c48:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setI2CMasterModeEnabled(false);
    3c4c:	60 e0       	ldi	r22, 0x00	; 0
    3c4e:	c4 01       	movw	r24, r8
    3c50:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <_ZN7MPU605023setI2CMasterModeEnabledEb>
    DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
    3c54:	6e ef       	ldi	r22, 0xFE	; 254
    3c56:	7a e0       	ldi	r23, 0x0A	; 10
    3c58:	80 e7       	ldi	r24, 0x70	; 112
    3c5a:	91 e0       	ldi	r25, 0x01	; 1
    3c5c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    setSlaveAddress(0, 0x68);
    3c60:	48 e6       	ldi	r20, 0x68	; 104
    3c62:	60 e0       	ldi	r22, 0x00	; 0
    3c64:	c4 01       	movw	r24, r8
    3c66:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <_ZN7MPU605015setSlaveAddressEhh>
    DEBUG_PRINTLN(F("Resetting I2C Master control..."));
    3c6a:	6e ed       	ldi	r22, 0xDE	; 222
    3c6c:	7a e0       	ldi	r23, 0x0A	; 10
    3c6e:	80 e7       	ldi	r24, 0x70	; 112
    3c70:	91 e0       	ldi	r25, 0x01	; 1
    3c72:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    resetI2CMaster();
    3c76:	c4 01       	movw	r24, r8
    3c78:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN7MPU605014resetI2CMasterEv>
    delay(20);
    3c7c:	64 e1       	ldi	r22, 0x14	; 20
    3c7e:	70 e0       	ldi	r23, 0x00	; 0
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	0e 94 54 11 	call	0x22a8	; 0x22a8 <delay>

    // load DMP code into memory banks
    DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
    3c88:	67 eb       	ldi	r22, 0xB7	; 183
    3c8a:	7a e0       	ldi	r23, 0x0A	; 10
    3c8c:	80 e7       	ldi	r24, 0x70	; 112
    3c8e:	91 e0       	ldi	r25, 0x01	; 1
    3c90:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
    DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
    3c94:	4a e0       	ldi	r20, 0x0A	; 10
    3c96:	50 e0       	ldi	r21, 0x00	; 0
    3c98:	69 e8       	ldi	r22, 0x89	; 137
    3c9a:	77 e0       	ldi	r23, 0x07	; 7
    3c9c:	80 e7       	ldi	r24, 0x70	; 112
    3c9e:	91 e0       	ldi	r25, 0x01	; 1
    3ca0:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_ZN5Print5printEii>
    DEBUG_PRINTLN(F(" bytes)"));
    3ca4:	6f ea       	ldi	r22, 0xAF	; 175
    3ca6:	7a e0       	ldi	r23, 0x0A	; 10
    3ca8:	80 e7       	ldi	r24, 0x70	; 112
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
    3cb0:	ee 24       	eor	r14, r14
    3cb2:	e3 94       	inc	r14
    3cb4:	00 e0       	ldi	r16, 0x00	; 0
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	49 e8       	ldi	r20, 0x89	; 137
    3cba:	57 e0       	ldi	r21, 0x07	; 7
    3cbc:	6b ea       	ldi	r22, 0xAB	; 171
    3cbe:	7d e0       	ldi	r23, 0x0D	; 13
    3cc0:	c4 01       	movw	r24, r8
    3cc2:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_ZN7MPU605020writeProgMemoryBlockEPKhjhhb>
    3cc6:	88 23       	and	r24, r24
    3cc8:	09 f4       	brne	.+2      	; 0x3ccc <_ZN7MPU605013dmpInitializeEv+0x224>
    3cca:	59 c3       	rjmp	.+1714   	; 0x437e <_ZN7MPU605013dmpInitializeEv+0x8d6>
        DEBUG_PRINTLN(F("Success! DMP code written and verified."));
    3ccc:	67 e8       	ldi	r22, 0x87	; 135
    3cce:	7a e0       	ldi	r23, 0x0A	; 10
    3cd0:	80 e7       	ldi	r24, 0x70	; 112
    3cd2:	91 e0       	ldi	r25, 0x01	; 1
    3cd4:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>

        // write DMP configuration
        DEBUG_PRINT(F("Writing DMP configuration to MPU memory banks ("));
    3cd8:	67 e5       	ldi	r22, 0x57	; 87
    3cda:	7a e0       	ldi	r23, 0x0A	; 10
    3cdc:	80 e7       	ldi	r24, 0x70	; 112
    3cde:	91 e0       	ldi	r25, 0x01	; 1
    3ce0:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
        DEBUG_PRINT(MPU6050_DMP_CONFIG_SIZE);
    3ce4:	4a e0       	ldi	r20, 0x0A	; 10
    3ce6:	50 e0       	ldi	r21, 0x00	; 0
    3ce8:	60 ec       	ldi	r22, 0xC0	; 192
    3cea:	70 e0       	ldi	r23, 0x00	; 0
    3cec:	80 e7       	ldi	r24, 0x70	; 112
    3cee:	91 e0       	ldi	r25, 0x01	; 1
    3cf0:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_ZN5Print5printEii>
        DEBUG_PRINTLN(F(" bytes in config def)"));
    3cf4:	61 e4       	ldi	r22, 0x41	; 65
    3cf6:	7a e0       	ldi	r23, 0x0A	; 10
    3cf8:	80 e7       	ldi	r24, 0x70	; 112
    3cfa:	91 e0       	ldi	r25, 0x01	; 1
    3cfc:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
    3d00:	40 ec       	ldi	r20, 0xC0	; 192
    3d02:	50 e0       	ldi	r21, 0x00	; 0
    3d04:	6b ee       	ldi	r22, 0xEB	; 235
    3d06:	7c e0       	ldi	r23, 0x0C	; 12
    3d08:	c4 01       	movw	r24, r8
    3d0a:	0e 94 2f 19 	call	0x325e	; 0x325e <_ZN7MPU605028writeProgDMPConfigurationSetEPKhj>
    3d0e:	88 23       	and	r24, r24
    3d10:	09 f4       	brne	.+2      	; 0x3d14 <_ZN7MPU605013dmpInitializeEv+0x26c>
    3d12:	2d c3       	rjmp	.+1626   	; 0x436e <_ZN7MPU605013dmpInitializeEv+0x8c6>
            DEBUG_PRINTLN(F("Success! DMP configuration written and verified."));
    3d14:	60 e1       	ldi	r22, 0x10	; 16
    3d16:	7a e0       	ldi	r23, 0x0A	; 10
    3d18:	80 e7       	ldi	r24, 0x70	; 112
    3d1a:	91 e0       	ldi	r25, 0x01	; 1
    3d1c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>

            DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
    3d20:	6e ee       	ldi	r22, 0xEE	; 238
    3d22:	79 e0       	ldi	r23, 0x09	; 9
    3d24:	80 e7       	ldi	r24, 0x70	; 112
    3d26:	91 e0       	ldi	r25, 0x01	; 1
    3d28:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
    3d2c:	63 e0       	ldi	r22, 0x03	; 3
    3d2e:	c4 01       	movw	r24, r8
    3d30:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <_ZN7MPU605014setClockSourceEh>

            DEBUG_PRINTLN(F("Setting DMP and FIFO_OFLOW interrupts enabled..."));
    3d34:	6d eb       	ldi	r22, 0xBD	; 189
    3d36:	79 e0       	ldi	r23, 0x09	; 9
    3d38:	80 e7       	ldi	r24, 0x70	; 112
    3d3a:	91 e0       	ldi	r25, 0x01	; 1
    3d3c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setIntEnabled(0x12);
    3d40:	62 e1       	ldi	r22, 0x12	; 18
    3d42:	c4 01       	movw	r24, r8
    3d44:	0e 94 6d 15 	call	0x2ada	; 0x2ada <_ZN7MPU605013setIntEnabledEh>

            DEBUG_PRINTLN(F("Setting sample rate to 200Hz..."));
    3d48:	6d e9       	ldi	r22, 0x9D	; 157
    3d4a:	79 e0       	ldi	r23, 0x09	; 9
    3d4c:	80 e7       	ldi	r24, 0x70	; 112
    3d4e:	91 e0       	ldi	r25, 0x01	; 1
    3d50:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setRate(4); // 1khz / (1 + 4) = 200 Hz
    3d54:	64 e0       	ldi	r22, 0x04	; 4
    3d56:	c4 01       	movw	r24, r8
    3d58:	0e 94 13 15 	call	0x2a26	; 0x2a26 <_ZN7MPU60507setRateEh>

            DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
    3d5c:	6d e6       	ldi	r22, 0x6D	; 109
    3d5e:	79 e0       	ldi	r23, 0x09	; 9
    3d60:	80 e7       	ldi	r24, 0x70	; 112
    3d62:	91 e0       	ldi	r25, 0x01	; 1
    3d64:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
    3d68:	61 e0       	ldi	r22, 0x01	; 1
    3d6a:	c4 01       	movw	r24, r8
    3d6c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_ZN7MPU605020setExternalFrameSyncEh>

            DEBUG_PRINTLN(F("Setting DLPF bandwidth to 42Hz..."));
    3d70:	6b e4       	ldi	r22, 0x4B	; 75
    3d72:	79 e0       	ldi	r23, 0x09	; 9
    3d74:	80 e7       	ldi	r24, 0x70	; 112
    3d76:	91 e0       	ldi	r25, 0x01	; 1
    3d78:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setDLPFMode(MPU6050_DLPF_BW_42);
    3d7c:	63 e0       	ldi	r22, 0x03	; 3
    3d7e:	c4 01       	movw	r24, r8
    3d80:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <_ZN7MPU605011setDLPFModeEh>

            DEBUG_PRINTLN(F("Setting gyro sensitivity to +/- 2000 deg/sec..."));
    3d84:	6b e1       	ldi	r22, 0x1B	; 27
    3d86:	79 e0       	ldi	r23, 0x09	; 9
    3d88:	80 e7       	ldi	r24, 0x70	; 112
    3d8a:	91 e0       	ldi	r25, 0x01	; 1
    3d8c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setFullScaleGyroRange(MPU6050_GYRO_FS_2000);
    3d90:	63 e0       	ldi	r22, 0x03	; 3
    3d92:	c4 01       	movw	r24, r8
    3d94:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN7MPU605021setFullScaleGyroRangeEh>

            DEBUG_PRINTLN(F("Setting DMP configuration bytes (function unknown)..."));
    3d98:	65 ee       	ldi	r22, 0xE5	; 229
    3d9a:	78 e0       	ldi	r23, 0x08	; 8
    3d9c:	80 e7       	ldi	r24, 0x70	; 112
    3d9e:	91 e0       	ldi	r25, 0x01	; 1
    3da0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setDMPConfig1(0x03);
    3da4:	63 e0       	ldi	r22, 0x03	; 3
    3da6:	c4 01       	movw	r24, r8
    3da8:	0e 94 33 19 	call	0x3266	; 0x3266 <_ZN7MPU605013setDMPConfig1Eh>
            setDMPConfig2(0x00);
    3dac:	60 e0       	ldi	r22, 0x00	; 0
    3dae:	c4 01       	movw	r24, r8
    3db0:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7MPU605013setDMPConfig2Eh>

            DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
    3db4:	6b ec       	ldi	r22, 0xCB	; 203
    3db6:	78 e0       	ldi	r23, 0x08	; 8
    3db8:	80 e7       	ldi	r24, 0x70	; 112
    3dba:	91 e0       	ldi	r25, 0x01	; 1
    3dbc:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setOTPBankValid(false);
    3dc0:	60 e0       	ldi	r22, 0x00	; 0
    3dc2:	c4 01       	movw	r24, r8
    3dc4:	0e 94 43 16 	call	0x2c86	; 0x2c86 <_ZN7MPU605015setOTPBankValidEb>

            DEBUG_PRINTLN(F("Setting X/Y/Z gyro offset TCs to previous values..."));
    3dc8:	67 e9       	ldi	r22, 0x97	; 151
    3dca:	78 e0       	ldi	r23, 0x08	; 8
    3dcc:	80 e7       	ldi	r24, 0x70	; 112
    3dce:	91 e0       	ldi	r25, 0x01	; 1
    3dd0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setXGyroOffsetTC(xgOffsetTC);
    3dd4:	6a 2d       	mov	r22, r10
    3dd6:	c4 01       	movw	r24, r8
    3dd8:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN7MPU605016setXGyroOffsetTCEa>
            setYGyroOffsetTC(ygOffsetTC);
    3ddc:	6b 2d       	mov	r22, r11
    3dde:	c4 01       	movw	r24, r8
    3de0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN7MPU605016setYGyroOffsetTCEa>
            setZGyroOffsetTC(zgOffsetTC);
    3de4:	61 2f       	mov	r22, r17
    3de6:	c4 01       	movw	r24, r8
    3de8:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <_ZN7MPU605016setZGyroOffsetTCEa>
            //DEBUG_PRINTLN(F("Setting X/Y/Z gyro user offsets to zero..."));
            //setXGyroOffset(0);
            //setYGyroOffset(0);
            //setZGyroOffset(0);

            DEBUG_PRINTLN(F("Writing final memory update 1/7 (function unknown)..."));
    3dec:	61 e6       	ldi	r22, 0x61	; 97
    3dee:	78 e0       	ldi	r23, 0x08	; 8
    3df0:	80 e7       	ldi	r24, 0x70	; 112
    3df2:	91 e0       	ldi	r25, 0x01	; 1
    3df4:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
    3df8:	a1 2c       	mov	r10, r1
    3dfa:	b1 2c       	mov	r11, r1
    3dfc:	f5 01       	movw	r30, r10
    3dfe:	e4 54       	subi	r30, 0x44	; 68
    3e00:	f3 4f       	sbci	r31, 0xF3	; 243
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    3e02:	e4 91       	lpm	r30, Z
    3e04:	a1 e8       	ldi	r26, 0x81	; 129
    3e06:	b0 e0       	ldi	r27, 0x00	; 0
    3e08:	ac 0f       	add	r26, r28
    3e0a:	bd 1f       	adc	r27, r29
    3e0c:	aa 0d       	add	r26, r10
    3e0e:	b1 1d       	adc	r27, r1
    3e10:	ec 93       	st	X, r30
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	8a 0d       	add	r24, r10
    3e16:	9f ef       	ldi	r25, 0xFF	; 255
    3e18:	a9 1a       	sub	r10, r25
    3e1a:	b9 0a       	sbc	r11, r25
    3e1c:	e3 e0       	ldi	r30, 0x03	; 3
    3e1e:	ea 15       	cp	r30, r10
    3e20:	68 f7       	brcc	.-38     	; 0x3dfc <_ZN7MPU605013dmpInitializeEv+0x354>
    3e22:	cd 57       	subi	r28, 0x7D	; 125
    3e24:	df 4f       	sbci	r29, 0xFF	; 255
    3e26:	48 81       	ld	r20, Y
    3e28:	c3 58       	subi	r28, 0x83	; 131
    3e2a:	d0 40       	sbci	r29, 0x00	; 0
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	24 2f       	mov	r18, r20
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	2d 5f       	subi	r18, 0xFD	; 253
    3e34:	3f 4f       	sbci	r19, 0xFF	; 255
    3e36:	82 17       	cp	r24, r18
    3e38:	93 07       	cpc	r25, r19
    3e3a:	04 f3       	brlt	.-64     	; 0x3dfc <_ZN7MPU605013dmpInitializeEv+0x354>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    3e3c:	50 e0       	ldi	r21, 0x00	; 0
    3e3e:	61 e8       	ldi	r22, 0x81	; 129
    3e40:	70 e0       	ldi	r23, 0x00	; 0
    3e42:	6c 0f       	add	r22, r28
    3e44:	7d 1f       	adc	r23, r29
    3e46:	6d 5f       	subi	r22, 0xFD	; 253
    3e48:	7f 4f       	sbci	r23, 0xFF	; 255
    3e4a:	c1 2c       	mov	r12, r1
    3e4c:	ee 24       	eor	r14, r14
    3e4e:	e3 94       	inc	r14
    3e50:	ce 57       	subi	r28, 0x7E	; 126
    3e52:	df 4f       	sbci	r29, 0xFF	; 255
    3e54:	08 81       	ld	r16, Y
    3e56:	c2 58       	subi	r28, 0x82	; 130
    3e58:	d0 40       	sbci	r29, 0x00	; 0
    3e5a:	cf 57       	subi	r28, 0x7F	; 127
    3e5c:	df 4f       	sbci	r29, 0xFF	; 255
    3e5e:	28 81       	ld	r18, Y
    3e60:	c1 58       	subi	r28, 0x81	; 129
    3e62:	d0 40       	sbci	r29, 0x00	; 0
    3e64:	c4 01       	movw	r24, r8
    3e66:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("Writing final memory update 2/7 (function unknown)..."));
    3e6a:	6b e2       	ldi	r22, 0x2B	; 43
    3e6c:	78 e0       	ldi	r23, 0x08	; 8
    3e6e:	80 e7       	ldi	r24, 0x70	; 112
    3e70:	91 e0       	ldi	r25, 0x01	; 1
    3e72:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	f5 01       	movw	r30, r10
    3e7a:	e4 54       	subi	r30, 0x44	; 68
    3e7c:	f3 4f       	sbci	r31, 0xF3	; 243
    3e7e:	e4 91       	lpm	r30, Z
    3e80:	a1 e8       	ldi	r26, 0x81	; 129
    3e82:	b0 e0       	ldi	r27, 0x00	; 0
    3e84:	ac 0f       	add	r26, r28
    3e86:	bd 1f       	adc	r27, r29
    3e88:	a8 0f       	add	r26, r24
    3e8a:	b1 1d       	adc	r27, r1
    3e8c:	ec 93       	st	X, r30
    3e8e:	8f 5f       	subi	r24, 0xFF	; 255
    3e90:	ff ef       	ldi	r31, 0xFF	; 255
    3e92:	af 1a       	sub	r10, r31
    3e94:	bf 0a       	sbc	r11, r31
    3e96:	84 30       	cpi	r24, 0x04	; 4
    3e98:	78 f3       	brcs	.-34     	; 0x3e78 <_ZN7MPU605013dmpInitializeEv+0x3d0>
    3e9a:	cd 57       	subi	r28, 0x7D	; 125
    3e9c:	df 4f       	sbci	r29, 0xFF	; 255
    3e9e:	48 81       	ld	r20, Y
    3ea0:	c3 58       	subi	r28, 0x83	; 131
    3ea2:	d0 40       	sbci	r29, 0x00	; 0
    3ea4:	68 2f       	mov	r22, r24
    3ea6:	70 e0       	ldi	r23, 0x00	; 0
    3ea8:	24 2f       	mov	r18, r20
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	2d 5f       	subi	r18, 0xFD	; 253
    3eae:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb0:	62 17       	cp	r22, r18
    3eb2:	73 07       	cpc	r23, r19
    3eb4:	0c f3       	brlt	.-62     	; 0x3e78 <_ZN7MPU605013dmpInitializeEv+0x3d0>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    3eb6:	50 e0       	ldi	r21, 0x00	; 0
    3eb8:	61 e8       	ldi	r22, 0x81	; 129
    3eba:	70 e0       	ldi	r23, 0x00	; 0
    3ebc:	6c 0f       	add	r22, r28
    3ebe:	7d 1f       	adc	r23, r29
    3ec0:	6d 5f       	subi	r22, 0xFD	; 253
    3ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec4:	c1 2c       	mov	r12, r1
    3ec6:	ee 24       	eor	r14, r14
    3ec8:	e3 94       	inc	r14
    3eca:	ce 57       	subi	r28, 0x7E	; 126
    3ecc:	df 4f       	sbci	r29, 0xFF	; 255
    3ece:	08 81       	ld	r16, Y
    3ed0:	c2 58       	subi	r28, 0x82	; 130
    3ed2:	d0 40       	sbci	r29, 0x00	; 0
    3ed4:	cf 57       	subi	r28, 0x7F	; 127
    3ed6:	df 4f       	sbci	r29, 0xFF	; 255
    3ed8:	28 81       	ld	r18, Y
    3eda:	c1 58       	subi	r28, 0x81	; 129
    3edc:	d0 40       	sbci	r29, 0x00	; 0
    3ede:	c4 01       	movw	r24, r8
    3ee0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
    3ee4:	69 e1       	ldi	r22, 0x19	; 25
    3ee6:	78 e0       	ldi	r23, 0x08	; 8
    3ee8:	80 e7       	ldi	r24, 0x70	; 112
    3eea:	91 e0       	ldi	r25, 0x01	; 1
    3eec:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            resetFIFO();
    3ef0:	c4 01       	movw	r24, r8
    3ef2:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Reading FIFO count..."));
    3ef6:	63 e0       	ldi	r22, 0x03	; 3
    3ef8:	78 e0       	ldi	r23, 0x08	; 8
    3efa:	80 e7       	ldi	r24, 0x70	; 112
    3efc:	91 e0       	ldi	r25, 0x01	; 1
    3efe:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            uint16_t fifoCount = getFIFOCount();
    3f02:	c4 01       	movw	r24, r8
    3f04:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_ZN7MPU605012getFIFOCountEv>
    3f08:	18 2f       	mov	r17, r24
    3f0a:	09 2f       	mov	r16, r25
            uint8_t fifoBuffer[128];

            DEBUG_PRINT(F("Current FIFO count="));
    3f0c:	6f ee       	ldi	r22, 0xEF	; 239
    3f0e:	77 e0       	ldi	r23, 0x07	; 7
    3f10:	80 e7       	ldi	r24, 0x70	; 112
    3f12:	91 e0       	ldi	r25, 0x01	; 1
    3f14:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
            DEBUG_PRINTLN(fifoCount);
    3f18:	4a e0       	ldi	r20, 0x0A	; 10
    3f1a:	50 e0       	ldi	r21, 0x00	; 0
    3f1c:	61 2f       	mov	r22, r17
    3f1e:	70 2f       	mov	r23, r16
    3f20:	80 e7       	ldi	r24, 0x70	; 112
    3f22:	91 e0       	ldi	r25, 0x01	; 1
    3f24:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <_ZN5Print7printlnEji>
            getFIFOBytes(fifoBuffer, fifoCount);
    3f28:	41 2f       	mov	r20, r17
    3f2a:	be 01       	movw	r22, r28
    3f2c:	6f 5f       	subi	r22, 0xFF	; 255
    3f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f30:	c4 01       	movw	r24, r8
    3f32:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
    3f36:	64 ec       	ldi	r22, 0xC4	; 196
    3f38:	77 e0       	ldi	r23, 0x07	; 7
    3f3a:	80 e7       	ldi	r24, 0x70	; 112
    3f3c:	91 e0       	ldi	r25, 0x01	; 1
    3f3e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setMotionDetectionThreshold(2);
    3f42:	62 e0       	ldi	r22, 0x02	; 2
    3f44:	c4 01       	movw	r24, r8
    3f46:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_ZN7MPU605027setMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
    3f4a:	62 e9       	ldi	r22, 0x92	; 146
    3f4c:	77 e0       	ldi	r23, 0x07	; 7
    3f4e:	80 e7       	ldi	r24, 0x70	; 112
    3f50:	91 e0       	ldi	r25, 0x01	; 1
    3f52:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setZeroMotionDetectionThreshold(156);
    3f56:	6c e9       	ldi	r22, 0x9C	; 156
    3f58:	c4 01       	movw	r24, r8
    3f5a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <_ZN7MPU605031setZeroMotionDetectionThresholdEh>

            DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
    3f5e:	67 e6       	ldi	r22, 0x67	; 103
    3f60:	77 e0       	ldi	r23, 0x07	; 7
    3f62:	80 e7       	ldi	r24, 0x70	; 112
    3f64:	91 e0       	ldi	r25, 0x01	; 1
    3f66:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setMotionDetectionDuration(80);
    3f6a:	60 e5       	ldi	r22, 0x50	; 80
    3f6c:	c4 01       	movw	r24, r8
    3f6e:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <_ZN7MPU605026setMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
    3f72:	68 e3       	ldi	r22, 0x38	; 56
    3f74:	77 e0       	ldi	r23, 0x07	; 7
    3f76:	80 e7       	ldi	r24, 0x70	; 112
    3f78:	91 e0       	ldi	r25, 0x01	; 1
    3f7a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setZeroMotionDetectionDuration(0);
    3f7e:	60 e0       	ldi	r22, 0x00	; 0
    3f80:	c4 01       	movw	r24, r8
    3f82:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            DEBUG_PRINTLN(F("Resetting FIFO..."));
    3f86:	66 e2       	ldi	r22, 0x26	; 38
    3f88:	77 e0       	ldi	r23, 0x07	; 7
    3f8a:	80 e7       	ldi	r24, 0x70	; 112
    3f8c:	91 e0       	ldi	r25, 0x01	; 1
    3f8e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            resetFIFO();
    3f92:	c4 01       	movw	r24, r8
    3f94:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <_ZN7MPU60509resetFIFOEv>

            DEBUG_PRINTLN(F("Enabling FIFO..."));
    3f98:	65 e1       	ldi	r22, 0x15	; 21
    3f9a:	77 e0       	ldi	r23, 0x07	; 7
    3f9c:	80 e7       	ldi	r24, 0x70	; 112
    3f9e:	91 e0       	ldi	r25, 0x01	; 1
    3fa0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setFIFOEnabled(true);
    3fa4:	61 e0       	ldi	r22, 0x01	; 1
    3fa6:	c4 01       	movw	r24, r8
    3fa8:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <_ZN7MPU605014setFIFOEnabledEb>

            DEBUG_PRINTLN(F("Enabling DMP..."));
    3fac:	65 e0       	ldi	r22, 0x05	; 5
    3fae:	77 e0       	ldi	r23, 0x07	; 7
    3fb0:	80 e7       	ldi	r24, 0x70	; 112
    3fb2:	91 e0       	ldi	r25, 0x01	; 1
    3fb4:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setDMPEnabled(true);
    3fb8:	61 e0       	ldi	r22, 0x01	; 1
    3fba:	c4 01       	movw	r24, r8
    3fbc:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Resetting DMP..."));
    3fc0:	64 ef       	ldi	r22, 0xF4	; 244
    3fc2:	76 e0       	ldi	r23, 0x06	; 6
    3fc4:	80 e7       	ldi	r24, 0x70	; 112
    3fc6:	91 e0       	ldi	r25, 0x01	; 1
    3fc8:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            resetDMP();
    3fcc:	c4 01       	movw	r24, r8
    3fce:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <_ZN7MPU60508resetDMPEv>

            DEBUG_PRINTLN(F("Writing final memory update 3/7 (function unknown)..."));
    3fd2:	6e eb       	ldi	r22, 0xBE	; 190
    3fd4:	76 e0       	ldi	r23, 0x06	; 6
    3fd6:	80 e7       	ldi	r24, 0x70	; 112
    3fd8:	91 e0       	ldi	r25, 0x01	; 1
    3fda:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	f5 01       	movw	r30, r10
    3fe2:	e4 54       	subi	r30, 0x44	; 68
    3fe4:	f3 4f       	sbci	r31, 0xF3	; 243
    3fe6:	e4 91       	lpm	r30, Z
    3fe8:	a1 e8       	ldi	r26, 0x81	; 129
    3fea:	b0 e0       	ldi	r27, 0x00	; 0
    3fec:	ac 0f       	add	r26, r28
    3fee:	bd 1f       	adc	r27, r29
    3ff0:	a8 0f       	add	r26, r24
    3ff2:	b1 1d       	adc	r27, r1
    3ff4:	ec 93       	st	X, r30
    3ff6:	8f 5f       	subi	r24, 0xFF	; 255
    3ff8:	9f ef       	ldi	r25, 0xFF	; 255
    3ffa:	a9 1a       	sub	r10, r25
    3ffc:	b9 0a       	sbc	r11, r25
    3ffe:	84 30       	cpi	r24, 0x04	; 4
    4000:	78 f3       	brcs	.-34     	; 0x3fe0 <_ZN7MPU605013dmpInitializeEv+0x538>
    4002:	cd 57       	subi	r28, 0x7D	; 125
    4004:	df 4f       	sbci	r29, 0xFF	; 255
    4006:	48 81       	ld	r20, Y
    4008:	c3 58       	subi	r28, 0x83	; 131
    400a:	d0 40       	sbci	r29, 0x00	; 0
    400c:	68 2f       	mov	r22, r24
    400e:	70 e0       	ldi	r23, 0x00	; 0
    4010:	24 2f       	mov	r18, r20
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	2d 5f       	subi	r18, 0xFD	; 253
    4016:	3f 4f       	sbci	r19, 0xFF	; 255
    4018:	62 17       	cp	r22, r18
    401a:	73 07       	cpc	r23, r19
    401c:	0c f3       	brlt	.-62     	; 0x3fe0 <_ZN7MPU605013dmpInitializeEv+0x538>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    401e:	50 e0       	ldi	r21, 0x00	; 0
    4020:	61 e8       	ldi	r22, 0x81	; 129
    4022:	70 e0       	ldi	r23, 0x00	; 0
    4024:	6c 0f       	add	r22, r28
    4026:	7d 1f       	adc	r23, r29
    4028:	6d 5f       	subi	r22, 0xFD	; 253
    402a:	7f 4f       	sbci	r23, 0xFF	; 255
    402c:	c1 2c       	mov	r12, r1
    402e:	ee 24       	eor	r14, r14
    4030:	e3 94       	inc	r14
    4032:	ce 57       	subi	r28, 0x7E	; 126
    4034:	df 4f       	sbci	r29, 0xFF	; 255
    4036:	08 81       	ld	r16, Y
    4038:	c2 58       	subi	r28, 0x82	; 130
    403a:	d0 40       	sbci	r29, 0x00	; 0
    403c:	cf 57       	subi	r28, 0x7F	; 127
    403e:	df 4f       	sbci	r29, 0xFF	; 255
    4040:	28 81       	ld	r18, Y
    4042:	c1 58       	subi	r28, 0x81	; 129
    4044:	d0 40       	sbci	r29, 0x00	; 0
    4046:	c4 01       	movw	r24, r8
    4048:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("Writing final memory update 4/7 (function unknown)..."));
    404c:	68 e8       	ldi	r22, 0x88	; 136
    404e:	76 e0       	ldi	r23, 0x06	; 6
    4050:	80 e7       	ldi	r24, 0x70	; 112
    4052:	91 e0       	ldi	r25, 0x01	; 1
    4054:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	f5 01       	movw	r30, r10
    405c:	e4 54       	subi	r30, 0x44	; 68
    405e:	f3 4f       	sbci	r31, 0xF3	; 243
    4060:	e4 91       	lpm	r30, Z
    4062:	a1 e8       	ldi	r26, 0x81	; 129
    4064:	b0 e0       	ldi	r27, 0x00	; 0
    4066:	ac 0f       	add	r26, r28
    4068:	bd 1f       	adc	r27, r29
    406a:	a8 0f       	add	r26, r24
    406c:	b1 1d       	adc	r27, r1
    406e:	ec 93       	st	X, r30
    4070:	8f 5f       	subi	r24, 0xFF	; 255
    4072:	ef ef       	ldi	r30, 0xFF	; 255
    4074:	ae 1a       	sub	r10, r30
    4076:	be 0a       	sbc	r11, r30
    4078:	84 30       	cpi	r24, 0x04	; 4
    407a:	78 f3       	brcs	.-34     	; 0x405a <_ZN7MPU605013dmpInitializeEv+0x5b2>
    407c:	cd 57       	subi	r28, 0x7D	; 125
    407e:	df 4f       	sbci	r29, 0xFF	; 255
    4080:	48 81       	ld	r20, Y
    4082:	c3 58       	subi	r28, 0x83	; 131
    4084:	d0 40       	sbci	r29, 0x00	; 0
    4086:	68 2f       	mov	r22, r24
    4088:	70 e0       	ldi	r23, 0x00	; 0
    408a:	24 2f       	mov	r18, r20
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	2d 5f       	subi	r18, 0xFD	; 253
    4090:	3f 4f       	sbci	r19, 0xFF	; 255
    4092:	62 17       	cp	r22, r18
    4094:	73 07       	cpc	r23, r19
    4096:	0c f3       	brlt	.-62     	; 0x405a <_ZN7MPU605013dmpInitializeEv+0x5b2>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    4098:	50 e0       	ldi	r21, 0x00	; 0
    409a:	61 e8       	ldi	r22, 0x81	; 129
    409c:	70 e0       	ldi	r23, 0x00	; 0
    409e:	6c 0f       	add	r22, r28
    40a0:	7d 1f       	adc	r23, r29
    40a2:	6d 5f       	subi	r22, 0xFD	; 253
    40a4:	7f 4f       	sbci	r23, 0xFF	; 255
    40a6:	c1 2c       	mov	r12, r1
    40a8:	ee 24       	eor	r14, r14
    40aa:	e3 94       	inc	r14
    40ac:	ce 57       	subi	r28, 0x7E	; 126
    40ae:	df 4f       	sbci	r29, 0xFF	; 255
    40b0:	08 81       	ld	r16, Y
    40b2:	c2 58       	subi	r28, 0x82	; 130
    40b4:	d0 40       	sbci	r29, 0x00	; 0
    40b6:	cf 57       	subi	r28, 0x7F	; 127
    40b8:	df 4f       	sbci	r29, 0xFF	; 255
    40ba:	28 81       	ld	r18, Y
    40bc:	c1 58       	subi	r28, 0x81	; 129
    40be:	d0 40       	sbci	r29, 0x00	; 0
    40c0:	c4 01       	movw	r24, r8
    40c2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("Writing final memory update 5/7 (function unknown)..."));
    40c6:	62 e5       	ldi	r22, 0x52	; 82
    40c8:	76 e0       	ldi	r23, 0x06	; 6
    40ca:	80 e7       	ldi	r24, 0x70	; 112
    40cc:	91 e0       	ldi	r25, 0x01	; 1
    40ce:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	f5 01       	movw	r30, r10
    40d6:	e4 54       	subi	r30, 0x44	; 68
    40d8:	f3 4f       	sbci	r31, 0xF3	; 243
    40da:	e4 91       	lpm	r30, Z
    40dc:	a1 e8       	ldi	r26, 0x81	; 129
    40de:	b0 e0       	ldi	r27, 0x00	; 0
    40e0:	ac 0f       	add	r26, r28
    40e2:	bd 1f       	adc	r27, r29
    40e4:	a8 0f       	add	r26, r24
    40e6:	b1 1d       	adc	r27, r1
    40e8:	ec 93       	st	X, r30
    40ea:	8f 5f       	subi	r24, 0xFF	; 255
    40ec:	ff ef       	ldi	r31, 0xFF	; 255
    40ee:	af 1a       	sub	r10, r31
    40f0:	bf 0a       	sbc	r11, r31
    40f2:	84 30       	cpi	r24, 0x04	; 4
    40f4:	78 f3       	brcs	.-34     	; 0x40d4 <_ZN7MPU605013dmpInitializeEv+0x62c>
    40f6:	cd 57       	subi	r28, 0x7D	; 125
    40f8:	df 4f       	sbci	r29, 0xFF	; 255
    40fa:	48 81       	ld	r20, Y
    40fc:	c3 58       	subi	r28, 0x83	; 131
    40fe:	d0 40       	sbci	r29, 0x00	; 0
    4100:	68 2f       	mov	r22, r24
    4102:	70 e0       	ldi	r23, 0x00	; 0
    4104:	24 2f       	mov	r18, r20
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	2d 5f       	subi	r18, 0xFD	; 253
    410a:	3f 4f       	sbci	r19, 0xFF	; 255
    410c:	62 17       	cp	r22, r18
    410e:	73 07       	cpc	r23, r19
    4110:	0c f3       	brlt	.-62     	; 0x40d4 <_ZN7MPU605013dmpInitializeEv+0x62c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    4112:	50 e0       	ldi	r21, 0x00	; 0
    4114:	61 e8       	ldi	r22, 0x81	; 129
    4116:	70 e0       	ldi	r23, 0x00	; 0
    4118:	6c 0f       	add	r22, r28
    411a:	7d 1f       	adc	r23, r29
    411c:	6d 5f       	subi	r22, 0xFD	; 253
    411e:	7f 4f       	sbci	r23, 0xFF	; 255
    4120:	c1 2c       	mov	r12, r1
    4122:	ee 24       	eor	r14, r14
    4124:	e3 94       	inc	r14
    4126:	ce 57       	subi	r28, 0x7E	; 126
    4128:	df 4f       	sbci	r29, 0xFF	; 255
    412a:	08 81       	ld	r16, Y
    412c:	c2 58       	subi	r28, 0x82	; 130
    412e:	d0 40       	sbci	r29, 0x00	; 0
    4130:	cf 57       	subi	r28, 0x7F	; 127
    4132:	df 4f       	sbci	r29, 0xFF	; 255
    4134:	28 81       	ld	r18, Y
    4136:	c1 58       	subi	r28, 0x81	; 129
    4138:	d0 40       	sbci	r29, 0x00	; 0
    413a:	c4 01       	movw	r24, r8
    413c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
    4140:	64 e3       	ldi	r22, 0x34	; 52
    4142:	76 e0       	ldi	r23, 0x06	; 6
    4144:	80 e7       	ldi	r24, 0x70	; 112
    4146:	91 e0       	ldi	r25, 0x01	; 1
    4148:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            while ((fifoCount = getFIFOCount()) < 3);
    414c:	c4 01       	movw	r24, r8
    414e:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_ZN7MPU605012getFIFOCountEv>
    4152:	8c 01       	movw	r16, r24
    4154:	03 97       	sbiw	r24, 0x03	; 3
    4156:	d0 f3       	brcs	.-12     	; 0x414c <_ZN7MPU605013dmpInitializeEv+0x6a4>

            DEBUG_PRINT(F("Current FIFO count="));
    4158:	60 e2       	ldi	r22, 0x20	; 32
    415a:	76 e0       	ldi	r23, 0x06	; 6
    415c:	80 e7       	ldi	r24, 0x70	; 112
    415e:	91 e0       	ldi	r25, 0x01	; 1
    4160:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
            DEBUG_PRINTLN(fifoCount);
    4164:	4a e0       	ldi	r20, 0x0A	; 10
    4166:	50 e0       	ldi	r21, 0x00	; 0
    4168:	b8 01       	movw	r22, r16
    416a:	80 e7       	ldi	r24, 0x70	; 112
    416c:	91 e0       	ldi	r25, 0x01	; 1
    416e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <_ZN5Print7printlnEji>
            DEBUG_PRINTLN(F("Reading FIFO data..."));
    4172:	6b e0       	ldi	r22, 0x0B	; 11
    4174:	76 e0       	ldi	r23, 0x06	; 6
    4176:	80 e7       	ldi	r24, 0x70	; 112
    4178:	91 e0       	ldi	r25, 0x01	; 1
    417a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            getFIFOBytes(fifoBuffer, fifoCount);
    417e:	40 2f       	mov	r20, r16
    4180:	be 01       	movw	r22, r28
    4182:	6f 5f       	subi	r22, 0xFF	; 255
    4184:	7f 4f       	sbci	r23, 0xFF	; 255
    4186:	c4 01       	movw	r24, r8
    4188:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
    418c:	6f ee       	ldi	r22, 0xEF	; 239
    418e:	75 e0       	ldi	r23, 0x05	; 5
    4190:	80 e7       	ldi	r24, 0x70	; 112
    4192:	91 e0       	ldi	r25, 0x01	; 1
    4194:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>

            DEBUG_PRINT(F("Current interrupt status="));
    4198:	65 ed       	ldi	r22, 0xD5	; 213
    419a:	75 e0       	ldi	r23, 0x05	; 5
    419c:	80 e7       	ldi	r24, 0x70	; 112
    419e:	91 e0       	ldi	r25, 0x01	; 1
    41a0:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
            DEBUG_PRINTLNF(getIntStatus(), HEX);
    41a4:	c4 01       	movw	r24, r8
    41a6:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <_ZN7MPU605012getIntStatusEv>
    41aa:	40 e1       	ldi	r20, 0x10	; 16
    41ac:	50 e0       	ldi	r21, 0x00	; 0
    41ae:	68 2f       	mov	r22, r24
    41b0:	80 e7       	ldi	r24, 0x70	; 112
    41b2:	91 e0       	ldi	r25, 0x01	; 1
    41b4:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_ZN5Print7printlnEhi>

            DEBUG_PRINTLN(F("Reading final memory update 6/7 (function unknown)..."));
    41b8:	6f e9       	ldi	r22, 0x9F	; 159
    41ba:	75 e0       	ldi	r23, 0x05	; 5
    41bc:	80 e7       	ldi	r24, 0x70	; 112
    41be:	91 e0       	ldi	r25, 0x01	; 1
    41c0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	f5 01       	movw	r30, r10
    41c8:	e4 54       	subi	r30, 0x44	; 68
    41ca:	f3 4f       	sbci	r31, 0xF3	; 243
    41cc:	e4 91       	lpm	r30, Z
    41ce:	a1 e8       	ldi	r26, 0x81	; 129
    41d0:	b0 e0       	ldi	r27, 0x00	; 0
    41d2:	ac 0f       	add	r26, r28
    41d4:	bd 1f       	adc	r27, r29
    41d6:	a8 0f       	add	r26, r24
    41d8:	b1 1d       	adc	r27, r1
    41da:	ec 93       	st	X, r30
    41dc:	8f 5f       	subi	r24, 0xFF	; 255
    41de:	9f ef       	ldi	r25, 0xFF	; 255
    41e0:	a9 1a       	sub	r10, r25
    41e2:	b9 0a       	sbc	r11, r25
    41e4:	84 30       	cpi	r24, 0x04	; 4
    41e6:	78 f3       	brcs	.-34     	; 0x41c6 <_ZN7MPU605013dmpInitializeEv+0x71e>
    41e8:	cd 57       	subi	r28, 0x7D	; 125
    41ea:	df 4f       	sbci	r29, 0xFF	; 255
    41ec:	48 81       	ld	r20, Y
    41ee:	c3 58       	subi	r28, 0x83	; 131
    41f0:	d0 40       	sbci	r29, 0x00	; 0
    41f2:	68 2f       	mov	r22, r24
    41f4:	70 e0       	ldi	r23, 0x00	; 0
    41f6:	24 2f       	mov	r18, r20
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	2d 5f       	subi	r18, 0xFD	; 253
    41fc:	3f 4f       	sbci	r19, 0xFF	; 255
    41fe:	62 17       	cp	r22, r18
    4200:	73 07       	cpc	r23, r19
    4202:	0c f3       	brlt	.-62     	; 0x41c6 <_ZN7MPU605013dmpInitializeEv+0x71e>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    4204:	50 e0       	ldi	r21, 0x00	; 0
    4206:	61 e8       	ldi	r22, 0x81	; 129
    4208:	70 e0       	ldi	r23, 0x00	; 0
    420a:	6c 0f       	add	r22, r28
    420c:	7d 1f       	adc	r23, r29
    420e:	6d 5f       	subi	r22, 0xFD	; 253
    4210:	7f 4f       	sbci	r23, 0xFF	; 255
    4212:	ce 57       	subi	r28, 0x7E	; 126
    4214:	df 4f       	sbci	r29, 0xFF	; 255
    4216:	08 81       	ld	r16, Y
    4218:	c2 58       	subi	r28, 0x82	; 130
    421a:	d0 40       	sbci	r29, 0x00	; 0
    421c:	cf 57       	subi	r28, 0x7F	; 127
    421e:	df 4f       	sbci	r29, 0xFF	; 255
    4220:	28 81       	ld	r18, Y
    4222:	c1 58       	subi	r28, 0x81	; 129
    4224:	d0 40       	sbci	r29, 0x00	; 0
    4226:	c4 01       	movw	r24, r8
    4228:	0e 94 11 17 	call	0x2e22	; 0x2e22 <_ZN7MPU605015readMemoryBlockEPhjhh>

            DEBUG_PRINTLN(F("Waiting for FIFO count > 2..."));
    422c:	61 e8       	ldi	r22, 0x81	; 129
    422e:	75 e0       	ldi	r23, 0x05	; 5
    4230:	80 e7       	ldi	r24, 0x70	; 112
    4232:	91 e0       	ldi	r25, 0x01	; 1
    4234:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            while ((fifoCount = getFIFOCount()) < 3);
    4238:	c4 01       	movw	r24, r8
    423a:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_ZN7MPU605012getFIFOCountEv>
    423e:	8c 01       	movw	r16, r24
    4240:	03 97       	sbiw	r24, 0x03	; 3
    4242:	d0 f3       	brcs	.-12     	; 0x4238 <_ZN7MPU605013dmpInitializeEv+0x790>

            DEBUG_PRINT(F("Current FIFO count="));
    4244:	6d e6       	ldi	r22, 0x6D	; 109
    4246:	75 e0       	ldi	r23, 0x05	; 5
    4248:	80 e7       	ldi	r24, 0x70	; 112
    424a:	91 e0       	ldi	r25, 0x01	; 1
    424c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
            DEBUG_PRINTLN(fifoCount);
    4250:	4a e0       	ldi	r20, 0x0A	; 10
    4252:	50 e0       	ldi	r21, 0x00	; 0
    4254:	b8 01       	movw	r22, r16
    4256:	80 e7       	ldi	r24, 0x70	; 112
    4258:	91 e0       	ldi	r25, 0x01	; 1
    425a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <_ZN5Print7printlnEji>

            DEBUG_PRINTLN(F("Reading FIFO data..."));
    425e:	68 e5       	ldi	r22, 0x58	; 88
    4260:	75 e0       	ldi	r23, 0x05	; 5
    4262:	80 e7       	ldi	r24, 0x70	; 112
    4264:	91 e0       	ldi	r25, 0x01	; 1
    4266:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            getFIFOBytes(fifoBuffer, fifoCount);
    426a:	40 2f       	mov	r20, r16
    426c:	be 01       	movw	r22, r28
    426e:	6f 5f       	subi	r22, 0xFF	; 255
    4270:	7f 4f       	sbci	r23, 0xFF	; 255
    4272:	c4 01       	movw	r24, r8
    4274:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7MPU605012getFIFOBytesEPhh>

            DEBUG_PRINTLN(F("Reading interrupt status..."));
    4278:	6c e3       	ldi	r22, 0x3C	; 60
    427a:	75 e0       	ldi	r23, 0x05	; 5
    427c:	80 e7       	ldi	r24, 0x70	; 112
    427e:	91 e0       	ldi	r25, 0x01	; 1
    4280:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>

            DEBUG_PRINT(F("Current interrupt status="));
    4284:	62 e2       	ldi	r22, 0x22	; 34
    4286:	75 e0       	ldi	r23, 0x05	; 5
    4288:	80 e7       	ldi	r24, 0x70	; 112
    428a:	91 e0       	ldi	r25, 0x01	; 1
    428c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
            DEBUG_PRINTLNF(getIntStatus(), HEX);
    4290:	c4 01       	movw	r24, r8
    4292:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <_ZN7MPU605012getIntStatusEv>
    4296:	40 e1       	ldi	r20, 0x10	; 16
    4298:	50 e0       	ldi	r21, 0x00	; 0
    429a:	68 2f       	mov	r22, r24
    429c:	80 e7       	ldi	r24, 0x70	; 112
    429e:	91 e0       	ldi	r25, 0x01	; 1
    42a0:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_ZN5Print7printlnEhi>

            DEBUG_PRINTLN(F("Writing final memory update 7/7 (function unknown)..."));
    42a4:	6c ee       	ldi	r22, 0xEC	; 236
    42a6:	74 e0       	ldi	r23, 0x04	; 4
    42a8:	80 e7       	ldi	r24, 0x70	; 112
    42aa:	91 e0       	ldi	r25, 0x01	; 1
    42ac:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    42b0:	f5 01       	movw	r30, r10
    42b2:	e4 54       	subi	r30, 0x44	; 68
    42b4:	f3 4f       	sbci	r31, 0xF3	; 243
            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
    42b6:	80 e0       	ldi	r24, 0x00	; 0
    42b8:	01 c0       	rjmp	.+2      	; 0x42bc <_ZN7MPU605013dmpInitializeEv+0x814>
    42ba:	31 96       	adiw	r30, 0x01	; 1
    42bc:	94 91       	lpm	r25, Z
    42be:	a1 e8       	ldi	r26, 0x81	; 129
    42c0:	b0 e0       	ldi	r27, 0x00	; 0
    42c2:	ac 0f       	add	r26, r28
    42c4:	bd 1f       	adc	r27, r29
    42c6:	a8 0f       	add	r26, r24
    42c8:	b1 1d       	adc	r27, r1
    42ca:	9c 93       	st	X, r25
    42cc:	8f 5f       	subi	r24, 0xFF	; 255
    42ce:	84 30       	cpi	r24, 0x04	; 4
    42d0:	a0 f3       	brcs	.-24     	; 0x42ba <_ZN7MPU605013dmpInitializeEv+0x812>
    42d2:	cd 57       	subi	r28, 0x7D	; 125
    42d4:	df 4f       	sbci	r29, 0xFF	; 255
    42d6:	48 81       	ld	r20, Y
    42d8:	c3 58       	subi	r28, 0x83	; 131
    42da:	d0 40       	sbci	r29, 0x00	; 0
    42dc:	68 2f       	mov	r22, r24
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	24 2f       	mov	r18, r20
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	2d 5f       	subi	r18, 0xFD	; 253
    42e6:	3f 4f       	sbci	r19, 0xFF	; 255
    42e8:	62 17       	cp	r22, r18
    42ea:	73 07       	cpc	r23, r19
    42ec:	34 f3       	brlt	.-52     	; 0x42ba <_ZN7MPU605013dmpInitializeEv+0x812>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
    42ee:	50 e0       	ldi	r21, 0x00	; 0
    42f0:	61 e8       	ldi	r22, 0x81	; 129
    42f2:	70 e0       	ldi	r23, 0x00	; 0
    42f4:	6c 0f       	add	r22, r28
    42f6:	7d 1f       	adc	r23, r29
    42f8:	6d 5f       	subi	r22, 0xFD	; 253
    42fa:	7f 4f       	sbci	r23, 0xFF	; 255
    42fc:	c1 2c       	mov	r12, r1
    42fe:	ee 24       	eor	r14, r14
    4300:	e3 94       	inc	r14
    4302:	ce 57       	subi	r28, 0x7E	; 126
    4304:	df 4f       	sbci	r29, 0xFF	; 255
    4306:	08 81       	ld	r16, Y
    4308:	c2 58       	subi	r28, 0x82	; 130
    430a:	d0 40       	sbci	r29, 0x00	; 0
    430c:	cf 57       	subi	r28, 0x7F	; 127
    430e:	df 4f       	sbci	r29, 0xFF	; 255
    4310:	28 81       	ld	r18, Y
    4312:	c1 58       	subi	r28, 0x81	; 129
    4314:	d0 40       	sbci	r29, 0x00	; 0
    4316:	c4 01       	movw	r24, r8
    4318:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN7MPU605016writeMemoryBlockEPKhjhhbb>

            DEBUG_PRINTLN(F("DMP is good to go! Finally."));
    431c:	60 ed       	ldi	r22, 0xD0	; 208
    431e:	74 e0       	ldi	r23, 0x04	; 4
    4320:	80 e7       	ldi	r24, 0x70	; 112
    4322:	91 e0       	ldi	r25, 0x01	; 1
    4324:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>

            DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
    4328:	68 ea       	ldi	r22, 0xA8	; 168
    432a:	74 e0       	ldi	r23, 0x04	; 4
    432c:	80 e7       	ldi	r24, 0x70	; 112
    432e:	91 e0       	ldi	r25, 0x01	; 1
    4330:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            setDMPEnabled(false);
    4334:	60 e0       	ldi	r22, 0x00	; 0
    4336:	c4 01       	movw	r24, r8
    4338:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN7MPU605013setDMPEnabledEb>

            DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
    433c:	6d e6       	ldi	r22, 0x6D	; 109
    433e:	74 e0       	ldi	r23, 0x04	; 4
    4340:	80 e7       	ldi	r24, 0x70	; 112
    4342:	91 e0       	ldi	r25, 0x01	; 1
    4344:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            dmpPacketSize = 42;
    4348:	8a e2       	ldi	r24, 0x2A	; 42
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	f4 01       	movw	r30, r8
    434e:	93 83       	std	Z+3, r25	; 0x03
    4350:	82 83       	std	Z+2, r24	; 0x02
            /*if ((dmpPacketBuffer = (uint8_t *)malloc(42)) == 0) {
                return 3; // TODO: proper error code for no memory
            }*/

            DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
    4352:	65 e3       	ldi	r22, 0x35	; 53
    4354:	74 e0       	ldi	r23, 0x04	; 4
    4356:	80 e7       	ldi	r24, 0x70	; 112
    4358:	91 e0       	ldi	r25, 0x01	; 1
    435a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            resetFIFO();
    435e:	c4 01       	movw	r24, r8
    4360:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
    4364:	c4 01       	movw	r24, r8
    4366:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <_ZN7MPU605012getIntStatusEv>
        }
    } else {
        DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
        return 1; // main binary block loading failed
    }
    return 0; // success
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	0f c0       	rjmp	.+30     	; 0x438c <_ZN7MPU605013dmpInitializeEv+0x8e4>

            DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
            resetFIFO();
            getIntStatus();
        } else {
            DEBUG_PRINTLN(F("ERROR! DMP configuration verification failed."));
    436e:	67 e0       	ldi	r22, 0x07	; 7
    4370:	74 e0       	ldi	r23, 0x04	; 4
    4372:	80 e7       	ldi	r24, 0x70	; 112
    4374:	91 e0       	ldi	r25, 0x01	; 1
    4376:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
            return 2; // configuration block loading failed
    437a:	82 e0       	ldi	r24, 0x02	; 2
    437c:	07 c0       	rjmp	.+14     	; 0x438c <_ZN7MPU605013dmpInitializeEv+0x8e4>
        }
    } else {
        DEBUG_PRINTLN(F("ERROR! DMP code verification failed."));
    437e:	62 ee       	ldi	r22, 0xE2	; 226
    4380:	73 e0       	ldi	r23, 0x03	; 3
    4382:	80 e7       	ldi	r24, 0x70	; 112
    4384:	91 e0       	ldi	r25, 0x01	; 1
    4386:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
        return 1; // main binary block loading failed
    438a:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0; // success
}
    438c:	c0 57       	subi	r28, 0x70	; 112
    438e:	df 4f       	sbci	r29, 0xFF	; 255
    4390:	0f b6       	in	r0, 0x3f	; 63
    4392:	f8 94       	cli
    4394:	de bf       	out	0x3e, r29	; 62
    4396:	0f be       	out	0x3f, r0	; 63
    4398:	cd bf       	out	0x3d, r28	; 61
    439a:	df 91       	pop	r29
    439c:	cf 91       	pop	r28
    439e:	1f 91       	pop	r17
    43a0:	0f 91       	pop	r16
    43a2:	ef 90       	pop	r14
    43a4:	cf 90       	pop	r12
    43a6:	bf 90       	pop	r11
    43a8:	af 90       	pop	r10
    43aa:	9f 90       	pop	r9
    43ac:	8f 90       	pop	r8
    43ae:	08 95       	ret

000043b0 <_ZN7MPU605016dmpGetQuaternionEPiPKh>:
    data[1] = (((uint32_t)packet[4] << 24) | ((uint32_t)packet[5] << 16) | ((uint32_t)packet[6] << 8) | packet[7]);
    data[2] = (((uint32_t)packet[8] << 24) | ((uint32_t)packet[9] << 16) | ((uint32_t)packet[10] << 8) | packet[11]);
    data[3] = (((uint32_t)packet[12] << 24) | ((uint32_t)packet[13] << 16) | ((uint32_t)packet[14] << 8) | packet[15]);
    return 0;
}
uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {
    43b0:	cf 93       	push	r28
    43b2:	df 93       	push	r29
    43b4:	db 01       	movw	r26, r22
    43b6:	fa 01       	movw	r30, r20
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    if (packet == 0) packet = dmpPacketBuffer;
    43b8:	30 97       	sbiw	r30, 0x00	; 0
    43ba:	19 f4       	brne	.+6      	; 0x43c2 <_ZN7MPU605016dmpGetQuaternionEPiPKh+0x12>
    43bc:	ec 01       	movw	r28, r24
    43be:	e8 81       	ld	r30, Y
    43c0:	f9 81       	ldd	r31, Y+1	; 0x01
    data[0] = ((packet[0] << 8) | packet[1]);
    43c2:	80 81       	ld	r24, Z
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	98 2f       	mov	r25, r24
    43c8:	88 27       	eor	r24, r24
    43ca:	21 81       	ldd	r18, Z+1	; 0x01
    43cc:	82 2b       	or	r24, r18
    43ce:	11 96       	adiw	r26, 0x01	; 1
    43d0:	9c 93       	st	X, r25
    43d2:	8e 93       	st	-X, r24
    data[1] = ((packet[4] << 8) | packet[5]);
    43d4:	84 81       	ldd	r24, Z+4	; 0x04
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	98 2f       	mov	r25, r24
    43da:	88 27       	eor	r24, r24
    43dc:	25 81       	ldd	r18, Z+5	; 0x05
    43de:	82 2b       	or	r24, r18
    43e0:	13 96       	adiw	r26, 0x03	; 3
    43e2:	9c 93       	st	X, r25
    43e4:	8e 93       	st	-X, r24
    43e6:	12 97       	sbiw	r26, 0x02	; 2
    data[2] = ((packet[8] << 8) | packet[9]);
    43e8:	80 85       	ldd	r24, Z+8	; 0x08
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	98 2f       	mov	r25, r24
    43ee:	88 27       	eor	r24, r24
    43f0:	21 85       	ldd	r18, Z+9	; 0x09
    43f2:	82 2b       	or	r24, r18
    43f4:	15 96       	adiw	r26, 0x05	; 5
    43f6:	9c 93       	st	X, r25
    43f8:	8e 93       	st	-X, r24
    43fa:	14 97       	sbiw	r26, 0x04	; 4
    data[3] = ((packet[12] << 8) | packet[13]);
    43fc:	84 85       	ldd	r24, Z+12	; 0x0c
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	98 2f       	mov	r25, r24
    4402:	88 27       	eor	r24, r24
    4404:	25 85       	ldd	r18, Z+13	; 0x0d
    4406:	82 2b       	or	r24, r18
    4408:	17 96       	adiw	r26, 0x07	; 7
    440a:	9c 93       	st	X, r25
    440c:	8e 93       	st	-X, r24
    440e:	16 97       	sbiw	r26, 0x06	; 6
    return 0;
}
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	df 91       	pop	r29
    4414:	cf 91       	pop	r28
    4416:	08 95       	ret

00004418 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>:
uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {
    4418:	ff 92       	push	r15
    441a:	0f 93       	push	r16
    441c:	1f 93       	push	r17
    441e:	cf 93       	push	r28
    4420:	df 93       	push	r29
    4422:	cd b7       	in	r28, 0x3d	; 61
    4424:	de b7       	in	r29, 0x3e	; 62
    4426:	28 97       	sbiw	r28, 0x08	; 8
    4428:	0f b6       	in	r0, 0x3f	; 63
    442a:	f8 94       	cli
    442c:	de bf       	out	0x3e, r29	; 62
    442e:	0f be       	out	0x3f, r0	; 63
    4430:	cd bf       	out	0x3d, r28	; 61
    4432:	8b 01       	movw	r16, r22
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    int16_t qI[4];
    uint8_t status = dmpGetQuaternion(qI, packet);
    4434:	be 01       	movw	r22, r28
    4436:	6f 5f       	subi	r22, 0xFF	; 255
    4438:	7f 4f       	sbci	r23, 0xFF	; 255
    443a:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <_ZN7MPU605016dmpGetQuaternionEPiPKh>
    443e:	f8 2e       	mov	r15, r24
    if (status == 0) {
    4440:	81 11       	cpse	r24, r1
    4442:	4c c0       	rjmp	.+152    	; 0x44dc <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0xc4>
        q -> w = (float)qI[0] / 16384.0f;
    4444:	69 81       	ldd	r22, Y+1	; 0x01
    4446:	7a 81       	ldd	r23, Y+2	; 0x02
    4448:	07 2e       	mov	r0, r23
    444a:	00 0c       	add	r0, r0
    444c:	88 0b       	sbc	r24, r24
    444e:	99 0b       	sbc	r25, r25
    4450:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <__floatsisf>
    4454:	20 e0       	ldi	r18, 0x00	; 0
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	40 e8       	ldi	r20, 0x80	; 128
    445a:	58 e3       	ldi	r21, 0x38	; 56
    445c:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    4460:	f8 01       	movw	r30, r16
    4462:	60 83       	st	Z, r22
    4464:	71 83       	std	Z+1, r23	; 0x01
    4466:	82 83       	std	Z+2, r24	; 0x02
    4468:	93 83       	std	Z+3, r25	; 0x03
        q -> x = (float)qI[1] / 16384.0f;
    446a:	6b 81       	ldd	r22, Y+3	; 0x03
    446c:	7c 81       	ldd	r23, Y+4	; 0x04
    446e:	07 2e       	mov	r0, r23
    4470:	00 0c       	add	r0, r0
    4472:	88 0b       	sbc	r24, r24
    4474:	99 0b       	sbc	r25, r25
    4476:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <__floatsisf>
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	30 e0       	ldi	r19, 0x00	; 0
    447e:	40 e8       	ldi	r20, 0x80	; 128
    4480:	58 e3       	ldi	r21, 0x38	; 56
    4482:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    4486:	f8 01       	movw	r30, r16
    4488:	64 83       	std	Z+4, r22	; 0x04
    448a:	75 83       	std	Z+5, r23	; 0x05
    448c:	86 83       	std	Z+6, r24	; 0x06
    448e:	97 83       	std	Z+7, r25	; 0x07
        q -> y = (float)qI[2] / 16384.0f;
    4490:	6d 81       	ldd	r22, Y+5	; 0x05
    4492:	7e 81       	ldd	r23, Y+6	; 0x06
    4494:	07 2e       	mov	r0, r23
    4496:	00 0c       	add	r0, r0
    4498:	88 0b       	sbc	r24, r24
    449a:	99 0b       	sbc	r25, r25
    449c:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <__floatsisf>
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	40 e8       	ldi	r20, 0x80	; 128
    44a6:	58 e3       	ldi	r21, 0x38	; 56
    44a8:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    44ac:	f8 01       	movw	r30, r16
    44ae:	60 87       	std	Z+8, r22	; 0x08
    44b0:	71 87       	std	Z+9, r23	; 0x09
    44b2:	82 87       	std	Z+10, r24	; 0x0a
    44b4:	93 87       	std	Z+11, r25	; 0x0b
        q -> z = (float)qI[3] / 16384.0f;
    44b6:	6f 81       	ldd	r22, Y+7	; 0x07
    44b8:	78 85       	ldd	r23, Y+8	; 0x08
    44ba:	07 2e       	mov	r0, r23
    44bc:	00 0c       	add	r0, r0
    44be:	88 0b       	sbc	r24, r24
    44c0:	99 0b       	sbc	r25, r25
    44c2:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <__floatsisf>
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	40 e8       	ldi	r20, 0x80	; 128
    44cc:	58 e3       	ldi	r21, 0x38	; 56
    44ce:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    44d2:	f8 01       	movw	r30, r16
    44d4:	64 87       	std	Z+12, r22	; 0x0c
    44d6:	75 87       	std	Z+13, r23	; 0x0d
    44d8:	86 87       	std	Z+14, r24	; 0x0e
    44da:	97 87       	std	Z+15, r25	; 0x0f
        return 0;
    }
    return status; // int16 return value, indicates error if this line is reached
}
    44dc:	8f 2d       	mov	r24, r15
    44de:	28 96       	adiw	r28, 0x08	; 8
    44e0:	0f b6       	in	r0, 0x3f	; 63
    44e2:	f8 94       	cli
    44e4:	de bf       	out	0x3e, r29	; 62
    44e6:	0f be       	out	0x3f, r0	; 63
    44e8:	cd bf       	out	0x3d, r28	; 61
    44ea:	df 91       	pop	r29
    44ec:	cf 91       	pop	r28
    44ee:	1f 91       	pop	r17
    44f0:	0f 91       	pop	r16
    44f2:	ff 90       	pop	r15
    44f4:	08 95       	ret

000044f6 <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>:
// uint8_t MPU6050::dmpGetGyroAndAccelSensor(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetGyroSensor(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetControlData(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetTemperature(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetGravity(long *data, const uint8_t* packet);
uint8_t MPU6050::dmpGetGravity(VectorFloat *v, Quaternion *q) {
    44f6:	4f 92       	push	r4
    44f8:	5f 92       	push	r5
    44fa:	6f 92       	push	r6
    44fc:	7f 92       	push	r7
    44fe:	8f 92       	push	r8
    4500:	9f 92       	push	r9
    4502:	af 92       	push	r10
    4504:	bf 92       	push	r11
    4506:	cf 92       	push	r12
    4508:	df 92       	push	r13
    450a:	ef 92       	push	r14
    450c:	ff 92       	push	r15
    450e:	0f 93       	push	r16
    4510:	1f 93       	push	r17
    4512:	cf 93       	push	r28
    4514:	df 93       	push	r29
    4516:	00 d0       	rcall	.+0      	; 0x4518 <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion+0x22>
    4518:	00 d0       	rcall	.+0      	; 0x451a <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion+0x24>
    451a:	cd b7       	in	r28, 0x3d	; 61
    451c:	de b7       	in	r29, 0x3e	; 62
    451e:	8b 01       	movw	r16, r22
    4520:	3a 01       	movw	r6, r20
    v -> x = 2 * (q -> x*q -> z - q -> w*q -> y);
    4522:	fa 01       	movw	r30, r20
    4524:	24 85       	ldd	r18, Z+12	; 0x0c
    4526:	35 85       	ldd	r19, Z+13	; 0x0d
    4528:	46 85       	ldd	r20, Z+14	; 0x0e
    452a:	57 85       	ldd	r21, Z+15	; 0x0f
    452c:	64 81       	ldd	r22, Z+4	; 0x04
    452e:	75 81       	ldd	r23, Z+5	; 0x05
    4530:	86 81       	ldd	r24, Z+6	; 0x06
    4532:	97 81       	ldd	r25, Z+7	; 0x07
    4534:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    4538:	6b 01       	movw	r12, r22
    453a:	7c 01       	movw	r14, r24
    453c:	f3 01       	movw	r30, r6
    453e:	20 85       	ldd	r18, Z+8	; 0x08
    4540:	31 85       	ldd	r19, Z+9	; 0x09
    4542:	42 85       	ldd	r20, Z+10	; 0x0a
    4544:	53 85       	ldd	r21, Z+11	; 0x0b
    4546:	60 81       	ld	r22, Z
    4548:	71 81       	ldd	r23, Z+1	; 0x01
    454a:	82 81       	ldd	r24, Z+2	; 0x02
    454c:	93 81       	ldd	r25, Z+3	; 0x03
    454e:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    4552:	9b 01       	movw	r18, r22
    4554:	ac 01       	movw	r20, r24
    4556:	c7 01       	movw	r24, r14
    4558:	b6 01       	movw	r22, r12
    455a:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__subsf3>
    455e:	9b 01       	movw	r18, r22
    4560:	ac 01       	movw	r20, r24
    4562:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__addsf3>
    4566:	f8 01       	movw	r30, r16
    4568:	60 83       	st	Z, r22
    456a:	71 83       	std	Z+1, r23	; 0x01
    456c:	82 83       	std	Z+2, r24	; 0x02
    456e:	93 83       	std	Z+3, r25	; 0x03
    v -> y = 2 * (q -> w*q -> x + q -> y*q -> z);
    4570:	f3 01       	movw	r30, r6
    4572:	24 81       	ldd	r18, Z+4	; 0x04
    4574:	35 81       	ldd	r19, Z+5	; 0x05
    4576:	46 81       	ldd	r20, Z+6	; 0x06
    4578:	57 81       	ldd	r21, Z+7	; 0x07
    457a:	60 81       	ld	r22, Z
    457c:	71 81       	ldd	r23, Z+1	; 0x01
    457e:	82 81       	ldd	r24, Z+2	; 0x02
    4580:	93 81       	ldd	r25, Z+3	; 0x03
    4582:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    4586:	6b 01       	movw	r12, r22
    4588:	7c 01       	movw	r14, r24
    458a:	f3 01       	movw	r30, r6
    458c:	24 85       	ldd	r18, Z+12	; 0x0c
    458e:	35 85       	ldd	r19, Z+13	; 0x0d
    4590:	46 85       	ldd	r20, Z+14	; 0x0e
    4592:	57 85       	ldd	r21, Z+15	; 0x0f
    4594:	60 85       	ldd	r22, Z+8	; 0x08
    4596:	71 85       	ldd	r23, Z+9	; 0x09
    4598:	82 85       	ldd	r24, Z+10	; 0x0a
    459a:	93 85       	ldd	r25, Z+11	; 0x0b
    459c:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    45a0:	9b 01       	movw	r18, r22
    45a2:	ac 01       	movw	r20, r24
    45a4:	c7 01       	movw	r24, r14
    45a6:	b6 01       	movw	r22, r12
    45a8:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__addsf3>
    45ac:	9b 01       	movw	r18, r22
    45ae:	ac 01       	movw	r20, r24
    45b0:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__addsf3>
    45b4:	f8 01       	movw	r30, r16
    45b6:	64 83       	std	Z+4, r22	; 0x04
    45b8:	75 83       	std	Z+5, r23	; 0x05
    45ba:	86 83       	std	Z+6, r24	; 0x06
    45bc:	97 83       	std	Z+7, r25	; 0x07
    v -> z = q -> w*q -> w - q -> x*q -> x - q -> y*q -> y + q -> z*q -> z;
    45be:	f3 01       	movw	r30, r6
    45c0:	60 81       	ld	r22, Z
    45c2:	71 81       	ldd	r23, Z+1	; 0x01
    45c4:	82 81       	ldd	r24, Z+2	; 0x02
    45c6:	93 81       	ldd	r25, Z+3	; 0x03
    45c8:	84 80       	ldd	r8, Z+4	; 0x04
    45ca:	95 80       	ldd	r9, Z+5	; 0x05
    45cc:	a6 80       	ldd	r10, Z+6	; 0x06
    45ce:	b7 80       	ldd	r11, Z+7	; 0x07
    45d0:	c0 84       	ldd	r12, Z+8	; 0x08
    45d2:	d1 84       	ldd	r13, Z+9	; 0x09
    45d4:	e2 84       	ldd	r14, Z+10	; 0x0a
    45d6:	f3 84       	ldd	r15, Z+11	; 0x0b
    45d8:	44 84       	ldd	r4, Z+12	; 0x0c
    45da:	55 84       	ldd	r5, Z+13	; 0x0d
    45dc:	66 84       	ldd	r6, Z+14	; 0x0e
    45de:	77 84       	ldd	r7, Z+15	; 0x0f
    45e0:	9b 01       	movw	r18, r22
    45e2:	ac 01       	movw	r20, r24
    45e4:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    45e8:	69 83       	std	Y+1, r22	; 0x01
    45ea:	7a 83       	std	Y+2, r23	; 0x02
    45ec:	8b 83       	std	Y+3, r24	; 0x03
    45ee:	9c 83       	std	Y+4, r25	; 0x04
    45f0:	a5 01       	movw	r20, r10
    45f2:	94 01       	movw	r18, r8
    45f4:	c5 01       	movw	r24, r10
    45f6:	b4 01       	movw	r22, r8
    45f8:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    45fc:	9b 01       	movw	r18, r22
    45fe:	ac 01       	movw	r20, r24
    4600:	69 81       	ldd	r22, Y+1	; 0x01
    4602:	7a 81       	ldd	r23, Y+2	; 0x02
    4604:	8b 81       	ldd	r24, Y+3	; 0x03
    4606:	9c 81       	ldd	r25, Y+4	; 0x04
    4608:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__subsf3>
    460c:	4b 01       	movw	r8, r22
    460e:	5c 01       	movw	r10, r24
    4610:	a7 01       	movw	r20, r14
    4612:	96 01       	movw	r18, r12
    4614:	c7 01       	movw	r24, r14
    4616:	b6 01       	movw	r22, r12
    4618:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    461c:	9b 01       	movw	r18, r22
    461e:	ac 01       	movw	r20, r24
    4620:	c5 01       	movw	r24, r10
    4622:	b4 01       	movw	r22, r8
    4624:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__subsf3>
    4628:	6b 01       	movw	r12, r22
    462a:	7c 01       	movw	r14, r24
    462c:	a3 01       	movw	r20, r6
    462e:	92 01       	movw	r18, r4
    4630:	c3 01       	movw	r24, r6
    4632:	b2 01       	movw	r22, r4
    4634:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    4638:	9b 01       	movw	r18, r22
    463a:	ac 01       	movw	r20, r24
    463c:	c7 01       	movw	r24, r14
    463e:	b6 01       	movw	r22, r12
    4640:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__addsf3>
    4644:	f8 01       	movw	r30, r16
    4646:	60 87       	std	Z+8, r22	; 0x08
    4648:	71 87       	std	Z+9, r23	; 0x09
    464a:	82 87       	std	Z+10, r24	; 0x0a
    464c:	93 87       	std	Z+11, r25	; 0x0b
    return 0;
}
    464e:	80 e0       	ldi	r24, 0x00	; 0
    4650:	0f 90       	pop	r0
    4652:	0f 90       	pop	r0
    4654:	0f 90       	pop	r0
    4656:	0f 90       	pop	r0
    4658:	df 91       	pop	r29
    465a:	cf 91       	pop	r28
    465c:	1f 91       	pop	r17
    465e:	0f 91       	pop	r16
    4660:	ff 90       	pop	r15
    4662:	ef 90       	pop	r14
    4664:	df 90       	pop	r13
    4666:	cf 90       	pop	r12
    4668:	bf 90       	pop	r11
    466a:	af 90       	pop	r10
    466c:	9f 90       	pop	r9
    466e:	8f 90       	pop	r8
    4670:	7f 90       	pop	r7
    4672:	6f 90       	pop	r6
    4674:	5f 90       	pop	r5
    4676:	4f 90       	pop	r4
    4678:	08 95       	ret

0000467a <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>:
    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);   // psi
    data[1] = -asin(2*q -> x*q -> z + 2*q -> w*q -> y);                              // theta
    data[2] = atan2(2*q -> y*q -> z - 2*q -> w*q -> x, 2*q -> w*q -> w + 2*q -> z*q -> z - 1);   // phi
    return 0;
}
uint8_t MPU6050::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {
    467a:	2f 92       	push	r2
    467c:	3f 92       	push	r3
    467e:	4f 92       	push	r4
    4680:	5f 92       	push	r5
    4682:	6f 92       	push	r6
    4684:	7f 92       	push	r7
    4686:	8f 92       	push	r8
    4688:	9f 92       	push	r9
    468a:	af 92       	push	r10
    468c:	bf 92       	push	r11
    468e:	cf 92       	push	r12
    4690:	df 92       	push	r13
    4692:	ef 92       	push	r14
    4694:	ff 92       	push	r15
    4696:	0f 93       	push	r16
    4698:	1f 93       	push	r17
    469a:	cf 93       	push	r28
    469c:	df 93       	push	r29
    469e:	00 d0       	rcall	.+0      	; 0x46a0 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x26>
    46a0:	00 d0       	rcall	.+0      	; 0x46a2 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x28>
    46a2:	00 d0       	rcall	.+0      	; 0x46a4 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x2a>
    46a4:	cd b7       	in	r28, 0x3d	; 61
    46a6:	de b7       	in	r29, 0x3e	; 62
    46a8:	1b 01       	movw	r2, r22
    46aa:	8a 01       	movw	r16, r20
    46ac:	3e 83       	std	Y+6, r19	; 0x06
    46ae:	2d 83       	std	Y+5, r18	; 0x05
    // yaw: (about Z axis)
    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);
    46b0:	fa 01       	movw	r30, r20
    46b2:	c0 80       	ld	r12, Z
    46b4:	d1 80       	ldd	r13, Z+1	; 0x01
    46b6:	e2 80       	ldd	r14, Z+2	; 0x02
    46b8:	f3 80       	ldd	r15, Z+3	; 0x03
    46ba:	a7 01       	movw	r20, r14
    46bc:	96 01       	movw	r18, r12
    46be:	c7 01       	movw	r24, r14
    46c0:	b6 01       	movw	r22, r12
    46c2:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__addsf3>
    46c6:	69 83       	std	Y+1, r22	; 0x01
    46c8:	7a 83       	std	Y+2, r23	; 0x02
    46ca:	8b 83       	std	Y+3, r24	; 0x03
    46cc:	9c 83       	std	Y+4, r25	; 0x04
    46ce:	f8 01       	movw	r30, r16
    46d0:	84 80       	ldd	r8, Z+4	; 0x04
    46d2:	95 80       	ldd	r9, Z+5	; 0x05
    46d4:	a6 80       	ldd	r10, Z+6	; 0x06
    46d6:	b7 80       	ldd	r11, Z+7	; 0x07
    46d8:	a5 01       	movw	r20, r10
    46da:	94 01       	movw	r18, r8
    46dc:	c5 01       	movw	r24, r10
    46de:	b4 01       	movw	r22, r8
    46e0:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__addsf3>
    46e4:	2b 01       	movw	r4, r22
    46e6:	3c 01       	movw	r6, r24
    46e8:	29 81       	ldd	r18, Y+1	; 0x01
    46ea:	3a 81       	ldd	r19, Y+2	; 0x02
    46ec:	4b 81       	ldd	r20, Y+3	; 0x03
    46ee:	5c 81       	ldd	r21, Y+4	; 0x04
    46f0:	c7 01       	movw	r24, r14
    46f2:	b6 01       	movw	r22, r12
    46f4:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    46f8:	6b 01       	movw	r12, r22
    46fa:	7c 01       	movw	r14, r24
    46fc:	a3 01       	movw	r20, r6
    46fe:	92 01       	movw	r18, r4
    4700:	c5 01       	movw	r24, r10
    4702:	b4 01       	movw	r22, r8
    4704:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    4708:	9b 01       	movw	r18, r22
    470a:	ac 01       	movw	r20, r24
    470c:	c7 01       	movw	r24, r14
    470e:	b6 01       	movw	r22, r12
    4710:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__addsf3>
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	40 e8       	ldi	r20, 0x80	; 128
    471a:	5f e3       	ldi	r21, 0x3F	; 63
    471c:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__subsf3>
    4720:	6b 01       	movw	r12, r22
    4722:	7c 01       	movw	r14, r24
    4724:	f8 01       	movw	r30, r16
    4726:	20 85       	ldd	r18, Z+8	; 0x08
    4728:	31 85       	ldd	r19, Z+9	; 0x09
    472a:	42 85       	ldd	r20, Z+10	; 0x0a
    472c:	53 85       	ldd	r21, Z+11	; 0x0b
    472e:	c3 01       	movw	r24, r6
    4730:	b2 01       	movw	r22, r4
    4732:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    4736:	2b 01       	movw	r4, r22
    4738:	3c 01       	movw	r6, r24
    473a:	f8 01       	movw	r30, r16
    473c:	24 85       	ldd	r18, Z+12	; 0x0c
    473e:	35 85       	ldd	r19, Z+13	; 0x0d
    4740:	46 85       	ldd	r20, Z+14	; 0x0e
    4742:	57 85       	ldd	r21, Z+15	; 0x0f
    4744:	69 81       	ldd	r22, Y+1	; 0x01
    4746:	7a 81       	ldd	r23, Y+2	; 0x02
    4748:	8b 81       	ldd	r24, Y+3	; 0x03
    474a:	9c 81       	ldd	r25, Y+4	; 0x04
    474c:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    4750:	9b 01       	movw	r18, r22
    4752:	ac 01       	movw	r20, r24
    4754:	c3 01       	movw	r24, r6
    4756:	b2 01       	movw	r22, r4
    4758:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__subsf3>
    475c:	a7 01       	movw	r20, r14
    475e:	96 01       	movw	r18, r12
    4760:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <atan2>
    4764:	f1 01       	movw	r30, r2
    4766:	60 83       	st	Z, r22
    4768:	71 83       	std	Z+1, r23	; 0x01
    476a:	82 83       	std	Z+2, r24	; 0x02
    476c:	93 83       	std	Z+3, r25	; 0x03
    // pitch: (nose up/down, about Y axis)
    data[1] = atan(gravity -> x / sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));
    476e:	ed 81       	ldd	r30, Y+5	; 0x05
    4770:	fe 81       	ldd	r31, Y+6	; 0x06
    4772:	84 80       	ldd	r8, Z+4	; 0x04
    4774:	95 80       	ldd	r9, Z+5	; 0x05
    4776:	a6 80       	ldd	r10, Z+6	; 0x06
    4778:	b7 80       	ldd	r11, Z+7	; 0x07
    477a:	c0 84       	ldd	r12, Z+8	; 0x08
    477c:	d1 84       	ldd	r13, Z+9	; 0x09
    477e:	e2 84       	ldd	r14, Z+10	; 0x0a
    4780:	f3 84       	ldd	r15, Z+11	; 0x0b
    4782:	a5 01       	movw	r20, r10
    4784:	94 01       	movw	r18, r8
    4786:	c5 01       	movw	r24, r10
    4788:	b4 01       	movw	r22, r8
    478a:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    478e:	4b 01       	movw	r8, r22
    4790:	5c 01       	movw	r10, r24
    4792:	a7 01       	movw	r20, r14
    4794:	96 01       	movw	r18, r12
    4796:	c7 01       	movw	r24, r14
    4798:	b6 01       	movw	r22, r12
    479a:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    479e:	9b 01       	movw	r18, r22
    47a0:	ac 01       	movw	r20, r24
    47a2:	c5 01       	movw	r24, r10
    47a4:	b4 01       	movw	r22, r8
    47a6:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__addsf3>
    47aa:	0e 94 2f 29 	call	0x525e	; 0x525e <sqrt>
    47ae:	9b 01       	movw	r18, r22
    47b0:	ac 01       	movw	r20, r24
    47b2:	ed 81       	ldd	r30, Y+5	; 0x05
    47b4:	fe 81       	ldd	r31, Y+6	; 0x06
    47b6:	60 81       	ld	r22, Z
    47b8:	71 81       	ldd	r23, Z+1	; 0x01
    47ba:	82 81       	ldd	r24, Z+2	; 0x02
    47bc:	93 81       	ldd	r25, Z+3	; 0x03
    47be:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__divsf3>
    47c2:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <atan>
    47c6:	f1 01       	movw	r30, r2
    47c8:	64 83       	std	Z+4, r22	; 0x04
    47ca:	75 83       	std	Z+5, r23	; 0x05
    47cc:	86 83       	std	Z+6, r24	; 0x06
    47ce:	97 83       	std	Z+7, r25	; 0x07
    // roll: (tilt left/right, about X axis)
    data[2] = atan(gravity -> y / sqrt(gravity -> x*gravity -> x + gravity -> z*gravity -> z));
    47d0:	ed 81       	ldd	r30, Y+5	; 0x05
    47d2:	fe 81       	ldd	r31, Y+6	; 0x06
    47d4:	80 80       	ld	r8, Z
    47d6:	91 80       	ldd	r9, Z+1	; 0x01
    47d8:	a2 80       	ldd	r10, Z+2	; 0x02
    47da:	b3 80       	ldd	r11, Z+3	; 0x03
    47dc:	c0 84       	ldd	r12, Z+8	; 0x08
    47de:	d1 84       	ldd	r13, Z+9	; 0x09
    47e0:	e2 84       	ldd	r14, Z+10	; 0x0a
    47e2:	f3 84       	ldd	r15, Z+11	; 0x0b
    47e4:	a5 01       	movw	r20, r10
    47e6:	94 01       	movw	r18, r8
    47e8:	c5 01       	movw	r24, r10
    47ea:	b4 01       	movw	r22, r8
    47ec:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    47f0:	4b 01       	movw	r8, r22
    47f2:	5c 01       	movw	r10, r24
    47f4:	a7 01       	movw	r20, r14
    47f6:	96 01       	movw	r18, r12
    47f8:	c7 01       	movw	r24, r14
    47fa:	b6 01       	movw	r22, r12
    47fc:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    4800:	9b 01       	movw	r18, r22
    4802:	ac 01       	movw	r20, r24
    4804:	c5 01       	movw	r24, r10
    4806:	b4 01       	movw	r22, r8
    4808:	0e 94 4b 26 	call	0x4c96	; 0x4c96 <__addsf3>
    480c:	0e 94 2f 29 	call	0x525e	; 0x525e <sqrt>
    4810:	9b 01       	movw	r18, r22
    4812:	ac 01       	movw	r20, r24
    4814:	ed 81       	ldd	r30, Y+5	; 0x05
    4816:	fe 81       	ldd	r31, Y+6	; 0x06
    4818:	64 81       	ldd	r22, Z+4	; 0x04
    481a:	75 81       	ldd	r23, Z+5	; 0x05
    481c:	86 81       	ldd	r24, Z+6	; 0x06
    481e:	97 81       	ldd	r25, Z+7	; 0x07
    4820:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__divsf3>
    4824:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <atan>
    4828:	f1 01       	movw	r30, r2
    482a:	60 87       	std	Z+8, r22	; 0x08
    482c:	71 87       	std	Z+9, r23	; 0x09
    482e:	82 87       	std	Z+10, r24	; 0x0a
    4830:	93 87       	std	Z+11, r25	; 0x0b
    return 0;
}
    4832:	80 e0       	ldi	r24, 0x00	; 0
    4834:	26 96       	adiw	r28, 0x06	; 6
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	f8 94       	cli
    483a:	de bf       	out	0x3e, r29	; 62
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	cd bf       	out	0x3d, r28	; 61
    4840:	df 91       	pop	r29
    4842:	cf 91       	pop	r28
    4844:	1f 91       	pop	r17
    4846:	0f 91       	pop	r16
    4848:	ff 90       	pop	r15
    484a:	ef 90       	pop	r14
    484c:	df 90       	pop	r13
    484e:	cf 90       	pop	r12
    4850:	bf 90       	pop	r11
    4852:	af 90       	pop	r10
    4854:	9f 90       	pop	r9
    4856:	8f 90       	pop	r8
    4858:	7f 90       	pop	r7
    485a:	6f 90       	pop	r6
    485c:	5f 90       	pop	r5
    485e:	4f 90       	pop	r4
    4860:	3f 90       	pop	r3
    4862:	2f 90       	pop	r2
    4864:	08 95       	ret

00004866 <loop>:

// ================================================================
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================

void loop() {
    4866:	cf 93       	push	r28
    4868:	df 93       	push	r29
    // if programming failed, don't try to do anything
    if (!dmpReady) return;
    486a:	80 91 a8 03 	lds	r24, 0x03A8
    486e:	88 23       	and	r24, r24
    4870:	09 f4       	brne	.+2      	; 0x4874 <loop+0xe>
    4872:	fa c0       	rjmp	.+500    	; 0x4a68 <loop+0x202>

    // wait for MPU interrupt or extra packet(s) available
    while (!mpuInterrupt && fifoCount < packetSize) {
    4874:	40 91 a2 03 	lds	r20, 0x03A2
    4878:	50 91 a3 03 	lds	r21, 0x03A3
    487c:	20 91 a4 03 	lds	r18, 0x03A4
    4880:	30 91 a5 03 	lds	r19, 0x03A5
    4884:	80 91 27 03 	lds	r24, 0x0327
    4888:	81 11       	cpse	r24, r1
    488a:	d9 c0       	rjmp	.+434    	; 0x4a3e <loop+0x1d8>
    488c:	42 17       	cp	r20, r18
    488e:	53 07       	cpc	r21, r19
    4890:	c8 f3       	brcs	.-14     	; 0x4884 <loop+0x1e>
    4892:	d5 c0       	rjmp	.+426    	; 0x4a3e <loop+0x1d8>

    // get current FIFO count
    fifoCount = mpu.getFIFOCount();

    // check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    4894:	81 15       	cp	r24, r1
    4896:	34 e0       	ldi	r19, 0x04	; 4
    4898:	93 07       	cpc	r25, r19
    489a:	59 f4       	brne	.+22     	; 0x48b2 <loop+0x4c>
        // reset so we can continue cleanly
        mpu.resetFIFO();
    489c:	84 eb       	ldi	r24, 0xB4	; 180
    489e:	93 e0       	ldi	r25, 0x03	; 3
    48a0:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <_ZN7MPU60509resetFIFOEv>
        Serial.println(F("FIFO overflow!"));
    48a4:	69 e7       	ldi	r22, 0x79	; 121
    48a6:	72 e0       	ldi	r23, 0x02	; 2
    48a8:	80 e7       	ldi	r24, 0x70	; 112
    48aa:	91 e0       	ldi	r25, 0x01	; 1
    48ac:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    48b0:	db c0       	rjmp	.+438    	; 0x4a68 <loop+0x202>

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
    } else if (mpuIntStatus & 0x02) {
    48b2:	21 ff       	sbrs	r18, 1
    48b4:	d9 c0       	rjmp	.+434    	; 0x4a68 <loop+0x202>
        // wait for correct available data length, should be a VERY short wait
        while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();
    48b6:	40 91 a4 03 	lds	r20, 0x03A4
    48ba:	50 91 a5 03 	lds	r21, 0x03A5
    48be:	84 17       	cp	r24, r20
    48c0:	95 07       	cpc	r25, r21
    48c2:	78 f4       	brcc	.+30     	; 0x48e2 <loop+0x7c>
    48c4:	84 eb       	ldi	r24, 0xB4	; 180
    48c6:	93 e0       	ldi	r25, 0x03	; 3
    48c8:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_ZN7MPU605012getFIFOCountEv>
    48cc:	90 93 a3 03 	sts	0x03A3, r25
    48d0:	80 93 a2 03 	sts	0x03A2, r24
    48d4:	40 91 a4 03 	lds	r20, 0x03A4
    48d8:	50 91 a5 03 	lds	r21, 0x03A5
    48dc:	84 17       	cp	r24, r20
    48de:	95 07       	cpc	r25, r21
    48e0:	88 f3       	brcs	.-30     	; 0x48c4 <loop+0x5e>

        // read a packet from FIFO
        mpu.getFIFOBytes(fifoBuffer, packetSize);
    48e2:	62 e6       	ldi	r22, 0x62	; 98
    48e4:	73 e0       	ldi	r23, 0x03	; 3
    48e6:	84 eb       	ldi	r24, 0xB4	; 180
    48e8:	93 e0       	ldi	r25, 0x03	; 3
    48ea:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7MPU605012getFIFOBytesEPhh>
        
        // track FIFO count here in case there is > 1 packet available
        // (this lets us immediately read more without waiting for an interrupt)
        fifoCount -= packetSize;
    48ee:	80 91 a2 03 	lds	r24, 0x03A2
    48f2:	90 91 a3 03 	lds	r25, 0x03A3
    48f6:	20 91 a4 03 	lds	r18, 0x03A4
    48fa:	30 91 a5 03 	lds	r19, 0x03A5
    48fe:	82 1b       	sub	r24, r18
    4900:	93 0b       	sbc	r25, r19
    4902:	90 93 a3 03 	sts	0x03A3, r25
    4906:	80 93 a2 03 	sts	0x03A2, r24
            Serial.println(euler[2] * 180/M_PI);
        #endif

        #ifdef OUTPUT_READABLE_YAWPITCHROLL
            // display Euler angles in degrees
            mpu.dmpGetQuaternion(&q, fifoBuffer);
    490a:	42 e6       	ldi	r20, 0x62	; 98
    490c:	53 e0       	ldi	r21, 0x03	; 3
    490e:	62 e5       	ldi	r22, 0x52	; 82
    4910:	73 e0       	ldi	r23, 0x03	; 3
    4912:	84 eb       	ldi	r24, 0xB4	; 180
    4914:	93 e0       	ldi	r25, 0x03	; 3
    4916:	0e 94 0c 22 	call	0x4418	; 0x4418 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
            mpu.dmpGetGravity(&gravity, &q);
    491a:	42 e5       	ldi	r20, 0x52	; 82
    491c:	53 e0       	ldi	r21, 0x03	; 3
    491e:	64 e3       	ldi	r22, 0x34	; 52
    4920:	73 e0       	ldi	r23, 0x03	; 3
    4922:	84 eb       	ldi	r24, 0xB4	; 180
    4924:	93 e0       	ldi	r25, 0x03	; 3
    4926:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>
            mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
    492a:	24 e3       	ldi	r18, 0x34	; 52
    492c:	33 e0       	ldi	r19, 0x03	; 3
    492e:	42 e5       	ldi	r20, 0x52	; 82
    4930:	53 e0       	ldi	r21, 0x03	; 3
    4932:	68 e2       	ldi	r22, 0x28	; 40
    4934:	73 e0       	ldi	r23, 0x03	; 3
    4936:	84 eb       	ldi	r24, 0xB4	; 180
    4938:	93 e0       	ldi	r25, 0x03	; 3
    493a:	0e 94 3d 23 	call	0x467a	; 0x467a <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>
            Serial.print("ypr\t");
    493e:	64 e4       	ldi	r22, 0x44	; 68
    4940:	71 e0       	ldi	r23, 0x01	; 1
    4942:	80 e7       	ldi	r24, 0x70	; 112
    4944:	91 e0       	ldi	r25, 0x01	; 1
    4946:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN5Print5printEPKc>
            Serial.print(ypr[0] * 180/M_PI);
    494a:	c8 e2       	ldi	r28, 0x28	; 40
    494c:	d3 e0       	ldi	r29, 0x03	; 3
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	44 e3       	ldi	r20, 0x34	; 52
    4954:	53 e4       	ldi	r21, 0x43	; 67
    4956:	68 81       	ld	r22, Y
    4958:	79 81       	ldd	r23, Y+1	; 0x01
    495a:	8a 81       	ldd	r24, Y+2	; 0x02
    495c:	9b 81       	ldd	r25, Y+3	; 0x03
    495e:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    4962:	2b ed       	ldi	r18, 0xDB	; 219
    4964:	3f e0       	ldi	r19, 0x0F	; 15
    4966:	49 e4       	ldi	r20, 0x49	; 73
    4968:	50 e4       	ldi	r21, 0x40	; 64
    496a:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__divsf3>
    496e:	ab 01       	movw	r20, r22
    4970:	bc 01       	movw	r22, r24
    4972:	22 e0       	ldi	r18, 0x02	; 2
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	80 e7       	ldi	r24, 0x70	; 112
    4978:	91 e0       	ldi	r25, 0x01	; 1
    497a:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN5Print5printEdi>
            Serial.print("\t");
    497e:	67 e4       	ldi	r22, 0x47	; 71
    4980:	71 e0       	ldi	r23, 0x01	; 1
    4982:	80 e7       	ldi	r24, 0x70	; 112
    4984:	91 e0       	ldi	r25, 0x01	; 1
    4986:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN5Print5printEPKc>
            Serial.print(ypr[1] * 180/M_PI);
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	44 e3       	ldi	r20, 0x34	; 52
    4990:	53 e4       	ldi	r21, 0x43	; 67
    4992:	6c 81       	ldd	r22, Y+4	; 0x04
    4994:	7d 81       	ldd	r23, Y+5	; 0x05
    4996:	8e 81       	ldd	r24, Y+6	; 0x06
    4998:	9f 81       	ldd	r25, Y+7	; 0x07
    499a:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    499e:	2b ed       	ldi	r18, 0xDB	; 219
    49a0:	3f e0       	ldi	r19, 0x0F	; 15
    49a2:	49 e4       	ldi	r20, 0x49	; 73
    49a4:	50 e4       	ldi	r21, 0x40	; 64
    49a6:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__divsf3>
    49aa:	ab 01       	movw	r20, r22
    49ac:	bc 01       	movw	r22, r24
    49ae:	22 e0       	ldi	r18, 0x02	; 2
    49b0:	30 e0       	ldi	r19, 0x00	; 0
    49b2:	80 e7       	ldi	r24, 0x70	; 112
    49b4:	91 e0       	ldi	r25, 0x01	; 1
    49b6:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN5Print5printEdi>
            Serial.print("\t");
    49ba:	67 e4       	ldi	r22, 0x47	; 71
    49bc:	71 e0       	ldi	r23, 0x01	; 1
    49be:	80 e7       	ldi	r24, 0x70	; 112
    49c0:	91 e0       	ldi	r25, 0x01	; 1
    49c2:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN5Print5printEPKc>
            Serial.println(ypr[2] * 180/M_PI);
    49c6:	20 e0       	ldi	r18, 0x00	; 0
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	44 e3       	ldi	r20, 0x34	; 52
    49cc:	53 e4       	ldi	r21, 0x43	; 67
    49ce:	68 85       	ldd	r22, Y+8	; 0x08
    49d0:	79 85       	ldd	r23, Y+9	; 0x09
    49d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    49d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    49d6:	0e 94 bc 28 	call	0x5178	; 0x5178 <__mulsf3>
    49da:	2b ed       	ldi	r18, 0xDB	; 219
    49dc:	3f e0       	ldi	r19, 0x0F	; 15
    49de:	49 e4       	ldi	r20, 0x49	; 73
    49e0:	50 e4       	ldi	r21, 0x40	; 64
    49e2:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__divsf3>
    49e6:	ab 01       	movw	r20, r22
    49e8:	bc 01       	movw	r22, r24
    49ea:	22 e0       	ldi	r18, 0x02	; 2
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	80 e7       	ldi	r24, 0x70	; 112
    49f0:	91 e0       	ldi	r25, 0x01	; 1
    49f2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <_ZN5Print7printlnEdi>
            Serial.write(teapotPacket, 14);
            teapotPacket[11]++; // packetCount, loops at 0xFF on purpose
        #endif
		
		// Move the Motor forward
		Serial.println("Running the motors");
    49f6:	69 e4       	ldi	r22, 0x49	; 73
    49f8:	71 e0       	ldi	r23, 0x01	; 1
    49fa:	80 e7       	ldi	r24, 0x70	; 112
    49fc:	91 e0       	ldi	r25, 0x01	; 1
    49fe:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN5Print7printlnEPKc>
		bot.moveForward();
    4a02:	8a ea       	ldi	r24, 0xAA	; 170
    4a04:	93 e0       	ldi	r25, 0x03	; 3
    4a06:	0e 94 a1 12 	call	0x2542	; 0x2542 <_ZN10DCMotorBot11moveForwardEv>
		
		delay(1000);
    4a0a:	68 ee       	ldi	r22, 0xE8	; 232
    4a0c:	73 e0       	ldi	r23, 0x03	; 3
    4a0e:	80 e0       	ldi	r24, 0x00	; 0
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	0e 94 54 11 	call	0x22a8	; 0x22a8 <delay>
		
		// Stopping the Motor
		Serial.println("Stopping the motors");
    4a16:	6c e5       	ldi	r22, 0x5C	; 92
    4a18:	71 e0       	ldi	r23, 0x01	; 1
    4a1a:	80 e7       	ldi	r24, 0x70	; 112
    4a1c:	91 e0       	ldi	r25, 0x01	; 1
    4a1e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN5Print7printlnEPKc>
		bot.stop();
    4a22:	8a ea       	ldi	r24, 0xAA	; 170
    4a24:	93 e0       	ldi	r25, 0x03	; 3
    4a26:	0e 94 b7 12 	call	0x256e	; 0x256e <_ZN10DCMotorBot4stopEv>
		
        // blink LED to indicate activity
        blinkState = !blinkState;
    4a2a:	60 91 a9 03 	lds	r22, 0x03A9
    4a2e:	81 e0       	ldi	r24, 0x01	; 1
    4a30:	68 27       	eor	r22, r24
    4a32:	60 93 a9 03 	sts	0x03A9, r22
        digitalWrite(LED_PIN, blinkState);
    4a36:	8d e0       	ldi	r24, 0x0D	; 13
    4a38:	0e 94 29 12 	call	0x2452	; 0x2452 <digitalWrite>
    4a3c:	15 c0       	rjmp	.+42     	; 0x4a68 <loop+0x202>
        // .
        // .
    }

    // reset interrupt flag and get INT_STATUS byte
    mpuInterrupt = false;
    4a3e:	10 92 27 03 	sts	0x0327, r1
    mpuIntStatus = mpu.getIntStatus();
    4a42:	84 eb       	ldi	r24, 0xB4	; 180
    4a44:	93 e0       	ldi	r25, 0x03	; 3
    4a46:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <_ZN7MPU605012getIntStatusEv>
    4a4a:	80 93 a7 03 	sts	0x03A7, r24

    // get current FIFO count
    fifoCount = mpu.getFIFOCount();
    4a4e:	84 eb       	ldi	r24, 0xB4	; 180
    4a50:	93 e0       	ldi	r25, 0x03	; 3
    4a52:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_ZN7MPU605012getFIFOCountEv>
    4a56:	90 93 a3 03 	sts	0x03A3, r25
    4a5a:	80 93 a2 03 	sts	0x03A2, r24

    // check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    4a5e:	20 91 a7 03 	lds	r18, 0x03A7
    4a62:	24 ff       	sbrs	r18, 4
    4a64:	17 cf       	rjmp	.-466    	; 0x4894 <loop+0x2e>
    4a66:	1a cf       	rjmp	.-460    	; 0x489c <loop+0x36>
		
        // blink LED to indicate activity
        blinkState = !blinkState;
        digitalWrite(LED_PIN, blinkState);
    }
}
    4a68:	df 91       	pop	r29
    4a6a:	cf 91       	pop	r28
    4a6c:	08 95       	ret

00004a6e <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:

// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for SparkFun breakout and InvenSense evaluation board)
// AD0 high = 0x69
MPU6050 mpu;
    4a6e:	84 eb       	ldi	r24, 0xB4	; 180
    4a70:	93 e0       	ldi	r25, 0x03	; 3
    4a72:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <_ZN7MPU6050C1Ev>
//MPU6050 mpu(0x69); // <-- use for AD0 high

DCMotorBot bot;
    4a76:	8a ea       	ldi	r24, 0xAA	; 170
    4a78:	93 e0       	ldi	r25, 0x03	; 3
    4a7a:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN10DCMotorBotC1Ev>
        float x;
        float y;
        float z;
        
        Quaternion() {
            w = 1.0f;
    4a7e:	e2 e5       	ldi	r30, 0x52	; 82
    4a80:	f3 e0       	ldi	r31, 0x03	; 3
    4a82:	80 e0       	ldi	r24, 0x00	; 0
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	a0 e8       	ldi	r26, 0x80	; 128
    4a88:	bf e3       	ldi	r27, 0x3F	; 63
    4a8a:	80 83       	st	Z, r24
    4a8c:	91 83       	std	Z+1, r25	; 0x01
    4a8e:	a2 83       	std	Z+2, r26	; 0x02
    4a90:	b3 83       	std	Z+3, r27	; 0x03
            x = 0.0f;
    4a92:	14 82       	std	Z+4, r1	; 0x04
    4a94:	15 82       	std	Z+5, r1	; 0x05
    4a96:	16 82       	std	Z+6, r1	; 0x06
    4a98:	17 82       	std	Z+7, r1	; 0x07
            y = 0.0f;
    4a9a:	10 86       	std	Z+8, r1	; 0x08
    4a9c:	11 86       	std	Z+9, r1	; 0x09
    4a9e:	12 86       	std	Z+10, r1	; 0x0a
    4aa0:	13 86       	std	Z+11, r1	; 0x0b
            z = 0.0f;
    4aa2:	14 86       	std	Z+12, r1	; 0x0c
    4aa4:	15 86       	std	Z+13, r1	; 0x0d
    4aa6:	16 86       	std	Z+14, r1	; 0x0e
    4aa8:	17 86       	std	Z+15, r1	; 0x0f
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    4aaa:	ec e4       	ldi	r30, 0x4C	; 76
    4aac:	f3 e0       	ldi	r31, 0x03	; 3
    4aae:	11 82       	std	Z+1, r1	; 0x01
    4ab0:	10 82       	st	Z, r1
            y = 0;
    4ab2:	13 82       	std	Z+3, r1	; 0x03
    4ab4:	12 82       	std	Z+2, r1	; 0x02
            z = 0;
    4ab6:	15 82       	std	Z+5, r1	; 0x05
    4ab8:	14 82       	std	Z+4, r1	; 0x04
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    4aba:	e6 e4       	ldi	r30, 0x46	; 70
    4abc:	f3 e0       	ldi	r31, 0x03	; 3
    4abe:	11 82       	std	Z+1, r1	; 0x01
    4ac0:	10 82       	st	Z, r1
            y = 0;
    4ac2:	13 82       	std	Z+3, r1	; 0x03
    4ac4:	12 82       	std	Z+2, r1	; 0x02
            z = 0;
    4ac6:	15 82       	std	Z+5, r1	; 0x05
    4ac8:	14 82       	std	Z+4, r1	; 0x04
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
            x = 0;
    4aca:	e0 e4       	ldi	r30, 0x40	; 64
    4acc:	f3 e0       	ldi	r31, 0x03	; 3
    4ace:	11 82       	std	Z+1, r1	; 0x01
    4ad0:	10 82       	st	Z, r1
            y = 0;
    4ad2:	13 82       	std	Z+3, r1	; 0x03
    4ad4:	12 82       	std	Z+2, r1	; 0x02
            z = 0;
    4ad6:	15 82       	std	Z+5, r1	; 0x05
    4ad8:	14 82       	std	Z+4, r1	; 0x04
        float x;
        float y;
        float z;

        VectorFloat() {
            x = 0;
    4ada:	e4 e3       	ldi	r30, 0x34	; 52
    4adc:	f3 e0       	ldi	r31, 0x03	; 3
    4ade:	10 82       	st	Z, r1
    4ae0:	11 82       	std	Z+1, r1	; 0x01
    4ae2:	12 82       	std	Z+2, r1	; 0x02
    4ae4:	13 82       	std	Z+3, r1	; 0x03
            y = 0;
    4ae6:	14 82       	std	Z+4, r1	; 0x04
    4ae8:	15 82       	std	Z+5, r1	; 0x05
    4aea:	16 82       	std	Z+6, r1	; 0x06
    4aec:	17 82       	std	Z+7, r1	; 0x07
            z = 0;
    4aee:	10 86       	std	Z+8, r1	; 0x08
    4af0:	11 86       	std	Z+9, r1	; 0x09
    4af2:	12 86       	std	Z+10, r1	; 0x0a
    4af4:	13 86       	std	Z+11, r1	; 0x0b
    4af6:	08 95       	ret

00004af8 <setup>:

// ================================================================
// ===                      INITIAL SETUP                       ===
// ================================================================

void setup() {
    4af8:	0f 93       	push	r16
    // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
    4afa:	85 ed       	ldi	r24, 0xD5	; 213
    4afc:	92 e0       	ldi	r25, 0x02	; 2
    4afe:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_ZN7TwoWire5beginEv>
        TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz). Comment this line if having compilation difficulties with TWBR.
    4b02:	88 e1       	ldi	r24, 0x18	; 24
    4b04:	80 93 b8 00 	sts	0x00B8, r24
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif
	
	// DC Motor setup with L293D
    bot.setControlPins(3, 4, 5, 6);
    4b08:	06 e0       	ldi	r16, 0x06	; 6
    4b0a:	25 e0       	ldi	r18, 0x05	; 5
    4b0c:	44 e0       	ldi	r20, 0x04	; 4
    4b0e:	63 e0       	ldi	r22, 0x03	; 3
    4b10:	8a ea       	ldi	r24, 0xAA	; 170
    4b12:	93 e0       	ldi	r25, 0x03	; 3
    4b14:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <_ZN10DCMotorBot14setControlPinsEhhhh>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    4b18:	26 e0       	ldi	r18, 0x06	; 6
    4b1a:	40 e0       	ldi	r20, 0x00	; 0
    4b1c:	52 ec       	ldi	r21, 0xC2	; 194
    4b1e:	61 e0       	ldi	r22, 0x01	; 1
    4b20:	70 e0       	ldi	r23, 0x00	; 0
    4b22:	80 e7       	ldi	r24, 0x70	; 112
    4b24:	91 e0       	ldi	r25, 0x01	; 1
    4b26:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN14HardwareSerial5beginEmh>
    // the baud timing being too misaligned with processor ticks. You must use
    // 38400 or slower in these cases, or use some kind of external separate
    // crystal solution for the UART timer.

    // initialize device
    Serial.println(F("Initializing I2C devices..."));
    4b2a:	66 ec       	ldi	r22, 0xC6	; 198
    4b2c:	73 e0       	ldi	r23, 0x03	; 3
    4b2e:	80 e7       	ldi	r24, 0x70	; 112
    4b30:	91 e0       	ldi	r25, 0x01	; 1
    4b32:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    mpu.initialize();
    4b36:	84 eb       	ldi	r24, 0xB4	; 180
    4b38:	93 e0       	ldi	r25, 0x03	; 3
    4b3a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZN7MPU605010initializeEv>

    // verify connection
    Serial.println(F("Testing device connections..."));
    4b3e:	68 ea       	ldi	r22, 0xA8	; 168
    4b40:	73 e0       	ldi	r23, 0x03	; 3
    4b42:	80 e7       	ldi	r24, 0x70	; 112
    4b44:	91 e0       	ldi	r25, 0x01	; 1
    4b46:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));
    4b4a:	84 eb       	ldi	r24, 0xB4	; 180
    4b4c:	93 e0       	ldi	r25, 0x03	; 3
    4b4e:	0e 94 24 16 	call	0x2c48	; 0x2c48 <_ZN7MPU605014testConnectionEv>
    4b52:	81 11       	cpse	r24, r1
    4b54:	03 c0       	rjmp	.+6      	; 0x4b5c <setup+0x64>
    4b56:	60 e7       	ldi	r22, 0x70	; 112
    4b58:	73 e0       	ldi	r23, 0x03	; 3
    4b5a:	02 c0       	rjmp	.+4      	; 0x4b60 <setup+0x68>
    4b5c:	6a e8       	ldi	r22, 0x8A	; 138
    4b5e:	73 e0       	ldi	r23, 0x03	; 3
    4b60:	80 e7       	ldi	r24, 0x70	; 112
    4b62:	91 e0       	ldi	r25, 0x01	; 1
    4b64:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>

    // wait for ready
    Serial.println(F("\nSend any character to begin DMP programming and demo: "));
    4b68:	68 e3       	ldi	r22, 0x38	; 56
    4b6a:	73 e0       	ldi	r23, 0x03	; 3
    4b6c:	80 e7       	ldi	r24, 0x70	; 112
    4b6e:	91 e0       	ldi	r25, 0x01	; 1
    4b70:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (Serial.available() && Serial.read()); // empty buffer
    4b74:	80 e7       	ldi	r24, 0x70	; 112
    4b76:	91 e0       	ldi	r25, 0x01	; 1
    4b78:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_ZN14HardwareSerial9availableEv>
    4b7c:	89 2b       	or	r24, r25
    4b7e:	31 f0       	breq	.+12     	; 0x4b8c <setup+0x94>
    4b80:	80 e7       	ldi	r24, 0x70	; 112
    4b82:	91 e0       	ldi	r25, 0x01	; 1
    4b84:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN14HardwareSerial4readEv>
    4b88:	89 2b       	or	r24, r25
    4b8a:	a1 f7       	brne	.-24     	; 0x4b74 <setup+0x7c>
    while (!Serial.available());                 // wait for data
    4b8c:	80 e7       	ldi	r24, 0x70	; 112
    4b8e:	91 e0       	ldi	r25, 0x01	; 1
    4b90:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_ZN14HardwareSerial9availableEv>
    4b94:	89 2b       	or	r24, r25
    4b96:	d1 f3       	breq	.-12     	; 0x4b8c <setup+0x94>
    while (Serial.available() && Serial.read()); // empty buffer again
    4b98:	80 e7       	ldi	r24, 0x70	; 112
    4b9a:	91 e0       	ldi	r25, 0x01	; 1
    4b9c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_ZN14HardwareSerial9availableEv>
    4ba0:	89 2b       	or	r24, r25
    4ba2:	31 f0       	breq	.+12     	; 0x4bb0 <setup+0xb8>
    4ba4:	80 e7       	ldi	r24, 0x70	; 112
    4ba6:	91 e0       	ldi	r25, 0x01	; 1
    4ba8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <_ZN14HardwareSerial4readEv>
    4bac:	89 2b       	or	r24, r25
    4bae:	a1 f7       	brne	.-24     	; 0x4b98 <setup+0xa0>

    // load and configure the DMP
    Serial.println(F("Initializing DMP..."));
    4bb0:	64 e2       	ldi	r22, 0x24	; 36
    4bb2:	73 e0       	ldi	r23, 0x03	; 3
    4bb4:	80 e7       	ldi	r24, 0x70	; 112
    4bb6:	91 e0       	ldi	r25, 0x01	; 1
    4bb8:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    devStatus = mpu.dmpInitialize();
    4bbc:	84 eb       	ldi	r24, 0xB4	; 180
    4bbe:	93 e0       	ldi	r25, 0x03	; 3
    4bc0:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <_ZN7MPU605013dmpInitializeEv>
    4bc4:	80 93 a6 03 	sts	0x03A6, r24

    // supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(220);
    4bc8:	6c ed       	ldi	r22, 0xDC	; 220
    4bca:	70 e0       	ldi	r23, 0x00	; 0
    4bcc:	84 eb       	ldi	r24, 0xB4	; 180
    4bce:	93 e0       	ldi	r25, 0x03	; 3
    4bd0:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_ZN7MPU605014setXGyroOffsetEi>
    mpu.setYGyroOffset(76);
    4bd4:	6c e4       	ldi	r22, 0x4C	; 76
    4bd6:	70 e0       	ldi	r23, 0x00	; 0
    4bd8:	84 eb       	ldi	r24, 0xB4	; 180
    4bda:	93 e0       	ldi	r25, 0x03	; 3
    4bdc:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <_ZN7MPU605014setYGyroOffsetEi>
    mpu.setZGyroOffset(-85);
    4be0:	6b ea       	ldi	r22, 0xAB	; 171
    4be2:	7f ef       	ldi	r23, 0xFF	; 255
    4be4:	84 eb       	ldi	r24, 0xB4	; 180
    4be6:	93 e0       	ldi	r25, 0x03	; 3
    4be8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN7MPU605014setZGyroOffsetEi>
    mpu.setZAccelOffset(1788); // 1688 factory default for my test chip
    4bec:	6c ef       	ldi	r22, 0xFC	; 252
    4bee:	76 e0       	ldi	r23, 0x06	; 6
    4bf0:	84 eb       	ldi	r24, 0xB4	; 180
    4bf2:	93 e0       	ldi	r25, 0x03	; 3
    4bf4:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN7MPU605015setZAccelOffsetEi>

    // make sure it worked (returns 0 if so)
    if (devStatus == 0) {
    4bf8:	80 91 a6 03 	lds	r24, 0x03A6
    4bfc:	81 11       	cpse	r24, r1
    4bfe:	30 c0       	rjmp	.+96     	; 0x4c60 <setup+0x168>
        // turn on the DMP, now that it's ready
        Serial.println(F("Enabling DMP..."));
    4c00:	64 e1       	ldi	r22, 0x14	; 20
    4c02:	73 e0       	ldi	r23, 0x03	; 3
    4c04:	80 e7       	ldi	r24, 0x70	; 112
    4c06:	91 e0       	ldi	r25, 0x01	; 1
    4c08:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
        mpu.setDMPEnabled(true);
    4c0c:	61 e0       	ldi	r22, 0x01	; 1
    4c0e:	84 eb       	ldi	r24, 0xB4	; 180
    4c10:	93 e0       	ldi	r25, 0x03	; 3
    4c12:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN7MPU605013setDMPEnabledEb>

        // enable Arduino interrupt detection
        Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
    4c16:	65 ed       	ldi	r22, 0xD5	; 213
    4c18:	72 e0       	ldi	r23, 0x02	; 2
    4c1a:	80 e7       	ldi	r24, 0x70	; 112
    4c1c:	91 e0       	ldi	r25, 0x01	; 1
    4c1e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
        attachInterrupt(0, dmpDataReady, RISING);
    4c22:	43 e0       	ldi	r20, 0x03	; 3
    4c24:	50 e0       	ldi	r21, 0x00	; 0
    4c26:	60 e5       	ldi	r22, 0x50	; 80
    4c28:	7d e1       	ldi	r23, 0x1D	; 29
    4c2a:	80 e0       	ldi	r24, 0x00	; 0
    4c2c:	0e 94 67 10 	call	0x20ce	; 0x20ce <attachInterrupt>
        mpuIntStatus = mpu.getIntStatus();
    4c30:	84 eb       	ldi	r24, 0xB4	; 180
    4c32:	93 e0       	ldi	r25, 0x03	; 3
    4c34:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <_ZN7MPU605012getIntStatusEv>
    4c38:	80 93 a7 03 	sts	0x03A7, r24

        // set our DMP Ready flag so the main loop() function knows it's okay to use it
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
    4c3c:	6b ea       	ldi	r22, 0xAB	; 171
    4c3e:	72 e0       	ldi	r23, 0x02	; 2
    4c40:	80 e7       	ldi	r24, 0x70	; 112
    4c42:	91 e0       	ldi	r25, 0x01	; 1
    4c44:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
        dmpReady = true;
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	80 93 a8 03 	sts	0x03A8, r24

        // get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    4c4e:	80 91 b6 03 	lds	r24, 0x03B6
    4c52:	90 91 b7 03 	lds	r25, 0x03B7
    4c56:	90 93 a5 03 	sts	0x03A5, r25
    4c5a:	80 93 a4 03 	sts	0x03A4, r24
    4c5e:	14 c0       	rjmp	.+40     	; 0x4c88 <setup+0x190>
    } else {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F("DMP Initialization failed (code "));
    4c60:	6a e8       	ldi	r22, 0x8A	; 138
    4c62:	72 e0       	ldi	r23, 0x02	; 2
    4c64:	80 e7       	ldi	r24, 0x70	; 112
    4c66:	91 e0       	ldi	r25, 0x01	; 1
    4c68:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(devStatus);
    4c6c:	4a e0       	ldi	r20, 0x0A	; 10
    4c6e:	50 e0       	ldi	r21, 0x00	; 0
    4c70:	60 91 a6 03 	lds	r22, 0x03A6
    4c74:	80 e7       	ldi	r24, 0x70	; 112
    4c76:	91 e0       	ldi	r25, 0x01	; 1
    4c78:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN5Print5printEhi>
        Serial.println(F(")"));
    4c7c:	68 e8       	ldi	r22, 0x88	; 136
    4c7e:	72 e0       	ldi	r23, 0x02	; 2
    4c80:	80 e7       	ldi	r24, 0x70	; 112
    4c82:	91 e0       	ldi	r25, 0x01	; 1
    4c84:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN5Print7printlnEPK19__FlashStringHelper>
    }

    // configure LED for output
    pinMode(LED_PIN, OUTPUT);
    4c88:	61 e0       	ldi	r22, 0x01	; 1
    4c8a:	8d e0       	ldi	r24, 0x0D	; 13
    4c8c:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <pinMode>
}
    4c90:	0f 91       	pop	r16
    4c92:	08 95       	ret

00004c94 <__subsf3>:
    4c94:	50 58       	subi	r21, 0x80	; 128

00004c96 <__addsf3>:
    4c96:	bb 27       	eor	r27, r27
    4c98:	aa 27       	eor	r26, r26
    4c9a:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <__addsf3x>
    4c9e:	0c 94 75 28 	jmp	0x50ea	; 0x50ea <__fp_round>
    4ca2:	0e 94 67 28 	call	0x50ce	; 0x50ce <__fp_pscA>
    4ca6:	38 f0       	brcs	.+14     	; 0x4cb6 <__addsf3+0x20>
    4ca8:	0e 94 6e 28 	call	0x50dc	; 0x50dc <__fp_pscB>
    4cac:	20 f0       	brcs	.+8      	; 0x4cb6 <__addsf3+0x20>
    4cae:	39 f4       	brne	.+14     	; 0x4cbe <__addsf3+0x28>
    4cb0:	9f 3f       	cpi	r25, 0xFF	; 255
    4cb2:	19 f4       	brne	.+6      	; 0x4cba <__addsf3+0x24>
    4cb4:	26 f4       	brtc	.+8      	; 0x4cbe <__addsf3+0x28>
    4cb6:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__fp_nan>
    4cba:	0e f4       	brtc	.+2      	; 0x4cbe <__addsf3+0x28>
    4cbc:	e0 95       	com	r30
    4cbe:	e7 fb       	bst	r30, 7
    4cc0:	0c 94 37 28 	jmp	0x506e	; 0x506e <__fp_inf>

00004cc4 <__addsf3x>:
    4cc4:	e9 2f       	mov	r30, r25
    4cc6:	0e 94 86 28 	call	0x510c	; 0x510c <__fp_split3>
    4cca:	58 f3       	brcs	.-42     	; 0x4ca2 <__addsf3+0xc>
    4ccc:	ba 17       	cp	r27, r26
    4cce:	62 07       	cpc	r22, r18
    4cd0:	73 07       	cpc	r23, r19
    4cd2:	84 07       	cpc	r24, r20
    4cd4:	95 07       	cpc	r25, r21
    4cd6:	20 f0       	brcs	.+8      	; 0x4ce0 <__addsf3x+0x1c>
    4cd8:	79 f4       	brne	.+30     	; 0x4cf8 <__addsf3x+0x34>
    4cda:	a6 f5       	brtc	.+104    	; 0x4d44 <__addsf3x+0x80>
    4cdc:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__fp_zero>
    4ce0:	0e f4       	brtc	.+2      	; 0x4ce4 <__addsf3x+0x20>
    4ce2:	e0 95       	com	r30
    4ce4:	0b 2e       	mov	r0, r27
    4ce6:	ba 2f       	mov	r27, r26
    4ce8:	a0 2d       	mov	r26, r0
    4cea:	0b 01       	movw	r0, r22
    4cec:	b9 01       	movw	r22, r18
    4cee:	90 01       	movw	r18, r0
    4cf0:	0c 01       	movw	r0, r24
    4cf2:	ca 01       	movw	r24, r20
    4cf4:	a0 01       	movw	r20, r0
    4cf6:	11 24       	eor	r1, r1
    4cf8:	ff 27       	eor	r31, r31
    4cfa:	59 1b       	sub	r21, r25
    4cfc:	99 f0       	breq	.+38     	; 0x4d24 <__addsf3x+0x60>
    4cfe:	59 3f       	cpi	r21, 0xF9	; 249
    4d00:	50 f4       	brcc	.+20     	; 0x4d16 <__addsf3x+0x52>
    4d02:	50 3e       	cpi	r21, 0xE0	; 224
    4d04:	68 f1       	brcs	.+90     	; 0x4d60 <__addsf3x+0x9c>
    4d06:	1a 16       	cp	r1, r26
    4d08:	f0 40       	sbci	r31, 0x00	; 0
    4d0a:	a2 2f       	mov	r26, r18
    4d0c:	23 2f       	mov	r18, r19
    4d0e:	34 2f       	mov	r19, r20
    4d10:	44 27       	eor	r20, r20
    4d12:	58 5f       	subi	r21, 0xF8	; 248
    4d14:	f3 cf       	rjmp	.-26     	; 0x4cfc <__addsf3x+0x38>
    4d16:	46 95       	lsr	r20
    4d18:	37 95       	ror	r19
    4d1a:	27 95       	ror	r18
    4d1c:	a7 95       	ror	r26
    4d1e:	f0 40       	sbci	r31, 0x00	; 0
    4d20:	53 95       	inc	r21
    4d22:	c9 f7       	brne	.-14     	; 0x4d16 <__addsf3x+0x52>
    4d24:	7e f4       	brtc	.+30     	; 0x4d44 <__addsf3x+0x80>
    4d26:	1f 16       	cp	r1, r31
    4d28:	ba 0b       	sbc	r27, r26
    4d2a:	62 0b       	sbc	r22, r18
    4d2c:	73 0b       	sbc	r23, r19
    4d2e:	84 0b       	sbc	r24, r20
    4d30:	ba f0       	brmi	.+46     	; 0x4d60 <__addsf3x+0x9c>
    4d32:	91 50       	subi	r25, 0x01	; 1
    4d34:	a1 f0       	breq	.+40     	; 0x4d5e <__addsf3x+0x9a>
    4d36:	ff 0f       	add	r31, r31
    4d38:	bb 1f       	adc	r27, r27
    4d3a:	66 1f       	adc	r22, r22
    4d3c:	77 1f       	adc	r23, r23
    4d3e:	88 1f       	adc	r24, r24
    4d40:	c2 f7       	brpl	.-16     	; 0x4d32 <__addsf3x+0x6e>
    4d42:	0e c0       	rjmp	.+28     	; 0x4d60 <__addsf3x+0x9c>
    4d44:	ba 0f       	add	r27, r26
    4d46:	62 1f       	adc	r22, r18
    4d48:	73 1f       	adc	r23, r19
    4d4a:	84 1f       	adc	r24, r20
    4d4c:	48 f4       	brcc	.+18     	; 0x4d60 <__addsf3x+0x9c>
    4d4e:	87 95       	ror	r24
    4d50:	77 95       	ror	r23
    4d52:	67 95       	ror	r22
    4d54:	b7 95       	ror	r27
    4d56:	f7 95       	ror	r31
    4d58:	9e 3f       	cpi	r25, 0xFE	; 254
    4d5a:	08 f0       	brcs	.+2      	; 0x4d5e <__addsf3x+0x9a>
    4d5c:	b0 cf       	rjmp	.-160    	; 0x4cbe <__addsf3+0x28>
    4d5e:	93 95       	inc	r25
    4d60:	88 0f       	add	r24, r24
    4d62:	08 f0       	brcs	.+2      	; 0x4d66 <__addsf3x+0xa2>
    4d64:	99 27       	eor	r25, r25
    4d66:	ee 0f       	add	r30, r30
    4d68:	97 95       	ror	r25
    4d6a:	87 95       	ror	r24
    4d6c:	08 95       	ret
    4d6e:	0e 94 67 28 	call	0x50ce	; 0x50ce <__fp_pscA>
    4d72:	60 f0       	brcs	.+24     	; 0x4d8c <__addsf3x+0xc8>
    4d74:	80 e8       	ldi	r24, 0x80	; 128
    4d76:	91 e0       	ldi	r25, 0x01	; 1
    4d78:	09 f4       	brne	.+2      	; 0x4d7c <__addsf3x+0xb8>
    4d7a:	9e ef       	ldi	r25, 0xFE	; 254
    4d7c:	0e 94 6e 28 	call	0x50dc	; 0x50dc <__fp_pscB>
    4d80:	28 f0       	brcs	.+10     	; 0x4d8c <__addsf3x+0xc8>
    4d82:	40 e8       	ldi	r20, 0x80	; 128
    4d84:	51 e0       	ldi	r21, 0x01	; 1
    4d86:	71 f4       	brne	.+28     	; 0x4da4 <atan2+0x10>
    4d88:	5e ef       	ldi	r21, 0xFE	; 254
    4d8a:	0c c0       	rjmp	.+24     	; 0x4da4 <atan2+0x10>
    4d8c:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__fp_nan>
    4d90:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__fp_zero>

00004d94 <atan2>:
    4d94:	e9 2f       	mov	r30, r25
    4d96:	e0 78       	andi	r30, 0x80	; 128
    4d98:	0e 94 86 28 	call	0x510c	; 0x510c <__fp_split3>
    4d9c:	40 f3       	brcs	.-48     	; 0x4d6e <__addsf3x+0xaa>
    4d9e:	09 2e       	mov	r0, r25
    4da0:	05 2a       	or	r0, r21
    4da2:	b1 f3       	breq	.-20     	; 0x4d90 <__addsf3x+0xcc>
    4da4:	26 17       	cp	r18, r22
    4da6:	37 07       	cpc	r19, r23
    4da8:	48 07       	cpc	r20, r24
    4daa:	59 07       	cpc	r21, r25
    4dac:	38 f0       	brcs	.+14     	; 0x4dbc <atan2+0x28>
    4dae:	0e 2e       	mov	r0, r30
    4db0:	07 f8       	bld	r0, 7
    4db2:	e0 25       	eor	r30, r0
    4db4:	69 f0       	breq	.+26     	; 0x4dd0 <atan2+0x3c>
    4db6:	e0 25       	eor	r30, r0
    4db8:	e0 64       	ori	r30, 0x40	; 64
    4dba:	0a c0       	rjmp	.+20     	; 0x4dd0 <atan2+0x3c>
    4dbc:	ef 63       	ori	r30, 0x3F	; 63
    4dbe:	07 f8       	bld	r0, 7
    4dc0:	00 94       	com	r0
    4dc2:	07 fa       	bst	r0, 7
    4dc4:	db 01       	movw	r26, r22
    4dc6:	b9 01       	movw	r22, r18
    4dc8:	9d 01       	movw	r18, r26
    4dca:	dc 01       	movw	r26, r24
    4dcc:	ca 01       	movw	r24, r20
    4dce:	ad 01       	movw	r20, r26
    4dd0:	ef 93       	push	r30
    4dd2:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <__divsf3_pse>
    4dd6:	0e 94 75 28 	call	0x50ea	; 0x50ea <__fp_round>
    4dda:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <atan>
    4dde:	5f 91       	pop	r21
    4de0:	55 23       	and	r21, r21
    4de2:	39 f0       	breq	.+14     	; 0x4df2 <atan2+0x5e>
    4de4:	2b ed       	ldi	r18, 0xDB	; 219
    4de6:	3f e0       	ldi	r19, 0x0F	; 15
    4de8:	49 e4       	ldi	r20, 0x49	; 73
    4dea:	50 fd       	sbrc	r21, 0
    4dec:	49 ec       	ldi	r20, 0xC9	; 201
    4dee:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__addsf3>
    4df2:	08 95       	ret

00004df4 <atan>:
    4df4:	df 93       	push	r29
    4df6:	dd 27       	eor	r29, r29
    4df8:	b9 2f       	mov	r27, r25
    4dfa:	bf 77       	andi	r27, 0x7F	; 127
    4dfc:	40 e8       	ldi	r20, 0x80	; 128
    4dfe:	5f e3       	ldi	r21, 0x3F	; 63
    4e00:	16 16       	cp	r1, r22
    4e02:	17 06       	cpc	r1, r23
    4e04:	48 07       	cpc	r20, r24
    4e06:	5b 07       	cpc	r21, r27
    4e08:	18 f4       	brcc	.+6      	; 0x4e10 <atan+0x1c>
    4e0a:	d9 2f       	mov	r29, r25
    4e0c:	0e 94 b4 28 	call	0x5168	; 0x5168 <inverse>
    4e10:	9f 93       	push	r25
    4e12:	8f 93       	push	r24
    4e14:	7f 93       	push	r23
    4e16:	6f 93       	push	r22
    4e18:	0e 94 6f 29 	call	0x52de	; 0x52de <square>
    4e1c:	ea ef       	ldi	r30, 0xFA	; 250
    4e1e:	f1 e0       	ldi	r31, 0x01	; 1
    4e20:	0e 94 40 28 	call	0x5080	; 0x5080 <__fp_powser>
    4e24:	0e 94 75 28 	call	0x50ea	; 0x50ea <__fp_round>
    4e28:	2f 91       	pop	r18
    4e2a:	3f 91       	pop	r19
    4e2c:	4f 91       	pop	r20
    4e2e:	5f 91       	pop	r21
    4e30:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3x>
    4e34:	dd 23       	and	r29, r29
    4e36:	51 f0       	breq	.+20     	; 0x4e4c <atan+0x58>
    4e38:	90 58       	subi	r25, 0x80	; 128
    4e3a:	a2 ea       	ldi	r26, 0xA2	; 162
    4e3c:	2a ed       	ldi	r18, 0xDA	; 218
    4e3e:	3f e0       	ldi	r19, 0x0F	; 15
    4e40:	49 ec       	ldi	r20, 0xC9	; 201
    4e42:	5f e3       	ldi	r21, 0x3F	; 63
    4e44:	d0 78       	andi	r29, 0x80	; 128
    4e46:	5d 27       	eor	r21, r29
    4e48:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <__addsf3x>
    4e4c:	df 91       	pop	r29
    4e4e:	0c 94 75 28 	jmp	0x50ea	; 0x50ea <__fp_round>

00004e52 <__cmpsf2>:
    4e52:	0e 94 13 28 	call	0x5026	; 0x5026 <__fp_cmp>
    4e56:	08 f4       	brcc	.+2      	; 0x4e5a <__cmpsf2+0x8>
    4e58:	81 e0       	ldi	r24, 0x01	; 1
    4e5a:	08 95       	ret

00004e5c <__divsf3>:
    4e5c:	0e 94 42 27 	call	0x4e84	; 0x4e84 <__divsf3x>
    4e60:	0c 94 75 28 	jmp	0x50ea	; 0x50ea <__fp_round>
    4e64:	0e 94 6e 28 	call	0x50dc	; 0x50dc <__fp_pscB>
    4e68:	58 f0       	brcs	.+22     	; 0x4e80 <__divsf3+0x24>
    4e6a:	0e 94 67 28 	call	0x50ce	; 0x50ce <__fp_pscA>
    4e6e:	40 f0       	brcs	.+16     	; 0x4e80 <__divsf3+0x24>
    4e70:	29 f4       	brne	.+10     	; 0x4e7c <__divsf3+0x20>
    4e72:	5f 3f       	cpi	r21, 0xFF	; 255
    4e74:	29 f0       	breq	.+10     	; 0x4e80 <__divsf3+0x24>
    4e76:	0c 94 37 28 	jmp	0x506e	; 0x506e <__fp_inf>
    4e7a:	51 11       	cpse	r21, r1
    4e7c:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__fp_szero>
    4e80:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__fp_nan>

00004e84 <__divsf3x>:
    4e84:	0e 94 86 28 	call	0x510c	; 0x510c <__fp_split3>
    4e88:	68 f3       	brcs	.-38     	; 0x4e64 <__divsf3+0x8>

00004e8a <__divsf3_pse>:
    4e8a:	99 23       	and	r25, r25
    4e8c:	b1 f3       	breq	.-20     	; 0x4e7a <__divsf3+0x1e>
    4e8e:	55 23       	and	r21, r21
    4e90:	91 f3       	breq	.-28     	; 0x4e76 <__divsf3+0x1a>
    4e92:	95 1b       	sub	r25, r21
    4e94:	55 0b       	sbc	r21, r21
    4e96:	bb 27       	eor	r27, r27
    4e98:	aa 27       	eor	r26, r26
    4e9a:	62 17       	cp	r22, r18
    4e9c:	73 07       	cpc	r23, r19
    4e9e:	84 07       	cpc	r24, r20
    4ea0:	38 f0       	brcs	.+14     	; 0x4eb0 <__divsf3_pse+0x26>
    4ea2:	9f 5f       	subi	r25, 0xFF	; 255
    4ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea6:	22 0f       	add	r18, r18
    4ea8:	33 1f       	adc	r19, r19
    4eaa:	44 1f       	adc	r20, r20
    4eac:	aa 1f       	adc	r26, r26
    4eae:	a9 f3       	breq	.-22     	; 0x4e9a <__divsf3_pse+0x10>
    4eb0:	35 d0       	rcall	.+106    	; 0x4f1c <__divsf3_pse+0x92>
    4eb2:	0e 2e       	mov	r0, r30
    4eb4:	3a f0       	brmi	.+14     	; 0x4ec4 <__divsf3_pse+0x3a>
    4eb6:	e0 e8       	ldi	r30, 0x80	; 128
    4eb8:	32 d0       	rcall	.+100    	; 0x4f1e <__divsf3_pse+0x94>
    4eba:	91 50       	subi	r25, 0x01	; 1
    4ebc:	50 40       	sbci	r21, 0x00	; 0
    4ebe:	e6 95       	lsr	r30
    4ec0:	00 1c       	adc	r0, r0
    4ec2:	ca f7       	brpl	.-14     	; 0x4eb6 <__divsf3_pse+0x2c>
    4ec4:	2b d0       	rcall	.+86     	; 0x4f1c <__divsf3_pse+0x92>
    4ec6:	fe 2f       	mov	r31, r30
    4ec8:	29 d0       	rcall	.+82     	; 0x4f1c <__divsf3_pse+0x92>
    4eca:	66 0f       	add	r22, r22
    4ecc:	77 1f       	adc	r23, r23
    4ece:	88 1f       	adc	r24, r24
    4ed0:	bb 1f       	adc	r27, r27
    4ed2:	26 17       	cp	r18, r22
    4ed4:	37 07       	cpc	r19, r23
    4ed6:	48 07       	cpc	r20, r24
    4ed8:	ab 07       	cpc	r26, r27
    4eda:	b0 e8       	ldi	r27, 0x80	; 128
    4edc:	09 f0       	breq	.+2      	; 0x4ee0 <__divsf3_pse+0x56>
    4ede:	bb 0b       	sbc	r27, r27
    4ee0:	80 2d       	mov	r24, r0
    4ee2:	bf 01       	movw	r22, r30
    4ee4:	ff 27       	eor	r31, r31
    4ee6:	93 58       	subi	r25, 0x83	; 131
    4ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    4eea:	3a f0       	brmi	.+14     	; 0x4efa <__divsf3_pse+0x70>
    4eec:	9e 3f       	cpi	r25, 0xFE	; 254
    4eee:	51 05       	cpc	r21, r1
    4ef0:	78 f0       	brcs	.+30     	; 0x4f10 <__divsf3_pse+0x86>
    4ef2:	0c 94 37 28 	jmp	0x506e	; 0x506e <__fp_inf>
    4ef6:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__fp_szero>
    4efa:	5f 3f       	cpi	r21, 0xFF	; 255
    4efc:	e4 f3       	brlt	.-8      	; 0x4ef6 <__divsf3_pse+0x6c>
    4efe:	98 3e       	cpi	r25, 0xE8	; 232
    4f00:	d4 f3       	brlt	.-12     	; 0x4ef6 <__divsf3_pse+0x6c>
    4f02:	86 95       	lsr	r24
    4f04:	77 95       	ror	r23
    4f06:	67 95       	ror	r22
    4f08:	b7 95       	ror	r27
    4f0a:	f7 95       	ror	r31
    4f0c:	9f 5f       	subi	r25, 0xFF	; 255
    4f0e:	c9 f7       	brne	.-14     	; 0x4f02 <__divsf3_pse+0x78>
    4f10:	88 0f       	add	r24, r24
    4f12:	91 1d       	adc	r25, r1
    4f14:	96 95       	lsr	r25
    4f16:	87 95       	ror	r24
    4f18:	97 f9       	bld	r25, 7
    4f1a:	08 95       	ret
    4f1c:	e1 e0       	ldi	r30, 0x01	; 1
    4f1e:	66 0f       	add	r22, r22
    4f20:	77 1f       	adc	r23, r23
    4f22:	88 1f       	adc	r24, r24
    4f24:	bb 1f       	adc	r27, r27
    4f26:	62 17       	cp	r22, r18
    4f28:	73 07       	cpc	r23, r19
    4f2a:	84 07       	cpc	r24, r20
    4f2c:	ba 07       	cpc	r27, r26
    4f2e:	20 f0       	brcs	.+8      	; 0x4f38 <__divsf3_pse+0xae>
    4f30:	62 1b       	sub	r22, r18
    4f32:	73 0b       	sbc	r23, r19
    4f34:	84 0b       	sbc	r24, r20
    4f36:	ba 0b       	sbc	r27, r26
    4f38:	ee 1f       	adc	r30, r30
    4f3a:	88 f7       	brcc	.-30     	; 0x4f1e <__divsf3_pse+0x94>
    4f3c:	e0 95       	com	r30
    4f3e:	08 95       	ret

00004f40 <__fixsfsi>:
    4f40:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <__fixunssfsi>
    4f44:	68 94       	set
    4f46:	b1 11       	cpse	r27, r1
    4f48:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__fp_szero>
    4f4c:	08 95       	ret

00004f4e <__fixunssfsi>:
    4f4e:	0e 94 8e 28 	call	0x511c	; 0x511c <__fp_splitA>
    4f52:	88 f0       	brcs	.+34     	; 0x4f76 <__fixunssfsi+0x28>
    4f54:	9f 57       	subi	r25, 0x7F	; 127
    4f56:	98 f0       	brcs	.+38     	; 0x4f7e <__fixunssfsi+0x30>
    4f58:	b9 2f       	mov	r27, r25
    4f5a:	99 27       	eor	r25, r25
    4f5c:	b7 51       	subi	r27, 0x17	; 23
    4f5e:	b0 f0       	brcs	.+44     	; 0x4f8c <__fixunssfsi+0x3e>
    4f60:	e1 f0       	breq	.+56     	; 0x4f9a <__fixunssfsi+0x4c>
    4f62:	66 0f       	add	r22, r22
    4f64:	77 1f       	adc	r23, r23
    4f66:	88 1f       	adc	r24, r24
    4f68:	99 1f       	adc	r25, r25
    4f6a:	1a f0       	brmi	.+6      	; 0x4f72 <__fixunssfsi+0x24>
    4f6c:	ba 95       	dec	r27
    4f6e:	c9 f7       	brne	.-14     	; 0x4f62 <__fixunssfsi+0x14>
    4f70:	14 c0       	rjmp	.+40     	; 0x4f9a <__fixunssfsi+0x4c>
    4f72:	b1 30       	cpi	r27, 0x01	; 1
    4f74:	91 f0       	breq	.+36     	; 0x4f9a <__fixunssfsi+0x4c>
    4f76:	0e 94 a8 28 	call	0x5150	; 0x5150 <__fp_zero>
    4f7a:	b1 e0       	ldi	r27, 0x01	; 1
    4f7c:	08 95       	ret
    4f7e:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__fp_zero>
    4f82:	67 2f       	mov	r22, r23
    4f84:	78 2f       	mov	r23, r24
    4f86:	88 27       	eor	r24, r24
    4f88:	b8 5f       	subi	r27, 0xF8	; 248
    4f8a:	39 f0       	breq	.+14     	; 0x4f9a <__fixunssfsi+0x4c>
    4f8c:	b9 3f       	cpi	r27, 0xF9	; 249
    4f8e:	cc f3       	brlt	.-14     	; 0x4f82 <__fixunssfsi+0x34>
    4f90:	86 95       	lsr	r24
    4f92:	77 95       	ror	r23
    4f94:	67 95       	ror	r22
    4f96:	b3 95       	inc	r27
    4f98:	d9 f7       	brne	.-10     	; 0x4f90 <__fixunssfsi+0x42>
    4f9a:	3e f4       	brtc	.+14     	; 0x4faa <__fixunssfsi+0x5c>
    4f9c:	90 95       	com	r25
    4f9e:	80 95       	com	r24
    4fa0:	70 95       	com	r23
    4fa2:	61 95       	neg	r22
    4fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    4fa6:	8f 4f       	sbci	r24, 0xFF	; 255
    4fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    4faa:	08 95       	ret

00004fac <__floatunsisf>:
    4fac:	e8 94       	clt
    4fae:	09 c0       	rjmp	.+18     	; 0x4fc2 <__floatsisf+0x12>

00004fb0 <__floatsisf>:
    4fb0:	97 fb       	bst	r25, 7
    4fb2:	3e f4       	brtc	.+14     	; 0x4fc2 <__floatsisf+0x12>
    4fb4:	90 95       	com	r25
    4fb6:	80 95       	com	r24
    4fb8:	70 95       	com	r23
    4fba:	61 95       	neg	r22
    4fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    4fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fc2:	99 23       	and	r25, r25
    4fc4:	a9 f0       	breq	.+42     	; 0x4ff0 <__floatsisf+0x40>
    4fc6:	f9 2f       	mov	r31, r25
    4fc8:	96 e9       	ldi	r25, 0x96	; 150
    4fca:	bb 27       	eor	r27, r27
    4fcc:	93 95       	inc	r25
    4fce:	f6 95       	lsr	r31
    4fd0:	87 95       	ror	r24
    4fd2:	77 95       	ror	r23
    4fd4:	67 95       	ror	r22
    4fd6:	b7 95       	ror	r27
    4fd8:	f1 11       	cpse	r31, r1
    4fda:	f8 cf       	rjmp	.-16     	; 0x4fcc <__floatsisf+0x1c>
    4fdc:	fa f4       	brpl	.+62     	; 0x501c <__floatsisf+0x6c>
    4fde:	bb 0f       	add	r27, r27
    4fe0:	11 f4       	brne	.+4      	; 0x4fe6 <__floatsisf+0x36>
    4fe2:	60 ff       	sbrs	r22, 0
    4fe4:	1b c0       	rjmp	.+54     	; 0x501c <__floatsisf+0x6c>
    4fe6:	6f 5f       	subi	r22, 0xFF	; 255
    4fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    4fea:	8f 4f       	sbci	r24, 0xFF	; 255
    4fec:	9f 4f       	sbci	r25, 0xFF	; 255
    4fee:	16 c0       	rjmp	.+44     	; 0x501c <__floatsisf+0x6c>
    4ff0:	88 23       	and	r24, r24
    4ff2:	11 f0       	breq	.+4      	; 0x4ff8 <__floatsisf+0x48>
    4ff4:	96 e9       	ldi	r25, 0x96	; 150
    4ff6:	11 c0       	rjmp	.+34     	; 0x501a <__floatsisf+0x6a>
    4ff8:	77 23       	and	r23, r23
    4ffa:	21 f0       	breq	.+8      	; 0x5004 <__floatsisf+0x54>
    4ffc:	9e e8       	ldi	r25, 0x8E	; 142
    4ffe:	87 2f       	mov	r24, r23
    5000:	76 2f       	mov	r23, r22
    5002:	05 c0       	rjmp	.+10     	; 0x500e <__floatsisf+0x5e>
    5004:	66 23       	and	r22, r22
    5006:	71 f0       	breq	.+28     	; 0x5024 <__floatsisf+0x74>
    5008:	96 e8       	ldi	r25, 0x86	; 134
    500a:	86 2f       	mov	r24, r22
    500c:	70 e0       	ldi	r23, 0x00	; 0
    500e:	60 e0       	ldi	r22, 0x00	; 0
    5010:	2a f0       	brmi	.+10     	; 0x501c <__floatsisf+0x6c>
    5012:	9a 95       	dec	r25
    5014:	66 0f       	add	r22, r22
    5016:	77 1f       	adc	r23, r23
    5018:	88 1f       	adc	r24, r24
    501a:	da f7       	brpl	.-10     	; 0x5012 <__floatsisf+0x62>
    501c:	88 0f       	add	r24, r24
    501e:	96 95       	lsr	r25
    5020:	87 95       	ror	r24
    5022:	97 f9       	bld	r25, 7
    5024:	08 95       	ret

00005026 <__fp_cmp>:
    5026:	99 0f       	add	r25, r25
    5028:	00 08       	sbc	r0, r0
    502a:	55 0f       	add	r21, r21
    502c:	aa 0b       	sbc	r26, r26
    502e:	e0 e8       	ldi	r30, 0x80	; 128
    5030:	fe ef       	ldi	r31, 0xFE	; 254
    5032:	16 16       	cp	r1, r22
    5034:	17 06       	cpc	r1, r23
    5036:	e8 07       	cpc	r30, r24
    5038:	f9 07       	cpc	r31, r25
    503a:	c0 f0       	brcs	.+48     	; 0x506c <__fp_cmp+0x46>
    503c:	12 16       	cp	r1, r18
    503e:	13 06       	cpc	r1, r19
    5040:	e4 07       	cpc	r30, r20
    5042:	f5 07       	cpc	r31, r21
    5044:	98 f0       	brcs	.+38     	; 0x506c <__fp_cmp+0x46>
    5046:	62 1b       	sub	r22, r18
    5048:	73 0b       	sbc	r23, r19
    504a:	84 0b       	sbc	r24, r20
    504c:	95 0b       	sbc	r25, r21
    504e:	39 f4       	brne	.+14     	; 0x505e <__fp_cmp+0x38>
    5050:	0a 26       	eor	r0, r26
    5052:	61 f0       	breq	.+24     	; 0x506c <__fp_cmp+0x46>
    5054:	23 2b       	or	r18, r19
    5056:	24 2b       	or	r18, r20
    5058:	25 2b       	or	r18, r21
    505a:	21 f4       	brne	.+8      	; 0x5064 <__fp_cmp+0x3e>
    505c:	08 95       	ret
    505e:	0a 26       	eor	r0, r26
    5060:	09 f4       	brne	.+2      	; 0x5064 <__fp_cmp+0x3e>
    5062:	a1 40       	sbci	r26, 0x01	; 1
    5064:	a6 95       	lsr	r26
    5066:	8f ef       	ldi	r24, 0xFF	; 255
    5068:	81 1d       	adc	r24, r1
    506a:	81 1d       	adc	r24, r1
    506c:	08 95       	ret

0000506e <__fp_inf>:
    506e:	97 f9       	bld	r25, 7
    5070:	9f 67       	ori	r25, 0x7F	; 127
    5072:	80 e8       	ldi	r24, 0x80	; 128
    5074:	70 e0       	ldi	r23, 0x00	; 0
    5076:	60 e0       	ldi	r22, 0x00	; 0
    5078:	08 95       	ret

0000507a <__fp_nan>:
    507a:	9f ef       	ldi	r25, 0xFF	; 255
    507c:	80 ec       	ldi	r24, 0xC0	; 192
    507e:	08 95       	ret

00005080 <__fp_powser>:
    5080:	df 93       	push	r29
    5082:	cf 93       	push	r28
    5084:	1f 93       	push	r17
    5086:	0f 93       	push	r16
    5088:	ff 92       	push	r15
    508a:	ef 92       	push	r14
    508c:	df 92       	push	r13
    508e:	7b 01       	movw	r14, r22
    5090:	8c 01       	movw	r16, r24
    5092:	68 94       	set
    5094:	06 c0       	rjmp	.+12     	; 0x50a2 <__fp_powser+0x22>
    5096:	da 2e       	mov	r13, r26
    5098:	ef 01       	movw	r28, r30
    509a:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3x>
    509e:	fe 01       	movw	r30, r28
    50a0:	e8 94       	clt
    50a2:	a5 91       	lpm	r26, Z+
    50a4:	25 91       	lpm	r18, Z+
    50a6:	35 91       	lpm	r19, Z+
    50a8:	45 91       	lpm	r20, Z+
    50aa:	55 91       	lpm	r21, Z+
    50ac:	a6 f3       	brts	.-24     	; 0x5096 <__fp_powser+0x16>
    50ae:	ef 01       	movw	r28, r30
    50b0:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <__addsf3x>
    50b4:	fe 01       	movw	r30, r28
    50b6:	97 01       	movw	r18, r14
    50b8:	a8 01       	movw	r20, r16
    50ba:	da 94       	dec	r13
    50bc:	69 f7       	brne	.-38     	; 0x5098 <__fp_powser+0x18>
    50be:	df 90       	pop	r13
    50c0:	ef 90       	pop	r14
    50c2:	ff 90       	pop	r15
    50c4:	0f 91       	pop	r16
    50c6:	1f 91       	pop	r17
    50c8:	cf 91       	pop	r28
    50ca:	df 91       	pop	r29
    50cc:	08 95       	ret

000050ce <__fp_pscA>:
    50ce:	00 24       	eor	r0, r0
    50d0:	0a 94       	dec	r0
    50d2:	16 16       	cp	r1, r22
    50d4:	17 06       	cpc	r1, r23
    50d6:	18 06       	cpc	r1, r24
    50d8:	09 06       	cpc	r0, r25
    50da:	08 95       	ret

000050dc <__fp_pscB>:
    50dc:	00 24       	eor	r0, r0
    50de:	0a 94       	dec	r0
    50e0:	12 16       	cp	r1, r18
    50e2:	13 06       	cpc	r1, r19
    50e4:	14 06       	cpc	r1, r20
    50e6:	05 06       	cpc	r0, r21
    50e8:	08 95       	ret

000050ea <__fp_round>:
    50ea:	09 2e       	mov	r0, r25
    50ec:	03 94       	inc	r0
    50ee:	00 0c       	add	r0, r0
    50f0:	11 f4       	brne	.+4      	; 0x50f6 <__fp_round+0xc>
    50f2:	88 23       	and	r24, r24
    50f4:	52 f0       	brmi	.+20     	; 0x510a <__fp_round+0x20>
    50f6:	bb 0f       	add	r27, r27
    50f8:	40 f4       	brcc	.+16     	; 0x510a <__fp_round+0x20>
    50fa:	bf 2b       	or	r27, r31
    50fc:	11 f4       	brne	.+4      	; 0x5102 <__fp_round+0x18>
    50fe:	60 ff       	sbrs	r22, 0
    5100:	04 c0       	rjmp	.+8      	; 0x510a <__fp_round+0x20>
    5102:	6f 5f       	subi	r22, 0xFF	; 255
    5104:	7f 4f       	sbci	r23, 0xFF	; 255
    5106:	8f 4f       	sbci	r24, 0xFF	; 255
    5108:	9f 4f       	sbci	r25, 0xFF	; 255
    510a:	08 95       	ret

0000510c <__fp_split3>:
    510c:	57 fd       	sbrc	r21, 7
    510e:	90 58       	subi	r25, 0x80	; 128
    5110:	44 0f       	add	r20, r20
    5112:	55 1f       	adc	r21, r21
    5114:	59 f0       	breq	.+22     	; 0x512c <__fp_splitA+0x10>
    5116:	5f 3f       	cpi	r21, 0xFF	; 255
    5118:	71 f0       	breq	.+28     	; 0x5136 <__fp_splitA+0x1a>
    511a:	47 95       	ror	r20

0000511c <__fp_splitA>:
    511c:	88 0f       	add	r24, r24
    511e:	97 fb       	bst	r25, 7
    5120:	99 1f       	adc	r25, r25
    5122:	61 f0       	breq	.+24     	; 0x513c <__fp_splitA+0x20>
    5124:	9f 3f       	cpi	r25, 0xFF	; 255
    5126:	79 f0       	breq	.+30     	; 0x5146 <__fp_splitA+0x2a>
    5128:	87 95       	ror	r24
    512a:	08 95       	ret
    512c:	12 16       	cp	r1, r18
    512e:	13 06       	cpc	r1, r19
    5130:	14 06       	cpc	r1, r20
    5132:	55 1f       	adc	r21, r21
    5134:	f2 cf       	rjmp	.-28     	; 0x511a <__fp_split3+0xe>
    5136:	46 95       	lsr	r20
    5138:	f1 df       	rcall	.-30     	; 0x511c <__fp_splitA>
    513a:	08 c0       	rjmp	.+16     	; 0x514c <__fp_splitA+0x30>
    513c:	16 16       	cp	r1, r22
    513e:	17 06       	cpc	r1, r23
    5140:	18 06       	cpc	r1, r24
    5142:	99 1f       	adc	r25, r25
    5144:	f1 cf       	rjmp	.-30     	; 0x5128 <__fp_splitA+0xc>
    5146:	86 95       	lsr	r24
    5148:	71 05       	cpc	r23, r1
    514a:	61 05       	cpc	r22, r1
    514c:	08 94       	sec
    514e:	08 95       	ret

00005150 <__fp_zero>:
    5150:	e8 94       	clt

00005152 <__fp_szero>:
    5152:	bb 27       	eor	r27, r27
    5154:	66 27       	eor	r22, r22
    5156:	77 27       	eor	r23, r23
    5158:	cb 01       	movw	r24, r22
    515a:	97 f9       	bld	r25, 7
    515c:	08 95       	ret

0000515e <__gesf2>:
    515e:	0e 94 13 28 	call	0x5026	; 0x5026 <__fp_cmp>
    5162:	08 f4       	brcc	.+2      	; 0x5166 <__gesf2+0x8>
    5164:	8f ef       	ldi	r24, 0xFF	; 255
    5166:	08 95       	ret

00005168 <inverse>:
    5168:	9b 01       	movw	r18, r22
    516a:	ac 01       	movw	r20, r24
    516c:	60 e0       	ldi	r22, 0x00	; 0
    516e:	70 e0       	ldi	r23, 0x00	; 0
    5170:	80 e8       	ldi	r24, 0x80	; 128
    5172:	9f e3       	ldi	r25, 0x3F	; 63
    5174:	0c 94 2e 27 	jmp	0x4e5c	; 0x4e5c <__divsf3>

00005178 <__mulsf3>:
    5178:	0e 94 cf 28 	call	0x519e	; 0x519e <__mulsf3x>
    517c:	0c 94 75 28 	jmp	0x50ea	; 0x50ea <__fp_round>
    5180:	0e 94 67 28 	call	0x50ce	; 0x50ce <__fp_pscA>
    5184:	38 f0       	brcs	.+14     	; 0x5194 <__mulsf3+0x1c>
    5186:	0e 94 6e 28 	call	0x50dc	; 0x50dc <__fp_pscB>
    518a:	20 f0       	brcs	.+8      	; 0x5194 <__mulsf3+0x1c>
    518c:	95 23       	and	r25, r21
    518e:	11 f0       	breq	.+4      	; 0x5194 <__mulsf3+0x1c>
    5190:	0c 94 37 28 	jmp	0x506e	; 0x506e <__fp_inf>
    5194:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__fp_nan>
    5198:	11 24       	eor	r1, r1
    519a:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__fp_szero>

0000519e <__mulsf3x>:
    519e:	0e 94 86 28 	call	0x510c	; 0x510c <__fp_split3>
    51a2:	70 f3       	brcs	.-36     	; 0x5180 <__mulsf3+0x8>

000051a4 <__mulsf3_pse>:
    51a4:	95 9f       	mul	r25, r21
    51a6:	c1 f3       	breq	.-16     	; 0x5198 <__mulsf3+0x20>
    51a8:	95 0f       	add	r25, r21
    51aa:	50 e0       	ldi	r21, 0x00	; 0
    51ac:	55 1f       	adc	r21, r21
    51ae:	62 9f       	mul	r22, r18
    51b0:	f0 01       	movw	r30, r0
    51b2:	72 9f       	mul	r23, r18
    51b4:	bb 27       	eor	r27, r27
    51b6:	f0 0d       	add	r31, r0
    51b8:	b1 1d       	adc	r27, r1
    51ba:	63 9f       	mul	r22, r19
    51bc:	aa 27       	eor	r26, r26
    51be:	f0 0d       	add	r31, r0
    51c0:	b1 1d       	adc	r27, r1
    51c2:	aa 1f       	adc	r26, r26
    51c4:	64 9f       	mul	r22, r20
    51c6:	66 27       	eor	r22, r22
    51c8:	b0 0d       	add	r27, r0
    51ca:	a1 1d       	adc	r26, r1
    51cc:	66 1f       	adc	r22, r22
    51ce:	82 9f       	mul	r24, r18
    51d0:	22 27       	eor	r18, r18
    51d2:	b0 0d       	add	r27, r0
    51d4:	a1 1d       	adc	r26, r1
    51d6:	62 1f       	adc	r22, r18
    51d8:	73 9f       	mul	r23, r19
    51da:	b0 0d       	add	r27, r0
    51dc:	a1 1d       	adc	r26, r1
    51de:	62 1f       	adc	r22, r18
    51e0:	83 9f       	mul	r24, r19
    51e2:	a0 0d       	add	r26, r0
    51e4:	61 1d       	adc	r22, r1
    51e6:	22 1f       	adc	r18, r18
    51e8:	74 9f       	mul	r23, r20
    51ea:	33 27       	eor	r19, r19
    51ec:	a0 0d       	add	r26, r0
    51ee:	61 1d       	adc	r22, r1
    51f0:	23 1f       	adc	r18, r19
    51f2:	84 9f       	mul	r24, r20
    51f4:	60 0d       	add	r22, r0
    51f6:	21 1d       	adc	r18, r1
    51f8:	82 2f       	mov	r24, r18
    51fa:	76 2f       	mov	r23, r22
    51fc:	6a 2f       	mov	r22, r26
    51fe:	11 24       	eor	r1, r1
    5200:	9f 57       	subi	r25, 0x7F	; 127
    5202:	50 40       	sbci	r21, 0x00	; 0
    5204:	9a f0       	brmi	.+38     	; 0x522c <__mulsf3_pse+0x88>
    5206:	f1 f0       	breq	.+60     	; 0x5244 <__mulsf3_pse+0xa0>
    5208:	88 23       	and	r24, r24
    520a:	4a f0       	brmi	.+18     	; 0x521e <__mulsf3_pse+0x7a>
    520c:	ee 0f       	add	r30, r30
    520e:	ff 1f       	adc	r31, r31
    5210:	bb 1f       	adc	r27, r27
    5212:	66 1f       	adc	r22, r22
    5214:	77 1f       	adc	r23, r23
    5216:	88 1f       	adc	r24, r24
    5218:	91 50       	subi	r25, 0x01	; 1
    521a:	50 40       	sbci	r21, 0x00	; 0
    521c:	a9 f7       	brne	.-22     	; 0x5208 <__mulsf3_pse+0x64>
    521e:	9e 3f       	cpi	r25, 0xFE	; 254
    5220:	51 05       	cpc	r21, r1
    5222:	80 f0       	brcs	.+32     	; 0x5244 <__mulsf3_pse+0xa0>
    5224:	0c 94 37 28 	jmp	0x506e	; 0x506e <__fp_inf>
    5228:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__fp_szero>
    522c:	5f 3f       	cpi	r21, 0xFF	; 255
    522e:	e4 f3       	brlt	.-8      	; 0x5228 <__mulsf3_pse+0x84>
    5230:	98 3e       	cpi	r25, 0xE8	; 232
    5232:	d4 f3       	brlt	.-12     	; 0x5228 <__mulsf3_pse+0x84>
    5234:	86 95       	lsr	r24
    5236:	77 95       	ror	r23
    5238:	67 95       	ror	r22
    523a:	b7 95       	ror	r27
    523c:	f7 95       	ror	r31
    523e:	e7 95       	ror	r30
    5240:	9f 5f       	subi	r25, 0xFF	; 255
    5242:	c1 f7       	brne	.-16     	; 0x5234 <__mulsf3_pse+0x90>
    5244:	fe 2b       	or	r31, r30
    5246:	88 0f       	add	r24, r24
    5248:	91 1d       	adc	r25, r1
    524a:	96 95       	lsr	r25
    524c:	87 95       	ror	r24
    524e:	97 f9       	bld	r25, 7
    5250:	08 95       	ret
    5252:	19 f4       	brne	.+6      	; 0x525a <__mulsf3_pse+0xb6>
    5254:	16 f4       	brtc	.+4      	; 0x525a <__mulsf3_pse+0xb6>
    5256:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__fp_nan>
    525a:	0c 94 78 29 	jmp	0x52f0	; 0x52f0 <__fp_mpack>

0000525e <sqrt>:
    525e:	0e 94 8e 28 	call	0x511c	; 0x511c <__fp_splitA>
    5262:	b8 f3       	brcs	.-18     	; 0x5252 <__mulsf3_pse+0xae>
    5264:	99 23       	and	r25, r25
    5266:	c9 f3       	breq	.-14     	; 0x525a <__mulsf3_pse+0xb6>
    5268:	b6 f3       	brts	.-20     	; 0x5256 <__mulsf3_pse+0xb2>
    526a:	9f 57       	subi	r25, 0x7F	; 127
    526c:	55 0b       	sbc	r21, r21
    526e:	87 ff       	sbrs	r24, 7
    5270:	0e 94 86 29 	call	0x530c	; 0x530c <__fp_norm2>
    5274:	00 24       	eor	r0, r0
    5276:	a0 e6       	ldi	r26, 0x60	; 96
    5278:	40 ea       	ldi	r20, 0xA0	; 160
    527a:	90 01       	movw	r18, r0
    527c:	80 58       	subi	r24, 0x80	; 128
    527e:	56 95       	lsr	r21
    5280:	97 95       	ror	r25
    5282:	28 f4       	brcc	.+10     	; 0x528e <sqrt+0x30>
    5284:	80 5c       	subi	r24, 0xC0	; 192
    5286:	66 0f       	add	r22, r22
    5288:	77 1f       	adc	r23, r23
    528a:	88 1f       	adc	r24, r24
    528c:	20 f0       	brcs	.+8      	; 0x5296 <sqrt+0x38>
    528e:	26 17       	cp	r18, r22
    5290:	37 07       	cpc	r19, r23
    5292:	48 07       	cpc	r20, r24
    5294:	30 f4       	brcc	.+12     	; 0x52a2 <sqrt+0x44>
    5296:	62 1b       	sub	r22, r18
    5298:	73 0b       	sbc	r23, r19
    529a:	84 0b       	sbc	r24, r20
    529c:	20 29       	or	r18, r0
    529e:	31 29       	or	r19, r1
    52a0:	4a 2b       	or	r20, r26
    52a2:	a6 95       	lsr	r26
    52a4:	17 94       	ror	r1
    52a6:	07 94       	ror	r0
    52a8:	20 25       	eor	r18, r0
    52aa:	31 25       	eor	r19, r1
    52ac:	4a 27       	eor	r20, r26
    52ae:	58 f7       	brcc	.-42     	; 0x5286 <sqrt+0x28>
    52b0:	66 0f       	add	r22, r22
    52b2:	77 1f       	adc	r23, r23
    52b4:	88 1f       	adc	r24, r24
    52b6:	20 f0       	brcs	.+8      	; 0x52c0 <sqrt+0x62>
    52b8:	26 17       	cp	r18, r22
    52ba:	37 07       	cpc	r19, r23
    52bc:	48 07       	cpc	r20, r24
    52be:	30 f4       	brcc	.+12     	; 0x52cc <sqrt+0x6e>
    52c0:	62 0b       	sbc	r22, r18
    52c2:	73 0b       	sbc	r23, r19
    52c4:	84 0b       	sbc	r24, r20
    52c6:	20 0d       	add	r18, r0
    52c8:	31 1d       	adc	r19, r1
    52ca:	41 1d       	adc	r20, r1
    52cc:	a0 95       	com	r26
    52ce:	81 f7       	brne	.-32     	; 0x52b0 <sqrt+0x52>
    52d0:	b9 01       	movw	r22, r18
    52d2:	84 2f       	mov	r24, r20
    52d4:	91 58       	subi	r25, 0x81	; 129
    52d6:	88 0f       	add	r24, r24
    52d8:	96 95       	lsr	r25
    52da:	87 95       	ror	r24
    52dc:	08 95       	ret

000052de <square>:
    52de:	9b 01       	movw	r18, r22
    52e0:	ac 01       	movw	r20, r24
    52e2:	0c 94 bc 28 	jmp	0x5178	; 0x5178 <__mulsf3>

000052e6 <__unordsf2>:
    52e6:	0e 94 13 28 	call	0x5026	; 0x5026 <__fp_cmp>
    52ea:	88 0b       	sbc	r24, r24
    52ec:	99 0b       	sbc	r25, r25
    52ee:	08 95       	ret

000052f0 <__fp_mpack>:
    52f0:	9f 3f       	cpi	r25, 0xFF	; 255
    52f2:	31 f0       	breq	.+12     	; 0x5300 <__fp_mpack_finite+0xc>

000052f4 <__fp_mpack_finite>:
    52f4:	91 50       	subi	r25, 0x01	; 1
    52f6:	20 f4       	brcc	.+8      	; 0x5300 <__fp_mpack_finite+0xc>
    52f8:	87 95       	ror	r24
    52fa:	77 95       	ror	r23
    52fc:	67 95       	ror	r22
    52fe:	b7 95       	ror	r27
    5300:	88 0f       	add	r24, r24
    5302:	91 1d       	adc	r25, r1
    5304:	96 95       	lsr	r25
    5306:	87 95       	ror	r24
    5308:	97 f9       	bld	r25, 7
    530a:	08 95       	ret

0000530c <__fp_norm2>:
    530c:	91 50       	subi	r25, 0x01	; 1
    530e:	50 40       	sbci	r21, 0x00	; 0
    5310:	66 0f       	add	r22, r22
    5312:	77 1f       	adc	r23, r23
    5314:	88 1f       	adc	r24, r24
    5316:	d2 f7       	brpl	.-12     	; 0x530c <__fp_norm2>
    5318:	08 95       	ret

0000531a <__udivmodsi4>:
    531a:	a1 e2       	ldi	r26, 0x21	; 33
    531c:	1a 2e       	mov	r1, r26
    531e:	aa 1b       	sub	r26, r26
    5320:	bb 1b       	sub	r27, r27
    5322:	fd 01       	movw	r30, r26
    5324:	0d c0       	rjmp	.+26     	; 0x5340 <__udivmodsi4_ep>

00005326 <__udivmodsi4_loop>:
    5326:	aa 1f       	adc	r26, r26
    5328:	bb 1f       	adc	r27, r27
    532a:	ee 1f       	adc	r30, r30
    532c:	ff 1f       	adc	r31, r31
    532e:	a2 17       	cp	r26, r18
    5330:	b3 07       	cpc	r27, r19
    5332:	e4 07       	cpc	r30, r20
    5334:	f5 07       	cpc	r31, r21
    5336:	20 f0       	brcs	.+8      	; 0x5340 <__udivmodsi4_ep>
    5338:	a2 1b       	sub	r26, r18
    533a:	b3 0b       	sbc	r27, r19
    533c:	e4 0b       	sbc	r30, r20
    533e:	f5 0b       	sbc	r31, r21

00005340 <__udivmodsi4_ep>:
    5340:	66 1f       	adc	r22, r22
    5342:	77 1f       	adc	r23, r23
    5344:	88 1f       	adc	r24, r24
    5346:	99 1f       	adc	r25, r25
    5348:	1a 94       	dec	r1
    534a:	69 f7       	brne	.-38     	; 0x5326 <__udivmodsi4_loop>
    534c:	60 95       	com	r22
    534e:	70 95       	com	r23
    5350:	80 95       	com	r24
    5352:	90 95       	com	r25
    5354:	9b 01       	movw	r18, r22
    5356:	ac 01       	movw	r20, r24
    5358:	bd 01       	movw	r22, r26
    535a:	cf 01       	movw	r24, r30
    535c:	08 95       	ret

0000535e <__tablejump2__>:
    535e:	ee 0f       	add	r30, r30
    5360:	ff 1f       	adc	r31, r31
    5362:	05 90       	lpm	r0, Z+
    5364:	f4 91       	lpm	r31, Z
    5366:	e0 2d       	mov	r30, r0
    5368:	09 94       	ijmp

0000536a <malloc>:
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	82 30       	cpi	r24, 0x02	; 2
    5370:	91 05       	cpc	r25, r1
    5372:	10 f4       	brcc	.+4      	; 0x5378 <malloc+0xe>
    5374:	82 e0       	ldi	r24, 0x02	; 2
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	e0 91 c9 03 	lds	r30, 0x03C9
    537c:	f0 91 ca 03 	lds	r31, 0x03CA
    5380:	20 e0       	ldi	r18, 0x00	; 0
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	c0 e0       	ldi	r28, 0x00	; 0
    5386:	d0 e0       	ldi	r29, 0x00	; 0
    5388:	30 97       	sbiw	r30, 0x00	; 0
    538a:	11 f1       	breq	.+68     	; 0x53d0 <malloc+0x66>
    538c:	40 81       	ld	r20, Z
    538e:	51 81       	ldd	r21, Z+1	; 0x01
    5390:	48 17       	cp	r20, r24
    5392:	59 07       	cpc	r21, r25
    5394:	c0 f0       	brcs	.+48     	; 0x53c6 <malloc+0x5c>
    5396:	48 17       	cp	r20, r24
    5398:	59 07       	cpc	r21, r25
    539a:	61 f4       	brne	.+24     	; 0x53b4 <malloc+0x4a>
    539c:	82 81       	ldd	r24, Z+2	; 0x02
    539e:	93 81       	ldd	r25, Z+3	; 0x03
    53a0:	20 97       	sbiw	r28, 0x00	; 0
    53a2:	19 f0       	breq	.+6      	; 0x53aa <malloc+0x40>
    53a4:	9b 83       	std	Y+3, r25	; 0x03
    53a6:	8a 83       	std	Y+2, r24	; 0x02
    53a8:	2b c0       	rjmp	.+86     	; 0x5400 <malloc+0x96>
    53aa:	90 93 ca 03 	sts	0x03CA, r25
    53ae:	80 93 c9 03 	sts	0x03C9, r24
    53b2:	26 c0       	rjmp	.+76     	; 0x5400 <malloc+0x96>
    53b4:	21 15       	cp	r18, r1
    53b6:	31 05       	cpc	r19, r1
    53b8:	19 f0       	breq	.+6      	; 0x53c0 <malloc+0x56>
    53ba:	42 17       	cp	r20, r18
    53bc:	53 07       	cpc	r21, r19
    53be:	18 f4       	brcc	.+6      	; 0x53c6 <malloc+0x5c>
    53c0:	9a 01       	movw	r18, r20
    53c2:	be 01       	movw	r22, r28
    53c4:	df 01       	movw	r26, r30
    53c6:	ef 01       	movw	r28, r30
    53c8:	02 80       	ldd	r0, Z+2	; 0x02
    53ca:	f3 81       	ldd	r31, Z+3	; 0x03
    53cc:	e0 2d       	mov	r30, r0
    53ce:	dc cf       	rjmp	.-72     	; 0x5388 <malloc+0x1e>
    53d0:	21 15       	cp	r18, r1
    53d2:	31 05       	cpc	r19, r1
    53d4:	09 f1       	breq	.+66     	; 0x5418 <malloc+0xae>
    53d6:	28 1b       	sub	r18, r24
    53d8:	39 0b       	sbc	r19, r25
    53da:	24 30       	cpi	r18, 0x04	; 4
    53dc:	31 05       	cpc	r19, r1
    53de:	90 f4       	brcc	.+36     	; 0x5404 <malloc+0x9a>
    53e0:	12 96       	adiw	r26, 0x02	; 2
    53e2:	8d 91       	ld	r24, X+
    53e4:	9c 91       	ld	r25, X
    53e6:	13 97       	sbiw	r26, 0x03	; 3
    53e8:	61 15       	cp	r22, r1
    53ea:	71 05       	cpc	r23, r1
    53ec:	21 f0       	breq	.+8      	; 0x53f6 <malloc+0x8c>
    53ee:	fb 01       	movw	r30, r22
    53f0:	93 83       	std	Z+3, r25	; 0x03
    53f2:	82 83       	std	Z+2, r24	; 0x02
    53f4:	04 c0       	rjmp	.+8      	; 0x53fe <malloc+0x94>
    53f6:	90 93 ca 03 	sts	0x03CA, r25
    53fa:	80 93 c9 03 	sts	0x03C9, r24
    53fe:	fd 01       	movw	r30, r26
    5400:	32 96       	adiw	r30, 0x02	; 2
    5402:	44 c0       	rjmp	.+136    	; 0x548c <malloc+0x122>
    5404:	fd 01       	movw	r30, r26
    5406:	e2 0f       	add	r30, r18
    5408:	f3 1f       	adc	r31, r19
    540a:	81 93       	st	Z+, r24
    540c:	91 93       	st	Z+, r25
    540e:	22 50       	subi	r18, 0x02	; 2
    5410:	31 09       	sbc	r19, r1
    5412:	2d 93       	st	X+, r18
    5414:	3c 93       	st	X, r19
    5416:	3a c0       	rjmp	.+116    	; 0x548c <malloc+0x122>
    5418:	20 91 c7 03 	lds	r18, 0x03C7
    541c:	30 91 c8 03 	lds	r19, 0x03C8
    5420:	23 2b       	or	r18, r19
    5422:	41 f4       	brne	.+16     	; 0x5434 <malloc+0xca>
    5424:	20 91 02 01 	lds	r18, 0x0102
    5428:	30 91 03 01 	lds	r19, 0x0103
    542c:	30 93 c8 03 	sts	0x03C8, r19
    5430:	20 93 c7 03 	sts	0x03C7, r18
    5434:	20 91 00 01 	lds	r18, 0x0100
    5438:	30 91 01 01 	lds	r19, 0x0101
    543c:	21 15       	cp	r18, r1
    543e:	31 05       	cpc	r19, r1
    5440:	41 f4       	brne	.+16     	; 0x5452 <malloc+0xe8>
    5442:	2d b7       	in	r18, 0x3d	; 61
    5444:	3e b7       	in	r19, 0x3e	; 62
    5446:	40 91 04 01 	lds	r20, 0x0104
    544a:	50 91 05 01 	lds	r21, 0x0105
    544e:	24 1b       	sub	r18, r20
    5450:	35 0b       	sbc	r19, r21
    5452:	e0 91 c7 03 	lds	r30, 0x03C7
    5456:	f0 91 c8 03 	lds	r31, 0x03C8
    545a:	e2 17       	cp	r30, r18
    545c:	f3 07       	cpc	r31, r19
    545e:	a0 f4       	brcc	.+40     	; 0x5488 <malloc+0x11e>
    5460:	2e 1b       	sub	r18, r30
    5462:	3f 0b       	sbc	r19, r31
    5464:	28 17       	cp	r18, r24
    5466:	39 07       	cpc	r19, r25
    5468:	78 f0       	brcs	.+30     	; 0x5488 <malloc+0x11e>
    546a:	ac 01       	movw	r20, r24
    546c:	4e 5f       	subi	r20, 0xFE	; 254
    546e:	5f 4f       	sbci	r21, 0xFF	; 255
    5470:	24 17       	cp	r18, r20
    5472:	35 07       	cpc	r19, r21
    5474:	48 f0       	brcs	.+18     	; 0x5488 <malloc+0x11e>
    5476:	4e 0f       	add	r20, r30
    5478:	5f 1f       	adc	r21, r31
    547a:	50 93 c8 03 	sts	0x03C8, r21
    547e:	40 93 c7 03 	sts	0x03C7, r20
    5482:	81 93       	st	Z+, r24
    5484:	91 93       	st	Z+, r25
    5486:	02 c0       	rjmp	.+4      	; 0x548c <malloc+0x122>
    5488:	e0 e0       	ldi	r30, 0x00	; 0
    548a:	f0 e0       	ldi	r31, 0x00	; 0
    548c:	cf 01       	movw	r24, r30
    548e:	df 91       	pop	r29
    5490:	cf 91       	pop	r28
    5492:	08 95       	ret

00005494 <free>:
    5494:	0f 93       	push	r16
    5496:	1f 93       	push	r17
    5498:	cf 93       	push	r28
    549a:	df 93       	push	r29
    549c:	00 97       	sbiw	r24, 0x00	; 0
    549e:	09 f4       	brne	.+2      	; 0x54a2 <free+0xe>
    54a0:	8c c0       	rjmp	.+280    	; 0x55ba <free+0x126>
    54a2:	fc 01       	movw	r30, r24
    54a4:	32 97       	sbiw	r30, 0x02	; 2
    54a6:	13 82       	std	Z+3, r1	; 0x03
    54a8:	12 82       	std	Z+2, r1	; 0x02
    54aa:	00 91 c9 03 	lds	r16, 0x03C9
    54ae:	10 91 ca 03 	lds	r17, 0x03CA
    54b2:	01 15       	cp	r16, r1
    54b4:	11 05       	cpc	r17, r1
    54b6:	81 f4       	brne	.+32     	; 0x54d8 <free+0x44>
    54b8:	20 81       	ld	r18, Z
    54ba:	31 81       	ldd	r19, Z+1	; 0x01
    54bc:	82 0f       	add	r24, r18
    54be:	93 1f       	adc	r25, r19
    54c0:	20 91 c7 03 	lds	r18, 0x03C7
    54c4:	30 91 c8 03 	lds	r19, 0x03C8
    54c8:	28 17       	cp	r18, r24
    54ca:	39 07       	cpc	r19, r25
    54cc:	79 f5       	brne	.+94     	; 0x552c <free+0x98>
    54ce:	f0 93 c8 03 	sts	0x03C8, r31
    54d2:	e0 93 c7 03 	sts	0x03C7, r30
    54d6:	71 c0       	rjmp	.+226    	; 0x55ba <free+0x126>
    54d8:	d8 01       	movw	r26, r16
    54da:	40 e0       	ldi	r20, 0x00	; 0
    54dc:	50 e0       	ldi	r21, 0x00	; 0
    54de:	ae 17       	cp	r26, r30
    54e0:	bf 07       	cpc	r27, r31
    54e2:	50 f4       	brcc	.+20     	; 0x54f8 <free+0x64>
    54e4:	12 96       	adiw	r26, 0x02	; 2
    54e6:	2d 91       	ld	r18, X+
    54e8:	3c 91       	ld	r19, X
    54ea:	13 97       	sbiw	r26, 0x03	; 3
    54ec:	ad 01       	movw	r20, r26
    54ee:	21 15       	cp	r18, r1
    54f0:	31 05       	cpc	r19, r1
    54f2:	09 f1       	breq	.+66     	; 0x5536 <free+0xa2>
    54f4:	d9 01       	movw	r26, r18
    54f6:	f3 cf       	rjmp	.-26     	; 0x54de <free+0x4a>
    54f8:	9d 01       	movw	r18, r26
    54fa:	da 01       	movw	r26, r20
    54fc:	33 83       	std	Z+3, r19	; 0x03
    54fe:	22 83       	std	Z+2, r18	; 0x02
    5500:	60 81       	ld	r22, Z
    5502:	71 81       	ldd	r23, Z+1	; 0x01
    5504:	86 0f       	add	r24, r22
    5506:	97 1f       	adc	r25, r23
    5508:	82 17       	cp	r24, r18
    550a:	93 07       	cpc	r25, r19
    550c:	69 f4       	brne	.+26     	; 0x5528 <free+0x94>
    550e:	ec 01       	movw	r28, r24
    5510:	28 81       	ld	r18, Y
    5512:	39 81       	ldd	r19, Y+1	; 0x01
    5514:	26 0f       	add	r18, r22
    5516:	37 1f       	adc	r19, r23
    5518:	2e 5f       	subi	r18, 0xFE	; 254
    551a:	3f 4f       	sbci	r19, 0xFF	; 255
    551c:	31 83       	std	Z+1, r19	; 0x01
    551e:	20 83       	st	Z, r18
    5520:	8a 81       	ldd	r24, Y+2	; 0x02
    5522:	9b 81       	ldd	r25, Y+3	; 0x03
    5524:	93 83       	std	Z+3, r25	; 0x03
    5526:	82 83       	std	Z+2, r24	; 0x02
    5528:	45 2b       	or	r20, r21
    552a:	29 f4       	brne	.+10     	; 0x5536 <free+0xa2>
    552c:	f0 93 ca 03 	sts	0x03CA, r31
    5530:	e0 93 c9 03 	sts	0x03C9, r30
    5534:	42 c0       	rjmp	.+132    	; 0x55ba <free+0x126>
    5536:	13 96       	adiw	r26, 0x03	; 3
    5538:	fc 93       	st	X, r31
    553a:	ee 93       	st	-X, r30
    553c:	12 97       	sbiw	r26, 0x02	; 2
    553e:	ed 01       	movw	r28, r26
    5540:	49 91       	ld	r20, Y+
    5542:	59 91       	ld	r21, Y+
    5544:	9e 01       	movw	r18, r28
    5546:	24 0f       	add	r18, r20
    5548:	35 1f       	adc	r19, r21
    554a:	e2 17       	cp	r30, r18
    554c:	f3 07       	cpc	r31, r19
    554e:	71 f4       	brne	.+28     	; 0x556c <free+0xd8>
    5550:	80 81       	ld	r24, Z
    5552:	91 81       	ldd	r25, Z+1	; 0x01
    5554:	84 0f       	add	r24, r20
    5556:	95 1f       	adc	r25, r21
    5558:	02 96       	adiw	r24, 0x02	; 2
    555a:	11 96       	adiw	r26, 0x01	; 1
    555c:	9c 93       	st	X, r25
    555e:	8e 93       	st	-X, r24
    5560:	82 81       	ldd	r24, Z+2	; 0x02
    5562:	93 81       	ldd	r25, Z+3	; 0x03
    5564:	13 96       	adiw	r26, 0x03	; 3
    5566:	9c 93       	st	X, r25
    5568:	8e 93       	st	-X, r24
    556a:	12 97       	sbiw	r26, 0x02	; 2
    556c:	e0 e0       	ldi	r30, 0x00	; 0
    556e:	f0 e0       	ldi	r31, 0x00	; 0
    5570:	d8 01       	movw	r26, r16
    5572:	12 96       	adiw	r26, 0x02	; 2
    5574:	8d 91       	ld	r24, X+
    5576:	9c 91       	ld	r25, X
    5578:	13 97       	sbiw	r26, 0x03	; 3
    557a:	00 97       	sbiw	r24, 0x00	; 0
    557c:	19 f0       	breq	.+6      	; 0x5584 <free+0xf0>
    557e:	f8 01       	movw	r30, r16
    5580:	8c 01       	movw	r16, r24
    5582:	f6 cf       	rjmp	.-20     	; 0x5570 <free+0xdc>
    5584:	8d 91       	ld	r24, X+
    5586:	9c 91       	ld	r25, X
    5588:	98 01       	movw	r18, r16
    558a:	2e 5f       	subi	r18, 0xFE	; 254
    558c:	3f 4f       	sbci	r19, 0xFF	; 255
    558e:	82 0f       	add	r24, r18
    5590:	93 1f       	adc	r25, r19
    5592:	20 91 c7 03 	lds	r18, 0x03C7
    5596:	30 91 c8 03 	lds	r19, 0x03C8
    559a:	28 17       	cp	r18, r24
    559c:	39 07       	cpc	r19, r25
    559e:	69 f4       	brne	.+26     	; 0x55ba <free+0x126>
    55a0:	30 97       	sbiw	r30, 0x00	; 0
    55a2:	29 f4       	brne	.+10     	; 0x55ae <free+0x11a>
    55a4:	10 92 ca 03 	sts	0x03CA, r1
    55a8:	10 92 c9 03 	sts	0x03C9, r1
    55ac:	02 c0       	rjmp	.+4      	; 0x55b2 <free+0x11e>
    55ae:	13 82       	std	Z+3, r1	; 0x03
    55b0:	12 82       	std	Z+2, r1	; 0x02
    55b2:	10 93 c8 03 	sts	0x03C8, r17
    55b6:	00 93 c7 03 	sts	0x03C7, r16
    55ba:	df 91       	pop	r29
    55bc:	cf 91       	pop	r28
    55be:	1f 91       	pop	r17
    55c0:	0f 91       	pop	r16
    55c2:	08 95       	ret

000055c4 <realloc>:
    55c4:	a0 e0       	ldi	r26, 0x00	; 0
    55c6:	b0 e0       	ldi	r27, 0x00	; 0
    55c8:	e8 ee       	ldi	r30, 0xE8	; 232
    55ca:	fa e2       	ldi	r31, 0x2A	; 42
    55cc:	0c 94 c6 2b 	jmp	0x578c	; 0x578c <__prologue_saves__+0x8>
    55d0:	ec 01       	movw	r28, r24
    55d2:	00 97       	sbiw	r24, 0x00	; 0
    55d4:	21 f4       	brne	.+8      	; 0x55de <realloc+0x1a>
    55d6:	cb 01       	movw	r24, r22
    55d8:	0e 94 b5 29 	call	0x536a	; 0x536a <malloc>
    55dc:	b8 c0       	rjmp	.+368    	; 0x574e <realloc+0x18a>
    55de:	fc 01       	movw	r30, r24
    55e0:	e6 0f       	add	r30, r22
    55e2:	f7 1f       	adc	r31, r23
    55e4:	9c 01       	movw	r18, r24
    55e6:	22 50       	subi	r18, 0x02	; 2
    55e8:	31 09       	sbc	r19, r1
    55ea:	e2 17       	cp	r30, r18
    55ec:	f3 07       	cpc	r31, r19
    55ee:	08 f4       	brcc	.+2      	; 0x55f2 <realloc+0x2e>
    55f0:	ac c0       	rjmp	.+344    	; 0x574a <realloc+0x186>
    55f2:	d9 01       	movw	r26, r18
    55f4:	0d 91       	ld	r16, X+
    55f6:	1c 91       	ld	r17, X
    55f8:	11 97       	sbiw	r26, 0x01	; 1
    55fa:	06 17       	cp	r16, r22
    55fc:	17 07       	cpc	r17, r23
    55fe:	b0 f0       	brcs	.+44     	; 0x562c <realloc+0x68>
    5600:	05 30       	cpi	r16, 0x05	; 5
    5602:	11 05       	cpc	r17, r1
    5604:	08 f4       	brcc	.+2      	; 0x5608 <realloc+0x44>
    5606:	9f c0       	rjmp	.+318    	; 0x5746 <realloc+0x182>
    5608:	c8 01       	movw	r24, r16
    560a:	04 97       	sbiw	r24, 0x04	; 4
    560c:	86 17       	cp	r24, r22
    560e:	97 07       	cpc	r25, r23
    5610:	08 f4       	brcc	.+2      	; 0x5614 <realloc+0x50>
    5612:	99 c0       	rjmp	.+306    	; 0x5746 <realloc+0x182>
    5614:	02 50       	subi	r16, 0x02	; 2
    5616:	11 09       	sbc	r17, r1
    5618:	06 1b       	sub	r16, r22
    561a:	17 0b       	sbc	r17, r23
    561c:	01 93       	st	Z+, r16
    561e:	11 93       	st	Z+, r17
    5620:	6d 93       	st	X+, r22
    5622:	7c 93       	st	X, r23
    5624:	cf 01       	movw	r24, r30
    5626:	0e 94 4a 2a 	call	0x5494	; 0x5494 <free>
    562a:	8d c0       	rjmp	.+282    	; 0x5746 <realloc+0x182>
    562c:	5b 01       	movw	r10, r22
    562e:	a0 1a       	sub	r10, r16
    5630:	b1 0a       	sbc	r11, r17
    5632:	4c 01       	movw	r8, r24
    5634:	80 0e       	add	r8, r16
    5636:	91 1e       	adc	r9, r17
    5638:	a0 91 c9 03 	lds	r26, 0x03C9
    563c:	b0 91 ca 03 	lds	r27, 0x03CA
    5640:	40 e0       	ldi	r20, 0x00	; 0
    5642:	50 e0       	ldi	r21, 0x00	; 0
    5644:	e1 2c       	mov	r14, r1
    5646:	f1 2c       	mov	r15, r1
    5648:	10 97       	sbiw	r26, 0x00	; 0
    564a:	09 f4       	brne	.+2      	; 0x564e <realloc+0x8a>
    564c:	4a c0       	rjmp	.+148    	; 0x56e2 <realloc+0x11e>
    564e:	a8 15       	cp	r26, r8
    5650:	b9 05       	cpc	r27, r9
    5652:	d1 f5       	brne	.+116    	; 0x56c8 <realloc+0x104>
    5654:	6d 90       	ld	r6, X+
    5656:	7c 90       	ld	r7, X
    5658:	11 97       	sbiw	r26, 0x01	; 1
    565a:	63 01       	movw	r12, r6
    565c:	82 e0       	ldi	r24, 0x02	; 2
    565e:	c8 0e       	add	r12, r24
    5660:	d1 1c       	adc	r13, r1
    5662:	ca 14       	cp	r12, r10
    5664:	db 04       	cpc	r13, r11
    5666:	80 f1       	brcs	.+96     	; 0x56c8 <realloc+0x104>
    5668:	a3 01       	movw	r20, r6
    566a:	4a 19       	sub	r20, r10
    566c:	5b 09       	sbc	r21, r11
    566e:	6a 01       	movw	r12, r20
    5670:	82 e0       	ldi	r24, 0x02	; 2
    5672:	c8 0e       	add	r12, r24
    5674:	d1 1c       	adc	r13, r1
    5676:	12 96       	adiw	r26, 0x02	; 2
    5678:	bc 90       	ld	r11, X
    567a:	12 97       	sbiw	r26, 0x02	; 2
    567c:	13 96       	adiw	r26, 0x03	; 3
    567e:	ac 91       	ld	r26, X
    5680:	b5 e0       	ldi	r27, 0x05	; 5
    5682:	cb 16       	cp	r12, r27
    5684:	d1 04       	cpc	r13, r1
    5686:	40 f0       	brcs	.+16     	; 0x5698 <realloc+0xd4>
    5688:	b2 82       	std	Z+2, r11	; 0x02
    568a:	a3 83       	std	Z+3, r26	; 0x03
    568c:	51 83       	std	Z+1, r21	; 0x01
    568e:	40 83       	st	Z, r20
    5690:	d9 01       	movw	r26, r18
    5692:	6d 93       	st	X+, r22
    5694:	7c 93       	st	X, r23
    5696:	0a c0       	rjmp	.+20     	; 0x56ac <realloc+0xe8>
    5698:	0e 5f       	subi	r16, 0xFE	; 254
    569a:	1f 4f       	sbci	r17, 0xFF	; 255
    569c:	c3 01       	movw	r24, r6
    569e:	80 0f       	add	r24, r16
    56a0:	91 1f       	adc	r25, r17
    56a2:	f9 01       	movw	r30, r18
    56a4:	91 83       	std	Z+1, r25	; 0x01
    56a6:	80 83       	st	Z, r24
    56a8:	eb 2d       	mov	r30, r11
    56aa:	fa 2f       	mov	r31, r26
    56ac:	e1 14       	cp	r14, r1
    56ae:	f1 04       	cpc	r15, r1
    56b0:	31 f0       	breq	.+12     	; 0x56be <realloc+0xfa>
    56b2:	d7 01       	movw	r26, r14
    56b4:	13 96       	adiw	r26, 0x03	; 3
    56b6:	fc 93       	st	X, r31
    56b8:	ee 93       	st	-X, r30
    56ba:	12 97       	sbiw	r26, 0x02	; 2
    56bc:	44 c0       	rjmp	.+136    	; 0x5746 <realloc+0x182>
    56be:	f0 93 ca 03 	sts	0x03CA, r31
    56c2:	e0 93 c9 03 	sts	0x03C9, r30
    56c6:	3f c0       	rjmp	.+126    	; 0x5746 <realloc+0x182>
    56c8:	8d 91       	ld	r24, X+
    56ca:	9c 91       	ld	r25, X
    56cc:	11 97       	sbiw	r26, 0x01	; 1
    56ce:	48 17       	cp	r20, r24
    56d0:	59 07       	cpc	r21, r25
    56d2:	08 f4       	brcc	.+2      	; 0x56d6 <realloc+0x112>
    56d4:	ac 01       	movw	r20, r24
    56d6:	7d 01       	movw	r14, r26
    56d8:	12 96       	adiw	r26, 0x02	; 2
    56da:	0d 90       	ld	r0, X+
    56dc:	bc 91       	ld	r27, X
    56de:	a0 2d       	mov	r26, r0
    56e0:	b3 cf       	rjmp	.-154    	; 0x5648 <realloc+0x84>
    56e2:	80 91 c7 03 	lds	r24, 0x03C7
    56e6:	90 91 c8 03 	lds	r25, 0x03C8
    56ea:	88 15       	cp	r24, r8
    56ec:	99 05       	cpc	r25, r9
    56ee:	e1 f4       	brne	.+56     	; 0x5728 <realloc+0x164>
    56f0:	46 17       	cp	r20, r22
    56f2:	57 07       	cpc	r21, r23
    56f4:	c8 f4       	brcc	.+50     	; 0x5728 <realloc+0x164>
    56f6:	80 91 00 01 	lds	r24, 0x0100
    56fa:	90 91 01 01 	lds	r25, 0x0101
    56fe:	00 97       	sbiw	r24, 0x00	; 0
    5700:	41 f4       	brne	.+16     	; 0x5712 <realloc+0x14e>
    5702:	8d b7       	in	r24, 0x3d	; 61
    5704:	9e b7       	in	r25, 0x3e	; 62
    5706:	40 91 04 01 	lds	r20, 0x0104
    570a:	50 91 05 01 	lds	r21, 0x0105
    570e:	84 1b       	sub	r24, r20
    5710:	95 0b       	sbc	r25, r21
    5712:	e8 17       	cp	r30, r24
    5714:	f9 07       	cpc	r31, r25
    5716:	c8 f4       	brcc	.+50     	; 0x574a <realloc+0x186>
    5718:	f0 93 c8 03 	sts	0x03C8, r31
    571c:	e0 93 c7 03 	sts	0x03C7, r30
    5720:	f9 01       	movw	r30, r18
    5722:	71 83       	std	Z+1, r23	; 0x01
    5724:	60 83       	st	Z, r22
    5726:	0f c0       	rjmp	.+30     	; 0x5746 <realloc+0x182>
    5728:	cb 01       	movw	r24, r22
    572a:	0e 94 b5 29 	call	0x536a	; 0x536a <malloc>
    572e:	7c 01       	movw	r14, r24
    5730:	00 97       	sbiw	r24, 0x00	; 0
    5732:	59 f0       	breq	.+22     	; 0x574a <realloc+0x186>
    5734:	a8 01       	movw	r20, r16
    5736:	be 01       	movw	r22, r28
    5738:	0e 94 b9 2b 	call	0x5772	; 0x5772 <memcpy>
    573c:	ce 01       	movw	r24, r28
    573e:	0e 94 4a 2a 	call	0x5494	; 0x5494 <free>
    5742:	c7 01       	movw	r24, r14
    5744:	04 c0       	rjmp	.+8      	; 0x574e <realloc+0x18a>
    5746:	ce 01       	movw	r24, r28
    5748:	02 c0       	rjmp	.+4      	; 0x574e <realloc+0x18a>
    574a:	80 e0       	ldi	r24, 0x00	; 0
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	cd b7       	in	r28, 0x3d	; 61
    5750:	de b7       	in	r29, 0x3e	; 62
    5752:	ee e0       	ldi	r30, 0x0E	; 14
    5754:	0c 94 e2 2b 	jmp	0x57c4	; 0x57c4 <__epilogue_restores__+0x8>

00005758 <memcmp>:
    5758:	fb 01       	movw	r30, r22
    575a:	dc 01       	movw	r26, r24
    575c:	04 c0       	rjmp	.+8      	; 0x5766 <memcmp+0xe>
    575e:	8d 91       	ld	r24, X+
    5760:	01 90       	ld	r0, Z+
    5762:	80 19       	sub	r24, r0
    5764:	21 f4       	brne	.+8      	; 0x576e <memcmp+0x16>
    5766:	41 50       	subi	r20, 0x01	; 1
    5768:	50 40       	sbci	r21, 0x00	; 0
    576a:	c8 f7       	brcc	.-14     	; 0x575e <memcmp+0x6>
    576c:	88 1b       	sub	r24, r24
    576e:	99 0b       	sbc	r25, r25
    5770:	08 95       	ret

00005772 <memcpy>:
    5772:	fb 01       	movw	r30, r22
    5774:	dc 01       	movw	r26, r24
    5776:	02 c0       	rjmp	.+4      	; 0x577c <memcpy+0xa>
    5778:	01 90       	ld	r0, Z+
    577a:	0d 92       	st	X+, r0
    577c:	41 50       	subi	r20, 0x01	; 1
    577e:	50 40       	sbci	r21, 0x00	; 0
    5780:	d8 f7       	brcc	.-10     	; 0x5778 <memcpy+0x6>
    5782:	08 95       	ret

00005784 <__prologue_saves__>:
    5784:	2f 92       	push	r2
    5786:	3f 92       	push	r3
    5788:	4f 92       	push	r4
    578a:	5f 92       	push	r5
    578c:	6f 92       	push	r6
    578e:	7f 92       	push	r7
    5790:	8f 92       	push	r8
    5792:	9f 92       	push	r9
    5794:	af 92       	push	r10
    5796:	bf 92       	push	r11
    5798:	cf 92       	push	r12
    579a:	df 92       	push	r13
    579c:	ef 92       	push	r14
    579e:	ff 92       	push	r15
    57a0:	0f 93       	push	r16
    57a2:	1f 93       	push	r17
    57a4:	cf 93       	push	r28
    57a6:	df 93       	push	r29
    57a8:	cd b7       	in	r28, 0x3d	; 61
    57aa:	de b7       	in	r29, 0x3e	; 62
    57ac:	ca 1b       	sub	r28, r26
    57ae:	db 0b       	sbc	r29, r27
    57b0:	0f b6       	in	r0, 0x3f	; 63
    57b2:	f8 94       	cli
    57b4:	de bf       	out	0x3e, r29	; 62
    57b6:	0f be       	out	0x3f, r0	; 63
    57b8:	cd bf       	out	0x3d, r28	; 61
    57ba:	09 94       	ijmp

000057bc <__epilogue_restores__>:
    57bc:	2a 88       	ldd	r2, Y+18	; 0x12
    57be:	39 88       	ldd	r3, Y+17	; 0x11
    57c0:	48 88       	ldd	r4, Y+16	; 0x10
    57c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    57c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    57c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    57c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    57ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    57cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    57ce:	b9 84       	ldd	r11, Y+9	; 0x09
    57d0:	c8 84       	ldd	r12, Y+8	; 0x08
    57d2:	df 80       	ldd	r13, Y+7	; 0x07
    57d4:	ee 80       	ldd	r14, Y+6	; 0x06
    57d6:	fd 80       	ldd	r15, Y+5	; 0x05
    57d8:	0c 81       	ldd	r16, Y+4	; 0x04
    57da:	1b 81       	ldd	r17, Y+3	; 0x03
    57dc:	aa 81       	ldd	r26, Y+2	; 0x02
    57de:	b9 81       	ldd	r27, Y+1	; 0x01
    57e0:	ce 0f       	add	r28, r30
    57e2:	d1 1d       	adc	r29, r1
    57e4:	0f b6       	in	r0, 0x3f	; 63
    57e6:	f8 94       	cli
    57e8:	de bf       	out	0x3e, r29	; 62
    57ea:	0f be       	out	0x3f, r0	; 63
    57ec:	cd bf       	out	0x3d, r28	; 61
    57ee:	ed 01       	movw	r28, r26
    57f0:	08 95       	ret

000057f2 <_exit>:
    57f2:	f8 94       	cli

000057f4 <__stop_program>:
    57f4:	ff cf       	rjmp	.-2      	; 0x57f4 <__stop_program>
